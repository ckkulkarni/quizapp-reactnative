4a072f39a848a5ded053ef585980cd1a
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Question = _interopRequireDefault(require("../Question1"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('Question 1 component', function () {
  var mockQuizContext = {
    trackScore: true,
    score: 0,
    setScore: jest.fn(),
    selectedValue: 'ReactJS'
  };
  var wrapper;
  beforeEach(function () {
    wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Question.default, {}), {
      context: {
        QuizContext: mockQuizContext
      }
    });
    jest.spyOn(_react.default, 'useContext').mockImplementation(function () {
      return mockQuizContext;
    });
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  it('the component renders properly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should render one question, and 5 answers for that quesiton', function () {
    var question = '';
    console.log(mockQuizContext.selectedValue);
    var questionText = mockQuizContext.selectedValue === 'ReactJS' ? 'What is the extension used for TypeScript in ReactJS?' : '';
    expect(questionText).toEqual('What is the extension used for TypeScript in ReactJS?');
    expect(wrapper.find('Pressable')).toBeTruthy();
  });
  it('updates score when correct answer is selected', function () {
    var setScore = jest.fn();
    wrapper.find(_reactNative.Pressable).at(0).props().onPress();
    wrapper.find(_reactNative.Button).at(0).props().onPress();
    expect(setScore).toHaveBeenCalledWith(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
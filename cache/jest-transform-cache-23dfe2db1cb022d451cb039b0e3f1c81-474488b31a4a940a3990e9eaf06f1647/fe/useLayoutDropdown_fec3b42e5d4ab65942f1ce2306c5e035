cbfe01887098bdaaa7f23369f2de40e6
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLayoutDropdown = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = require("react");
var _reactNative = require("react-native");
var _calculateDropdownHeight = require("../helpers/calculateDropdownHeight");
var _useKeyboardRemainingScreenHeight = require("./useKeyboardRemainingScreenHeight");
var _Dimensions$get = _reactNative.Dimensions.get('window'),
  height = _Dimensions$get.height;
var useLayoutDropdown = function useLayoutDropdown(data, dropdownStyle, rowStyle, search) {
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isVisible = _useState2[0],
    setIsVisible = _useState2[1];
  var _useState3 = (0, _react.useState)(null),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    buttonLayout = _useState4[0],
    setButtonLayout = _useState4[1];
  var _useState5 = (0, _react.useState)(0),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    dropdownPX = _useState6[0],
    setDropdownPX = _useState6[1];
  var _useState7 = (0, _react.useState)(0),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    dropdownPY = _useState8[0],
    setDropdownPY = _useState8[1];
  var _useState9 = (0, _react.useState)(function () {
      return (0, _calculateDropdownHeight.calculateDropdownHeight)(dropdownStyle, rowStyle, (data == null ? void 0 : data.length) || 0, search);
    }),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    dropdownHEIGHT = _useState10[0],
    setDropdownHEIGHT = _useState10[1];
  var _useState11 = (0, _react.useState)(0),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    dropdownWIDTH = _useState12[0],
    setDropdownWIDTH = _useState12[1];
  var remainigHeightAvoidKeyboard = (0, _useKeyboardRemainingScreenHeight.useKeyboardRemainingScreenHeight)();
  var safeDropdownViewUnderKeyboard = rowStyle && rowStyle.height ? rowStyle.height * 3 : 50 * 3;
  (0, _react.useEffect)(function () {
    setDropdownHEIGHT((0, _calculateDropdownHeight.calculateDropdownHeight)(dropdownStyle, rowStyle, (data == null ? void 0 : data.length) || 0, search));
  }, [dropdownStyle, rowStyle, data]);
  var onDropdownButtonLayout = function onDropdownButtonLayout(w, h, px, py) {
    setButtonLayout({
      w: w,
      h: h,
      px: px,
      py: py
    });
    if (height - 18 < py + h + dropdownHEIGHT) {
      setDropdownPX(px);
      setDropdownPY(py - 2 - dropdownHEIGHT);
    } else {
      setDropdownPX(px);
      setDropdownPY(py + h + 2);
    }
    setDropdownWIDTH((dropdownStyle == null ? void 0 : dropdownStyle.width) || w);
  };
  var getItemLayout = function getItemLayout(flatlistData, index) {
    return {
      index: index,
      length: (flatlistData == null ? void 0 : flatlistData.length) || 0,
      offset: rowStyle && rowStyle.height ? rowStyle.height * index : 50 * index
    };
  };
  var dropdownWindowStyle = (0, _react.useMemo)(function () {
    var top = remainigHeightAvoidKeyboard < dropdownPY + safeDropdownViewUnderKeyboard ? remainigHeightAvoidKeyboard - safeDropdownViewUnderKeyboard : dropdownPY;
    return Object.assign({}, {
      borderTopWidth: 0,
      overflow: 'hidden'
    }, dropdownStyle, {
      position: 'absolute',
      top: top,
      height: dropdownHEIGHT,
      width: dropdownWIDTH
    }, _reactNative.I18nManager.isRTL ? {
      right: (dropdownStyle == null ? void 0 : dropdownStyle.right) || dropdownPX
    } : {
      left: (dropdownStyle == null ? void 0 : dropdownStyle.left) || dropdownPX
    });
  }, [dropdownStyle, remainigHeightAvoidKeyboard, dropdownPX, dropdownPY, dropdownHEIGHT, dropdownWIDTH]);
  return {
    isVisible: isVisible,
    setIsVisible: setIsVisible,
    buttonLayout: buttonLayout,
    onDropdownButtonLayout: onDropdownButtonLayout,
    getItemLayout: getItemLayout,
    dropdownWindowStyle: dropdownWindowStyle
  };
};
exports.useLayoutDropdown = useLayoutDropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
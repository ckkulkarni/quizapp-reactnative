0430824bfb6a501f8eb2d4318191460f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _invariant = _interopRequireDefault(require("invariant"));
var _nativeComponents = require("./nativeComponents");
var _helpers = require("./helpers");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var Group = function (_React$Component) {
  (0, _inherits2.default)(Group, _React$Component);
  var _super = _createSuper(Group);
  function Group() {
    (0, _classCallCheck2.default)(this, Group);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(Group, [{
    key: "render",
    value: function render() {
      (0, _invariant.default)(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
      return (0, _jsxRuntime.jsx)(_nativeComponents.NativeGroup, {
        opacity: (0, _helpers.extractOpacity)(this.props),
        transform: (0, _helpers.extractTransform)(this.props),
        shadow: (0, _helpers.extractShadow)(this.props),
        children: this.props.children
      });
    }
  }]);
  return Group;
}(React.Component);
exports.default = Group;
Group.contextTypes = {
  isInSurface: _propTypes.default.bool.isRequired
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2ludmFyaWFudCIsIl9uYXRpdmVDb21wb25lbnRzIiwiX2hlbHBlcnMiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mMiIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwiR3JvdXAiLCJfUmVhY3QkQ29tcG9uZW50IiwiX2luaGVyaXRzMiIsIl9zdXBlciIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwidmFsdWUiLCJyZW5kZXIiLCJpbnZhcmlhbnQiLCJjb250ZXh0IiwiaXNJblN1cmZhY2UiLCJqc3giLCJOYXRpdmVHcm91cCIsIm9wYWNpdHkiLCJleHRyYWN0T3BhY2l0eSIsInByb3BzIiwidHJhbnNmb3JtIiwiZXh0cmFjdFRyYW5zZm9ybSIsInNoYWRvdyIsImV4dHJhY3RTaGFkb3ciLCJjaGlsZHJlbiIsIkNvbXBvbmVudCIsImV4cG9ydHMiLCJjb250ZXh0VHlwZXMiLCJQcm9wVHlwZXMiLCJib29sIiwiaXNSZXF1aXJlZCJdLCJzb3VyY2VzIjpbIkdyb3VwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHtOYXRpdmVHcm91cH0gZnJvbSAnLi9uYXRpdmVDb21wb25lbnRzJztcbmltcG9ydCB7ZXh0cmFjdE9wYWNpdHksIGV4dHJhY3RUcmFuc2Zvcm0sIGV4dHJhY3RTaGFkb3d9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgdHlwZSB7T3BhY2l0eVByb3BzLCBUcmFuc2Zvcm1Qcm9wcywgU2hhZG93UHJvcHN9IGZyb20gJy4vdHlwZXMnO1xuXG50eXBlIEdyb3VwUHJvcHMgPSBPcGFjaXR5UHJvcHMgJlxuICBTaGFkb3dQcm9wcyAmXG4gIFRyYW5zZm9ybVByb3BzICYge1xuICAgIGNoaWxkcmVuOiBSZWFjdC5Ob2RlLFxuICB9O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcm91cCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxHcm91cFByb3BzPiB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG4gICAgaXNJblN1cmZhY2U6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGludmFyaWFudChcbiAgICAgIHRoaXMuY29udGV4dC5pc0luU3VyZmFjZSxcbiAgICAgICdBUlQ6IDxHcm91cCAvPiBtdXN0IGJlIGEgY2hpbGQgb2YgYSA8U3VyZmFjZSAvPicsXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8TmF0aXZlR3JvdXBcbiAgICAgICAgb3BhY2l0eT17ZXh0cmFjdE9wYWNpdHkodGhpcy5wcm9wcyl9XG4gICAgICAgIHRyYW5zZm9ybT17ZXh0cmFjdFRyYW5zZm9ybSh0aGlzLnByb3BzKX1cbiAgICAgICAgc2hhZG93PXtleHRyYWN0U2hhZG93KHRoaXMucHJvcHMpfT5cbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICA8L05hdGl2ZUdyb3VwPlxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQVNBLElBQUFBLEtBQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFHLFVBQUEsR0FBQUQsc0JBQUEsQ0FBQUYsT0FBQTtBQUNBLElBQUFJLGlCQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxRQUFBLEdBQUFMLE9BQUE7QUFBMEUsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBQUEsU0FBQU8seUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFULHdCQUFBYSxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQSxTQUFBTSxNQUFBLFdBQUFDLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLEdBQUEsSUFBQVgsR0FBQSxRQUFBVyxHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFkLEdBQUEsRUFBQVcsR0FBQSxTQUFBSSxJQUFBLEdBQUFSLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQVYsR0FBQSxFQUFBVyxHQUFBLGNBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBVixHQUFBLElBQUFVLElBQUEsQ0FBQUMsR0FBQSxLQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUgsTUFBQSxFQUFBSyxHQUFBLEVBQUFJLElBQUEsWUFBQVQsTUFBQSxDQUFBSyxHQUFBLElBQUFYLEdBQUEsQ0FBQVcsR0FBQSxTQUFBTCxNQUFBLENBQUFKLE9BQUEsR0FBQUYsR0FBQSxNQUFBRyxLQUFBLElBQUFBLEtBQUEsQ0FBQWEsR0FBQSxDQUFBaEIsR0FBQSxFQUFBTSxNQUFBLFlBQUFBLE1BQUE7QUFBQSxTQUFBVyxhQUFBQyxPQUFBLFFBQUFDLHlCQUFBLEdBQUFDLHlCQUFBLG9CQUFBQyxxQkFBQSxRQUFBQyxLQUFBLE9BQUFDLGdCQUFBLENBQUFyQixPQUFBLEVBQUFnQixPQUFBLEdBQUFNLE1BQUEsTUFBQUwseUJBQUEsUUFBQU0sU0FBQSxPQUFBRixnQkFBQSxDQUFBckIsT0FBQSxRQUFBd0IsV0FBQSxFQUFBRixNQUFBLEdBQUFHLE9BQUEsQ0FBQUMsU0FBQSxDQUFBTixLQUFBLEVBQUFPLFNBQUEsRUFBQUosU0FBQSxZQUFBRCxNQUFBLEdBQUFGLEtBQUEsQ0FBQVEsS0FBQSxPQUFBRCxTQUFBLGdCQUFBRSwyQkFBQSxDQUFBN0IsT0FBQSxRQUFBc0IsTUFBQTtBQUFBLFNBQUFKLDBCQUFBLGVBQUFPLE9BQUEscUJBQUFBLE9BQUEsQ0FBQUMsU0FBQSxvQkFBQUQsT0FBQSxDQUFBQyxTQUFBLENBQUFJLElBQUEsMkJBQUFDLEtBQUEsb0NBQUFDLE9BQUEsQ0FBQXRCLFNBQUEsQ0FBQXVCLE9BQUEsQ0FBQXJCLElBQUEsQ0FBQWEsT0FBQSxDQUFBQyxTQUFBLENBQUFNLE9BQUEsOENBQUFFLENBQUE7QUFBQSxJQVNyREMsS0FBSyxhQUFBQyxnQkFBQTtFQUFBLElBQUFDLFVBQUEsQ0FBQXJDLE9BQUEsRUFBQW1DLEtBQUEsRUFBQUMsZ0JBQUE7RUFBQSxJQUFBRSxNQUFBLEdBQUF2QixZQUFBLENBQUFvQixLQUFBO0VBQUEsU0FBQUEsTUFBQTtJQUFBLElBQUFJLGdCQUFBLENBQUF2QyxPQUFBLFFBQUFtQyxLQUFBO0lBQUEsT0FBQUcsTUFBQSxDQUFBVixLQUFBLE9BQUFELFNBQUE7RUFBQTtFQUFBLElBQUFhLGFBQUEsQ0FBQXhDLE9BQUEsRUFBQW1DLEtBQUE7SUFBQTFCLEdBQUE7SUFBQWdDLEtBQUEsRUFLeEIsU0FBQUMsT0FBQSxFQUFTO01BQ1AsSUFBQUMsa0JBQVMsRUFDUCxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsV0FBVyxFQUN4QixpREFBaUQsQ0FDbEQ7TUFFRCxPQUNFLElBQUFyRCxXQUFBLENBQUFzRCxHQUFBLEVBQUN4RCxpQkFBQSxDQUFBeUQsV0FBVztRQUNWQyxPQUFPLEVBQUUsSUFBQUMsdUJBQWMsRUFBQyxJQUFJLENBQUNDLEtBQUssQ0FBRTtRQUNwQ0MsU0FBUyxFQUFFLElBQUFDLHlCQUFnQixFQUFDLElBQUksQ0FBQ0YsS0FBSyxDQUFFO1FBQ3hDRyxNQUFNLEVBQUUsSUFBQUMsc0JBQWEsRUFBQyxJQUFJLENBQUNKLEtBQUssQ0FBRTtRQUFBSyxRQUFBLEVBQ2pDLElBQUksQ0FBQ0wsS0FBSyxDQUFDSztNQUFRLEVBQ1I7SUFFbEI7RUFBQztFQUFBLE9BQUFwQixLQUFBO0FBQUEsRUFuQmdDbkQsS0FBSyxDQUFDd0UsU0FBUztBQUFBQyxPQUFBLENBQUF6RCxPQUFBLEdBQUFtQyxLQUFBO0FBQTdCQSxLQUFLLENBQ2pCdUIsWUFBWSxHQUFHO0VBQ3BCYixXQUFXLEVBQUVjLGtCQUFTLENBQUNDLElBQUksQ0FBQ0M7QUFDOUIsQ0FBQyJ9
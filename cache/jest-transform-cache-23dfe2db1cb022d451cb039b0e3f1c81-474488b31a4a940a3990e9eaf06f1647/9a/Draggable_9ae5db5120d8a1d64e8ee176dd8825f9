5688974e2addef91ea19da245a08818a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Draggable;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _jsxRuntime = require("react/jsx-runtime");
function clamp(number, min, max) {
  return Math.max(min, Math.min(number, max));
}
function Draggable(props) {
  var renderText = props.renderText,
    isCircle = props.isCircle,
    renderSize = props.renderSize,
    imageSource = props.imageSource,
    renderColor = props.renderColor,
    children = props.children,
    shouldReverse = props.shouldReverse,
    onReverse = props.onReverse,
    disabled = props.disabled,
    debug = props.debug,
    animatedViewProps = props.animatedViewProps,
    touchableOpacityProps = props.touchableOpacityProps,
    onDrag = props.onDrag,
    onShortPressRelease = props.onShortPressRelease,
    onDragRelease = props.onDragRelease,
    onLongPress = props.onLongPress,
    onPressIn = props.onPressIn,
    onPressOut = props.onPressOut,
    onRelease = props.onRelease,
    x = props.x,
    y = props.y,
    z = props.z,
    minX = props.minX,
    minY = props.minY,
    maxX = props.maxX,
    maxY = props.maxY;
  var pan = _react.default.useRef(new _reactNative.Animated.ValueXY());
  var offsetFromStart = _react.default.useRef({
    x: 0,
    y: 0
  });
  var childSize = _react.default.useRef({
    x: renderSize,
    y: renderSize
  });
  var startBounds = _react.default.useRef();
  var isDragging = _react.default.useRef(false);
  var getBounds = _react.default.useCallback(function () {
    var left = x + offsetFromStart.current.x;
    var top = y + offsetFromStart.current.y;
    return {
      left: left,
      top: top,
      right: left + childSize.current.x,
      bottom: top + childSize.current.y
    };
  }, [x, y]);
  var shouldStartDrag = _react.default.useCallback(function (gs) {
    return !disabled && (Math.abs(gs.dx) > 2 || Math.abs(gs.dy) > 2);
  }, [disabled]);
  var reversePosition = _react.default.useCallback(function () {
    var originalOffset = {
      x: 0,
      y: 0
    };
    var newOffset = onReverse ? onReverse() : originalOffset;
    _reactNative.Animated.spring(pan.current, {
      toValue: newOffset || originalOffset,
      useNativeDriver: false
    }).start();
  }, [pan]);
  var onPanResponderRelease = _react.default.useCallback(function (e, gestureState) {
    isDragging.current = false;
    if (onDragRelease) {
      onDragRelease(e, gestureState, getBounds());
      onRelease(e, true);
    }
    if (!shouldReverse) {
      pan.current.flattenOffset();
    } else {
      reversePosition();
    }
  }, [onDragRelease, shouldReverse, onRelease, reversePosition, getBounds]);
  var onPanResponderGrant = _react.default.useCallback(function (e, gestureState) {
    startBounds.current = getBounds();
    isDragging.current = true;
    if (!shouldReverse) {
      pan.current.setOffset(offsetFromStart.current);
      pan.current.setValue({
        x: 0,
        y: 0
      });
    }
  }, [getBounds, shouldReverse]);
  var handleOnDrag = _react.default.useCallback(function (e, gestureState) {
    var dx = gestureState.dx,
      dy = gestureState.dy;
    var _startBounds$current = startBounds.current,
      top = _startBounds$current.top,
      right = _startBounds$current.right,
      left = _startBounds$current.left,
      bottom = _startBounds$current.bottom;
    var far = 999999999;
    var changeX = clamp(dx, Number.isFinite(minX) ? minX - left : -far, Number.isFinite(maxX) ? maxX - right : far);
    var changeY = clamp(dy, Number.isFinite(minY) ? minY - top : -far, Number.isFinite(maxY) ? maxY - bottom : far);
    pan.current.setValue({
      x: changeX,
      y: changeY
    });
    onDrag(e, gestureState);
  }, [maxX, maxY, minX, minY, onDrag]);
  var panResponder = _react.default.useMemo(function () {
    return _reactNative.PanResponder.create({
      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(_, gestureState) {
        return shouldStartDrag(gestureState);
      },
      onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(_, gestureState) {
        return shouldStartDrag(gestureState);
      },
      onPanResponderGrant: onPanResponderGrant,
      onPanResponderMove: _reactNative.Animated.event([], {
        listener: handleOnDrag,
        useNativeDriver: false
      }),
      onPanResponderRelease: onPanResponderRelease
    });
  }, [handleOnDrag, onPanResponderGrant, onPanResponderRelease, shouldStartDrag]);
  _react.default.useEffect(function () {
    var curPan = pan.current;
    if (!shouldReverse) {
      curPan.addListener(function (c) {
        return offsetFromStart.current = c;
      });
    } else {
      reversePosition();
    }
    return function () {
      curPan.removeAllListeners();
    };
  }, [shouldReverse]);
  var positionCss = _react.default.useMemo(function () {
    var Window = _reactNative.Dimensions.get('window');
    return {
      position: 'absolute',
      top: 0,
      left: 0,
      width: Window.width,
      height: Window.height
    };
  }, []);
  var dragItemCss = _react.default.useMemo(function () {
    var style = {
      top: y,
      left: x,
      elevation: z,
      zIndex: z
    };
    if (renderColor) {
      style.backgroundColor = renderColor;
    }
    if (isCircle) {
      style.borderRadius = renderSize;
    }
    if (children) {
      return Object.assign({}, style, {
        alignSelf: 'baseline'
      });
    }
    return Object.assign({}, style, {
      justifyContent: 'center',
      width: renderSize,
      height: renderSize
    });
  }, [children, isCircle, renderColor, renderSize, x, y, z]);
  var touchableContent = _react.default.useMemo(function () {
    if (children) {
      return children;
    } else if (imageSource) {
      return (0, _jsxRuntime.jsx)(_reactNative.Image, {
        style: {
          width: renderSize,
          height: renderSize
        },
        source: imageSource
      });
    } else {
      return (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.text,
        children: renderText
      });
    }
  }, [children, imageSource, renderSize, renderText]);
  var handleOnLayout = _react.default.useCallback(function (event) {
    var _event$nativeEvent$la = event.nativeEvent.layout,
      height = _event$nativeEvent$la.height,
      width = _event$nativeEvent$la.width;
    childSize.current = {
      x: width,
      y: height
    };
  }, []);
  var handlePressOut = _react.default.useCallback(function (event) {
    onPressOut(event);
    if (!isDragging.current) {
      onRelease(event, false);
    }
  }, [onPressOut, onRelease]);
  var getDebugView = _react.default.useCallback(function () {
    var _Dimensions$get = _reactNative.Dimensions.get('window'),
      width = _Dimensions$get.width,
      height = _Dimensions$get.height;
    var far = 9999;
    var constrained = minX || maxX || minY || maxY;
    if (!constrained) {
      return null;
    }
    var left = minX || -far;
    var right = maxX ? width - maxX : -far;
    var top = minY || -far;
    var bottom = maxY ? height - maxY : -far;
    return (0, _jsxRuntime.jsx)(_reactNative.View, {
      pointerEvents: "box-none",
      style: Object.assign({
        left: left,
        right: right,
        top: top,
        bottom: bottom
      }, styles.debugView)
    });
  }, [maxX, maxY, minX, minY]);
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    pointerEvents: "box-none",
    style: positionCss,
    children: [debug && getDebugView(), (0, _jsxRuntime.jsx)(_reactNative.Animated.View, Object.assign({
      pointerEvents: "box-none"
    }, animatedViewProps, panResponder.panHandlers, {
      style: pan.current.getLayout(),
      children: (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, Object.assign({}, touchableOpacityProps, {
        onLayout: handleOnLayout,
        style: dragItemCss,
        disabled: disabled,
        onPress: onShortPressRelease,
        onLongPress: onLongPress,
        onPressIn: onPressIn,
        onPressOut: handlePressOut,
        children: touchableContent
      }))
    }))]
  });
}
Draggable.defaultProps = {
  renderText: 'ï¼‹',
  renderSize: 36,
  shouldReverse: false,
  disabled: false,
  debug: false,
  onDrag: function onDrag() {},
  onShortPressRelease: function onShortPressRelease() {},
  onDragRelease: function onDragRelease() {},
  onLongPress: function onLongPress() {},
  onPressIn: function onPressIn() {},
  onPressOut: function onPressOut() {},
  onRelease: function onRelease() {},
  x: 0,
  y: 0,
  z: 1
};
Draggable.propTypes = {
  renderText: _propTypes.default.string,
  isCircle: _propTypes.default.bool,
  renderSize: _propTypes.default.number,
  imageSource: _propTypes.default.number,
  renderColor: _propTypes.default.string,
  children: _propTypes.default.element,
  shouldReverse: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  debug: _propTypes.default.bool,
  animatedViewProps: _propTypes.default.object,
  touchableOpacityProps: _propTypes.default.object,
  onDrag: _propTypes.default.func,
  onShortPressRelease: _propTypes.default.func,
  onDragRelease: _propTypes.default.func,
  onLongPress: _propTypes.default.func,
  onPressIn: _propTypes.default.func,
  onPressOut: _propTypes.default.func,
  onRelease: _propTypes.default.func,
  onReverse: _propTypes.default.func,
  x: _propTypes.default.number,
  y: _propTypes.default.number,
  z: _propTypes.default.number,
  minX: _propTypes.default.number,
  minY: _propTypes.default.number,
  maxX: _propTypes.default.number,
  maxY: _propTypes.default.number
};
var styles = _reactNative.StyleSheet.create({
  text: {
    color: '#fff',
    textAlign: 'center'
  },
  test: {
    backgroundColor: 'red'
  },
  debugView: {
    backgroundColor: '#ff000044',
    position: 'absolute',
    borderColor: '#fced0ecc',
    borderWidth: 4
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
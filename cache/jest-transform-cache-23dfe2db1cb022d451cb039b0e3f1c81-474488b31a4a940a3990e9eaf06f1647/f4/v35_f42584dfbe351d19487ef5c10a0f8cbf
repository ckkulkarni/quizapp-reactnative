61a5242606b32de1f76a47ed4edf3e52
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.URL = exports.DNS = void 0;
exports.default = v35;
var _stringify = require("./stringify.js");
var _parse = _interopRequireDefault(require("./parse.js"));
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }
    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;
    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return (0, _stringify.unsafeStringify)(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {}
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfc3RyaW5naWZ5IiwicmVxdWlyZSIsIl9wYXJzZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJzdHJpbmdUb0J5dGVzIiwic3RyIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJieXRlcyIsImkiLCJsZW5ndGgiLCJwdXNoIiwiY2hhckNvZGVBdCIsIkROUyIsImV4cG9ydHMiLCJVUkwiLCJ2MzUiLCJuYW1lIiwidmVyc2lvbiIsImhhc2hmdW5jIiwiZ2VuZXJhdGVVVUlEIiwidmFsdWUiLCJuYW1lc3BhY2UiLCJidWYiLCJvZmZzZXQiLCJfbmFtZXNwYWNlIiwicGFyc2UiLCJUeXBlRXJyb3IiLCJVaW50OEFycmF5Iiwic2V0IiwidW5zYWZlU3RyaW5naWZ5IiwiZXJyIl0sInNvdXJjZXMiOlsidjM1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVuc2FmZVN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmltcG9ydCBwYXJzZSBmcm9tICcuL3BhcnNlLmpzJztcblxuZnVuY3Rpb24gc3RyaW5nVG9CeXRlcyhzdHIpIHtcbiAgc3RyID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpOyAvLyBVVEY4IGVzY2FwZVxuXG4gIGNvbnN0IGJ5dGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuXG4gIHJldHVybiBieXRlcztcbn1cblxuZXhwb3J0IGNvbnN0IEROUyA9ICc2YmE3YjgxMC05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0IGNvbnN0IFVSTCA9ICc2YmE3YjgxMS05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdjM1KG5hbWUsIHZlcnNpb24sIGhhc2hmdW5jKSB7XG4gIGZ1bmN0aW9uIGdlbmVyYXRlVVVJRCh2YWx1ZSwgbmFtZXNwYWNlLCBidWYsIG9mZnNldCkge1xuICAgIHZhciBfbmFtZXNwYWNlO1xuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nVG9CeXRlcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lc3BhY2UgPSBwYXJzZShuYW1lc3BhY2UpO1xuICAgIH1cblxuICAgIGlmICgoKF9uYW1lc3BhY2UgPSBuYW1lc3BhY2UpID09PSBudWxsIHx8IF9uYW1lc3BhY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9uYW1lc3BhY2UubGVuZ3RoKSAhPT0gMTYpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignTmFtZXNwYWNlIG11c3QgYmUgYXJyYXktbGlrZSAoMTYgaXRlcmFibGUgaW50ZWdlciB2YWx1ZXMsIDAtMjU1KScpO1xuICAgIH0gLy8gQ29tcHV0ZSBoYXNoIG9mIG5hbWVzcGFjZSBhbmQgdmFsdWUsIFBlciA0LjNcbiAgICAvLyBGdXR1cmU6IFVzZSBzcHJlYWQgc3ludGF4IHdoZW4gc3VwcG9ydGVkIG9uIGFsbCBwbGF0Zm9ybXMsIGUuZy4gYGJ5dGVzID1cbiAgICAvLyBoYXNoZnVuYyhbLi4ubmFtZXNwYWNlLCAuLi4gdmFsdWVdKWBcblxuXG4gICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMTYgKyB2YWx1ZS5sZW5ndGgpO1xuICAgIGJ5dGVzLnNldChuYW1lc3BhY2UpO1xuICAgIGJ5dGVzLnNldCh2YWx1ZSwgbmFtZXNwYWNlLmxlbmd0aCk7XG4gICAgYnl0ZXMgPSBoYXNoZnVuYyhieXRlcyk7XG4gICAgYnl0ZXNbNl0gPSBieXRlc1s2XSAmIDB4MGYgfCB2ZXJzaW9uO1xuICAgIGJ5dGVzWzhdID0gYnl0ZXNbOF0gJiAweDNmIHwgMHg4MDtcblxuICAgIGlmIChidWYpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgYnVmW29mZnNldCArIGldID0gYnl0ZXNbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBidWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuc2FmZVN0cmluZ2lmeShieXRlcyk7XG4gIH0gLy8gRnVuY3Rpb24jbmFtZSBpcyBub3Qgc2V0dGFibGUgb24gc29tZSBwbGF0Zm9ybXMgKCMyNzApXG5cblxuICB0cnkge1xuICAgIGdlbmVyYXRlVVVJRC5uYW1lID0gbmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gIH0gY2F0Y2ggKGVycikge30gLy8gRm9yIENvbW1vbkpTIGRlZmF1bHQgZXhwb3J0IHN1cHBvcnRcblxuXG4gIGdlbmVyYXRlVVVJRC5ETlMgPSBETlM7XG4gIGdlbmVyYXRlVVVJRC5VUkwgPSBVUkw7XG4gIHJldHVybiBnZW5lcmF0ZVVVSUQ7XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxVQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFFQSxTQUFTRyxhQUFhQSxDQUFDQyxHQUFHLEVBQUU7RUFDMUJBLEdBQUcsR0FBR0MsUUFBUSxDQUFDQyxrQkFBa0IsQ0FBQ0YsR0FBRyxDQUFDLENBQUM7RUFFdkMsSUFBTUcsS0FBSyxHQUFHLEVBQUU7RUFFaEIsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdKLEdBQUcsQ0FBQ0ssTUFBTSxFQUFFLEVBQUVELENBQUMsRUFBRTtJQUNuQ0QsS0FBSyxDQUFDRyxJQUFJLENBQUNOLEdBQUcsQ0FBQ08sVUFBVSxDQUFDSCxDQUFDLENBQUMsQ0FBQztFQUMvQjtFQUVBLE9BQU9ELEtBQUs7QUFDZDtBQUVPLElBQU1LLEdBQUcsR0FBRyxzQ0FBc0M7QUFBQ0MsT0FBQSxDQUFBRCxHQUFBLEdBQUFBLEdBQUE7QUFDbkQsSUFBTUUsR0FBRyxHQUFHLHNDQUFzQztBQUFDRCxPQUFBLENBQUFDLEdBQUEsR0FBQUEsR0FBQTtBQUMzQyxTQUFTQyxHQUFHQSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFO0VBQ25ELFNBQVNDLFlBQVlBLENBQUNDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRTtJQUNuRCxJQUFJQyxVQUFVO0lBRWQsSUFBSSxPQUFPSixLQUFLLEtBQUssUUFBUSxFQUFFO01BQzdCQSxLQUFLLEdBQUdqQixhQUFhLENBQUNpQixLQUFLLENBQUM7SUFDOUI7SUFFQSxJQUFJLE9BQU9DLFNBQVMsS0FBSyxRQUFRLEVBQUU7TUFDakNBLFNBQVMsR0FBRyxJQUFBSSxjQUFLLEVBQUNKLFNBQVMsQ0FBQztJQUM5QjtJQUVBLElBQUksQ0FBQyxDQUFDRyxVQUFVLEdBQUdILFNBQVMsTUFBTSxJQUFJLElBQUlHLFVBQVUsS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBR0EsVUFBVSxDQUFDZixNQUFNLE1BQU0sRUFBRSxFQUFFO01BQ3BHLE1BQU1pQixTQUFTLENBQUMsa0VBQWtFLENBQUM7SUFDckY7SUFLQSxJQUFJbkIsS0FBSyxHQUFHLElBQUlvQixVQUFVLENBQUMsRUFBRSxHQUFHUCxLQUFLLENBQUNYLE1BQU0sQ0FBQztJQUM3Q0YsS0FBSyxDQUFDcUIsR0FBRyxDQUFDUCxTQUFTLENBQUM7SUFDcEJkLEtBQUssQ0FBQ3FCLEdBQUcsQ0FBQ1IsS0FBSyxFQUFFQyxTQUFTLENBQUNaLE1BQU0sQ0FBQztJQUNsQ0YsS0FBSyxHQUFHVyxRQUFRLENBQUNYLEtBQUssQ0FBQztJQUN2QkEsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHVSxPQUFPO0lBQ3BDVixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUdBLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSTtJQUVqQyxJQUFJZSxHQUFHLEVBQUU7TUFDUEMsTUFBTSxHQUFHQSxNQUFNLElBQUksQ0FBQztNQUVwQixLQUFLLElBQUlmLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRUEsQ0FBQyxFQUFFO1FBQzNCYyxHQUFHLENBQUNDLE1BQU0sR0FBR2YsQ0FBQyxDQUFDLEdBQUdELEtBQUssQ0FBQ0MsQ0FBQyxDQUFDO01BQzVCO01BRUEsT0FBT2MsR0FBRztJQUNaO0lBRUEsT0FBTyxJQUFBTywwQkFBZSxFQUFDdEIsS0FBSyxDQUFDO0VBQy9CO0VBR0EsSUFBSTtJQUNGWSxZQUFZLENBQUNILElBQUksR0FBR0EsSUFBSTtFQUMxQixDQUFDLENBQUMsT0FBT2MsR0FBRyxFQUFFLENBQUM7RUFHZlgsWUFBWSxDQUFDUCxHQUFHLEdBQUdBLEdBQUc7RUFDdEJPLFlBQVksQ0FBQ0wsR0FBRyxHQUFHQSxHQUFHO0VBQ3RCLE9BQU9LLFlBQVk7QUFDckIifQ==
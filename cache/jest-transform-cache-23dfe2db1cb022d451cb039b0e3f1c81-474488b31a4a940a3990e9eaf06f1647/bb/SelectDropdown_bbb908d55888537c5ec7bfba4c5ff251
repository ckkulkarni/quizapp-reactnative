39b02e7fe61746c0c38464de8b697c45
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _styles = _interopRequireDefault(require("./styles"));
var _isExist = require("./helpers/isExist");
var _mergeStyles = require("./helpers/mergeStyles");
var _Input = _interopRequireDefault(require("./components/Input"));
var _DropdownOverlay = _interopRequireDefault(require("./components/DropdownOverlay"));
var _DropdownModal = _interopRequireDefault(require("./components/DropdownModal"));
var _DropdownWindow = _interopRequireDefault(require("./components/DropdownWindow"));
var _useSelectDropdown2 = require("./hooks/useSelectDropdown");
var _useLayoutDropdown2 = require("./hooks/useLayoutDropdown");
var _useRefs2 = require("./hooks/useRefs");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var SelectDropdown = function SelectDropdown(_ref, ref) {
  var data = _ref.data,
    onSelect = _ref.onSelect,
    defaultButtonText = _ref.defaultButtonText,
    buttonTextAfterSelection = _ref.buttonTextAfterSelection,
    rowTextForSelection = _ref.rowTextForSelection,
    defaultValue = _ref.defaultValue,
    defaultValueByIndex = _ref.defaultValueByIndex,
    disabled = _ref.disabled,
    disableAutoScroll = _ref.disableAutoScroll,
    disabledIndexs = _ref.disabledIndexs,
    onFocus = _ref.onFocus,
    onBlur = _ref.onBlur,
    onScrollEndReached = _ref.onScrollEndReached,
    buttonStyle = _ref.buttonStyle,
    buttonTextStyle = _ref.buttonTextStyle,
    renderCustomizedButtonChild = _ref.renderCustomizedButtonChild,
    renderDropdownIcon = _ref.renderDropdownIcon,
    dropdownIconPosition = _ref.dropdownIconPosition,
    statusBarTranslucent = _ref.statusBarTranslucent,
    dropdownStyle = _ref.dropdownStyle,
    dropdownOverlayColor = _ref.dropdownOverlayColor,
    rowStyle = _ref.rowStyle,
    rowTextStyle = _ref.rowTextStyle,
    selectedRowStyle = _ref.selectedRowStyle,
    selectedRowTextStyle = _ref.selectedRowTextStyle,
    renderCustomizedRowChild = _ref.renderCustomizedRowChild,
    search = _ref.search,
    searchInputStyle = _ref.searchInputStyle,
    searchInputTxtColor = _ref.searchInputTxtColor,
    searchInputTxtStyle = _ref.searchInputTxtStyle,
    searchPlaceHolder = _ref.searchPlaceHolder,
    searchPlaceHolderColor = _ref.searchPlaceHolderColor,
    renderSearchInputLeftIcon = _ref.renderSearchInputLeftIcon,
    renderSearchInputRightIcon = _ref.renderSearchInputRightIcon,
    onChangeSearchInputText = _ref.onChangeSearchInputText;
  var disabledInternalSearch = !!onChangeSearchInputText;
  var _useRefs = (0, _useRefs2.useRefs)(),
    dropdownButtonRef = _useRefs.dropdownButtonRef,
    dropDownFlatlistRef = _useRefs.dropDownFlatlistRef;
  var _useSelectDropdown = (0, _useSelectDropdown2.useSelectDropdown)(data, defaultValueByIndex, defaultValue, disabledInternalSearch),
    dataArr = _useSelectDropdown.dataArr,
    selectedItem = _useSelectDropdown.selectedItem,
    selectedIndex = _useSelectDropdown.selectedIndex,
    selectItem = _useSelectDropdown.selectItem,
    _reset = _useSelectDropdown.reset,
    searchTxt = _useSelectDropdown.searchTxt,
    setSearchTxt = _useSelectDropdown.setSearchTxt;
  var _useLayoutDropdown = (0, _useLayoutDropdown2.useLayoutDropdown)(data, dropdownStyle, rowStyle, search),
    isVisible = _useLayoutDropdown.isVisible,
    setIsVisible = _useLayoutDropdown.setIsVisible,
    buttonLayout = _useLayoutDropdown.buttonLayout,
    onDropdownButtonLayout = _useLayoutDropdown.onDropdownButtonLayout,
    getItemLayout = _useLayoutDropdown.getItemLayout,
    dropdownWindowStyle = _useLayoutDropdown.dropdownWindowStyle;
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      reset: function reset() {
        _reset();
      },
      openDropdown: function openDropdown() {
        _openDropdown();
      },
      closeDropdown: function closeDropdown() {
        _closeDropdown();
      },
      selectIndex: function selectIndex(index) {
        selectItem(index);
      }
    };
  });
  var _openDropdown = function _openDropdown() {
    dropdownButtonRef.current.measure(function (fx, fy, w, h, px, py) {
      onDropdownButtonLayout(w, h, px, py);
      setIsVisible(true);
      onFocus && onFocus();
    });
  };
  var _closeDropdown = function _closeDropdown() {
    setIsVisible(false);
    setSearchTxt('');
    onBlur && onBlur();
  };
  var onLayout = function onLayout() {
    if (disableAutoScroll) {
      return;
    }
    if (selectedIndex >= 3 && dropDownFlatlistRef) {
      dropDownFlatlistRef.current.scrollToOffset({
        offset: rowStyle && rowStyle.height ? rowStyle.height * selectedIndex : 50 * selectedIndex,
        animated: true
      });
    }
  };
  var onSelectItem = function onSelectItem(item, index) {
    _closeDropdown();
    onSelect && onSelect(item, index);
    selectItem(index);
  };
  var renderSearchView = function renderSearchView() {
    return search && (0, _jsxRuntime.jsx)(_Input.default, {
      searchViewWidth: buttonLayout.w,
      value: searchTxt,
      valueColor: searchInputTxtColor,
      placeholder: searchPlaceHolder,
      placeholderTextColor: searchPlaceHolderColor,
      onChangeText: function onChangeText(txt) {
        setSearchTxt(txt);
        disabledInternalSearch && onChangeSearchInputText(txt);
      },
      inputStyle: searchInputStyle,
      inputTextStyle: searchInputTxtStyle,
      renderLeft: renderSearchInputLeftIcon,
      renderRight: renderSearchInputRightIcon
    });
  };
  var renderFlatlistItem = function renderFlatlistItem(_ref2) {
    var item = _ref2.item,
      index = _ref2.index;
    var isSelected = index == selectedIndex;
    return (0, _isExist.isExist)(item) && (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      disabled: disabledIndexs == null ? void 0 : disabledIndexs.includes(index),
      activeOpacity: 0.8,
      style: (0, _mergeStyles.mergeStyles)(_styles.default.dropdownRow, rowStyle, isSelected && selectedRowStyle),
      onPress: function onPress() {
        return onSelectItem(item, index);
      },
      children: renderCustomizedRowChild ? (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: _styles.default.dropdownCustomizedRowParent,
        children: renderCustomizedRowChild(item, index, isSelected)
      }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
        numberOfLines: 1,
        allowFontScaling: false,
        style: (0, _mergeStyles.mergeStyles)(_styles.default.dropdownRowText, rowTextStyle, isSelected && selectedRowTextStyle),
        children: rowTextForSelection ? rowTextForSelection(item, index) : item.toString()
      })
    });
  };
  var renderDropdown = function renderDropdown() {
    return isVisible && (0, _jsxRuntime.jsxs)(_DropdownModal.default, {
      statusBarTranslucent: statusBarTranslucent,
      visible: isVisible,
      children: [(0, _jsxRuntime.jsx)(_DropdownOverlay.default, {
        onPress: _closeDropdown,
        backgroundColor: dropdownOverlayColor
      }), (0, _jsxRuntime.jsx)(_DropdownWindow.default, {
        layoutStyle: dropdownWindowStyle,
        children: (0, _jsxRuntime.jsx)(_reactNative.FlatList, {
          data: dataArr,
          keyExtractor: function keyExtractor(item, index) {
            return index.toString();
          },
          ref: dropDownFlatlistRef,
          renderItem: renderFlatlistItem,
          getItemLayout: getItemLayout,
          onLayout: onLayout,
          ListHeaderComponent: renderSearchView(),
          stickyHeaderIndices: search && [0],
          keyboardShouldPersistTaps: "always",
          onEndReached: function onEndReached() {
            return onScrollEndReached && onScrollEndReached();
          },
          onEndReachedThreshold: 0.5
        })
      })]
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
    activeOpacity: 0.8,
    ref: dropdownButtonRef,
    disabled: disabled,
    onPress: _openDropdown,
    style: (0, _mergeStyles.mergeStyles)(_styles.default.dropdownButton, dropdownIconPosition == 'left' ? _styles.default.row : _styles.default.rowRevese, buttonStyle),
    children: [renderDropdown(), renderDropdownIcon && renderDropdownIcon(isVisible), renderCustomizedButtonChild ? (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: _styles.default.dropdownCustomizedButtonParent,
      children: renderCustomizedButtonChild(selectedItem, selectedIndex)
    }) : (0, _jsxRuntime.jsx)(_reactNative.Text, {
      numberOfLines: 1,
      allowFontScaling: false,
      style: (0, _mergeStyles.mergeStyles)(_styles.default.dropdownButtonText, buttonTextStyle),
      children: (0, _isExist.isExist)(selectedItem) ? buttonTextAfterSelection ? buttonTextAfterSelection(selectedItem, selectedIndex) : selectedItem.toString() : defaultButtonText || 'Select an option.'
    })]
  });
};
var _default = (0, _react.forwardRef)(function (props, ref) {
  return SelectDropdown(props, ref);
});
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
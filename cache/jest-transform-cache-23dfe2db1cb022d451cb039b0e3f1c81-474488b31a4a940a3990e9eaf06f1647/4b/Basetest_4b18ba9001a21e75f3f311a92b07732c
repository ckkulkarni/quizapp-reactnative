417182268c92fe1ab40e7bf0cb65c09d
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Base = _interopRequireDefault(require("../Base"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _reactNative = require("react-native");
var _QuizContext = require("./../QuizContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('should render a form with three text inputs, two selections, and one submit', function () {
  var wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Base.default, {}));
  it('component renders correctly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('input state should update when textinput is modified', function () {
    var nameInput = wrapper.find(_reactNative.TextInput).at(0);
    nameInput.simulate('changeText', 'Chandrakanth');
    expect(wrapper.find(_QuizContext.QuizContext).prop('value').name).toEqual('Chandrakanth');
  });
  it('should enable the submit when all the inputs are entered', function () {
    var nameInput = wrapper.find(_reactNative.TextInput).at(0);
    var emailInput = wrapper.find(_reactNative.TextInput).at(1);
    var phoneInput = wrapper.find(_reactNative.TextInput).at(2);
    nameInput.simulate('changeText', 'Chandrakanth');
    emailInput.simulate('changeText', 'chandu@cc.com');
    phoneInput.simulate('changeText', '0909090909');
    expect(wrapper.find(_reactNative.Button).at(0).prop('disabled')).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9CYXNlIiwiX2VuenltZUFkYXB0ZXJSZWFjdCIsImVuenltZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX25hdGl2ZSIsIl9yZWFjdE5hdGl2ZSIsIl9RdWl6Q29udGV4dCIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9yZXF1aXJlIiwiY29uZmlndXJlIiwiYWRhcHRlciIsIkFkYXB0ZXIiLCJuYXZpZ2F0aW9uIiwiZGVzY3JpYmUiLCJ3cmFwcGVyIiwic2hhbGxvdyIsImpzeCIsIml0IiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90IiwibmFtZUlucHV0IiwiZmluZCIsIlRleHRJbnB1dCIsImF0Iiwic2ltdWxhdGUiLCJRdWl6Q29udGV4dCIsInByb3AiLCJuYW1lIiwidG9FcXVhbCIsImVtYWlsSW5wdXQiLCJwaG9uZUlucHV0IiwiQnV0dG9uIiwidG9CZSJdLCJzb3VyY2VzIjpbIkJhc2UudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2UgZnJvbSAnLi4vQmFzZSc7XHJcbmltcG9ydCBBZGFwdGVyIGZyb20gJ2VuenltZS1hZGFwdGVyLXJlYWN0LTE2JztcclxuaW1wb3J0IHttb3VudCwgc2hhbGxvd30gZnJvbSAnZW56eW1lJztcclxuaW1wb3J0ICogYXMgZW56eW1lIGZyb20gJ2VuenltZSc7XHJcbmltcG9ydCB7dXNlTmF2aWdhdGlvbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2svbGliL3R5cGVzY3JpcHQvc3JjL3R5cGVzJztcclxuaW1wb3J0IHtUZXh0SW5wdXQsIEJ1dHRvbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHtRdWl6Q29udGV4dH0gZnJvbSAnLi8uLi9RdWl6Q29udGV4dCc7XHJcbmVuenltZS5jb25maWd1cmUoe2FkYXB0ZXI6IG5ldyBBZGFwdGVyKCl9KTtcclxuY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb248TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcDxhbnk+PigpO1xyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdzaG91bGQgcmVuZGVyIGEgZm9ybSB3aXRoIHRocmVlIHRleHQgaW5wdXRzLCB0d28gc2VsZWN0aW9ucywgYW5kIG9uZSBzdWJtaXQnLCAoKSA9PiB7XHJcbiAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPEJhc2UgLz4pO1xyXG4gIGl0KCdjb21wb25lbnQgcmVuZGVycyBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICBleHBlY3Qod3JhcHBlcikudG9NYXRjaFNuYXBzaG90KCk7XHJcbiAgfSk7XHJcbiAgaXQoJ2lucHV0IHN0YXRlIHNob3VsZCB1cGRhdGUgd2hlbiB0ZXh0aW5wdXQgaXMgbW9kaWZpZWQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBuYW1lSW5wdXQgPSB3cmFwcGVyLmZpbmQoVGV4dElucHV0KS5hdCgwKTtcclxuICAgIG5hbWVJbnB1dC5zaW11bGF0ZSgnY2hhbmdlVGV4dCcsICdDaGFuZHJha2FudGgnKTtcclxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoUXVpekNvbnRleHQpLnByb3AoJ3ZhbHVlJykubmFtZSkudG9FcXVhbChcclxuICAgICAgJ0NoYW5kcmFrYW50aCcsXHJcbiAgICApO1xyXG4gIH0pO1xyXG4gIGl0KCdzaG91bGQgZW5hYmxlIHRoZSBzdWJtaXQgd2hlbiBhbGwgdGhlIGlucHV0cyBhcmUgZW50ZXJlZCcsICgpID0+IHtcclxuICAgIGNvbnN0IG5hbWVJbnB1dCA9IHdyYXBwZXIuZmluZChUZXh0SW5wdXQpLmF0KDApO1xyXG4gICAgY29uc3QgZW1haWxJbnB1dCA9IHdyYXBwZXIuZmluZChUZXh0SW5wdXQpLmF0KDEpO1xyXG4gICAgY29uc3QgcGhvbmVJbnB1dCA9IHdyYXBwZXIuZmluZChUZXh0SW5wdXQpLmF0KDIpO1xyXG5cclxuICAgIG5hbWVJbnB1dC5zaW11bGF0ZSgnY2hhbmdlVGV4dCcsICdDaGFuZHJha2FudGgnKTtcclxuICAgIGVtYWlsSW5wdXQuc2ltdWxhdGUoJ2NoYW5nZVRleHQnLCAnY2hhbmR1QGNjLmNvbScpO1xyXG4gICAgcGhvbmVJbnB1dC5zaW11bGF0ZSgnY2hhbmdlVGV4dCcsICcwOTA5MDkwOTA5Jyk7XHJcblxyXG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZChCdXR0b24pLmF0KDApLnByb3AoJ2Rpc2FibGVkJykpLnRvQmUoZmFsc2UpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFVQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLEVB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
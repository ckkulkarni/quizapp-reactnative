43fcf2c69ffa711da56e723827abb3dd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var React = _interopRequireWildcard(require("react"));
var _helpers = require("./helpers");
var _nativeComponents = require("./nativeComponents");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["x", "y"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var ClippingRectangle = function (_React$Component) {
  (0, _inherits2.default)(ClippingRectangle, _React$Component);
  var _super = _createSuper(ClippingRectangle);
  function ClippingRectangle() {
    (0, _classCallCheck2.default)(this, ClippingRectangle);
    return _super.apply(this, arguments);
  }
  (0, _createClass2.default)(ClippingRectangle, [{
    key: "render",
    value: function render() {
      var clipping = [this.props.x, this.props.y, this.props.width, this.props.height];
      var _this$props = this.props,
        x = _this$props.x,
        y = _this$props.y,
        propsExcludingXAndY = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      return (0, _jsxRuntime.jsx)(_nativeComponents.NativeGroup, {
        clipping: clipping,
        opacity: (0, _helpers.extractOpacity)(this.props),
        transform: (0, _helpers.extractTransform)(propsExcludingXAndY),
        shadow: (0, _helpers.extractShadow)(this.props),
        children: this.props.children
      });
    }
  }]);
  return ClippingRectangle;
}(React.Component);
exports.default = ClippingRectangle;
ClippingRectangle.defaultProps = {
  x: 0,
  y: 0,
  width: 0,
  height: 0
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9oZWxwZXJzIiwiX25hdGl2ZUNvbXBvbmVudHMiLCJfanN4UnVudGltZSIsIl9leGNsdWRlZCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mMiIsInJlc3VsdCIsIk5ld1RhcmdldCIsImNvbnN0cnVjdG9yIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwiQ2xpcHBpbmdSZWN0YW5nbGUiLCJfUmVhY3QkQ29tcG9uZW50IiwiX2luaGVyaXRzMiIsIl9zdXBlciIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwidmFsdWUiLCJyZW5kZXIiLCJjbGlwcGluZyIsInByb3BzIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsIl90aGlzJHByb3BzIiwicHJvcHNFeGNsdWRpbmdYQW5kWSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJqc3giLCJOYXRpdmVHcm91cCIsIm9wYWNpdHkiLCJleHRyYWN0T3BhY2l0eSIsInRyYW5zZm9ybSIsImV4dHJhY3RUcmFuc2Zvcm0iLCJzaGFkb3ciLCJleHRyYWN0U2hhZG93IiwiY2hpbGRyZW4iLCJDb21wb25lbnQiLCJleHBvcnRzIiwiZGVmYXVsdFByb3BzIl0sInNvdXJjZXMiOlsiQ2xpcHBpbmdSZWN0YW5nbGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7ZXh0cmFjdE9wYWNpdHksIGV4dHJhY3RUcmFuc2Zvcm0sIGV4dHJhY3RTaGFkb3d9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQge05hdGl2ZUdyb3VwfSBmcm9tICcuL25hdGl2ZUNvbXBvbmVudHMnO1xuaW1wb3J0IHR5cGUge09wYWNpdHlQcm9wcywgVHJhbnNmb3JtUHJvcHMsIFNoYWRvd1Byb3BzfSBmcm9tICcuL3R5cGVzJztcblxudHlwZSBDbGlwcGluZ1JlY3RhbmdsZVByb3BzID0gT3BhY2l0eVByb3BzICZcbiAgVHJhbnNmb3JtUHJvcHMgJlxuICBTaGFkb3dQcm9wcyAmIHtcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgY2hpbGRyZW4/OiBSZWFjdC5Ob2RlLFxuICB9O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbGlwcGluZ1JlY3RhbmdsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxDbGlwcGluZ1JlY3RhbmdsZVByb3BzPiB7XG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgY2xpcHBpbmcgPSBbXG4gICAgICB0aGlzLnByb3BzLngsXG4gICAgICB0aGlzLnByb3BzLnksXG4gICAgICB0aGlzLnByb3BzLndpZHRoLFxuICAgICAgdGhpcy5wcm9wcy5oZWlnaHQsXG4gICAgXTtcblxuICAgIC8vIFRoZSBjdXJyZW50IGNsaXBwaW5nIEFQSSByZXF1aXJlcyB4IGFuZCB5IHRvIGJlIGlnbm9yZWQgaW4gdGhlIHRyYW5zZm9ybVxuICAgIC8vICRGbG93Rml4TWVcbiAgICBjb25zdCB7eCwgeSwgLi4ucHJvcHNFeGNsdWRpbmdYQW5kWX0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxOYXRpdmVHcm91cFxuICAgICAgICBjbGlwcGluZz17Y2xpcHBpbmd9XG4gICAgICAgIG9wYWNpdHk9e2V4dHJhY3RPcGFjaXR5KHRoaXMucHJvcHMpfVxuICAgICAgICB0cmFuc2Zvcm09e2V4dHJhY3RUcmFuc2Zvcm0ocHJvcHNFeGNsdWRpbmdYQW5kWSl9XG4gICAgICAgIHNoYWRvdz17ZXh0cmFjdFNoYWRvdyh0aGlzLnByb3BzKX0+XG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgPC9OYXRpdmVHcm91cD5cbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBU0EsSUFBQUEsS0FBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsaUJBQUEsR0FBQUYsT0FBQTtBQUErQyxJQUFBRyxXQUFBLEdBQUFILE9BQUE7QUFBQSxJQUFBSSxTQUFBO0FBQUEsU0FBQUMseUJBQUFDLFdBQUEsZUFBQUMsT0FB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
201e69a6968895edb3cb9a5b2b3d119c
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
require("react-native-get-random-values");
var _uuid = require("uuid");
var _jestCucumber = require("jest-cucumber");
var _QuizContext = require("./../../Apps/QuizContext");
var _native = require("@react-navigation/native");
var _SubmitScreen = _interopRequireDefault(require("./../../Apps/SubmitScreen"));
var _reactNativePieChart = _interopRequireDefault(require("react-native-pie-chart"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var uuid = (0, _uuid.v4)();
var navigation = (0, _native.useNavigation)();
var feature = (0, _jestCucumber.loadFeature)('./features/submitscreen.feature');
(0, _jestCucumber.defineFeature)(feature, function (test) {
  var mockQuizContext = {
    score: 7,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@chandu.com',
    setMail: jest.fn(),
    phone: '1234567890',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  test('User submits their quiz and sees their results', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    given('the user has completed the quiz is on the Submit Screen', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_SubmitScreen.default, {})
        }));
        expect(screen.getByTestId('scoreContainer')).toBeDefined();
      });
    }));
    then('the user should see the details they entered in the home screen', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_SubmitScreen.default, {})
        }));
        expect(screen.getByTestId('score').props.children[1]).toBe(7);
        expect(screen.getByTestId('selectedStream').props.children[1]).toBe('ReactJS');
        expect(screen.getByTestId('name').props.children[1]).toBe('chandu');
        expect(screen.getByTestId('mail').props.children[1]).toBe('chandra@chandu.com');
        expect(screen.getByTestId('phoneNo').props.children[1]).toBe('1234567890');
      });
    }));
    then('the user should see their score in a pie chart', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_SubmitScreen.default, {})
        }));
        var chartData = [2, 7];
        var chartColors = ['#A20021', '#B0FF92'];
        var pieChart = screen.UNSAFE_getByType(_reactNativePieChart.default);
        expect(pieChart.props.widthAndHeight).toEqual(200);
        expect(pieChart.props.series).toEqual(chartData);
        expect(pieChart.props.sliceColor).toEqual(chartColors);
      });
    }));
    and('the user should see a button to re-enter their details', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_SubmitScreen.default, {})
        }));
        _reactNative.fireEvent.press(screen.getByTestId('restartQuiz'));
        expect(mockQuizContext.setScore).toBeCalledWith(0);
        expect(navigation.navigate).toBeCalledWith('Home');
      });
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
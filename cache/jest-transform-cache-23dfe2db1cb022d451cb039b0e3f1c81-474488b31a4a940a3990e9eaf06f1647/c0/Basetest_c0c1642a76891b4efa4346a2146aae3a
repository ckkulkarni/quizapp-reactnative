5b150f159539cbc4abb83d4f8a1c26df
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Base = _interopRequireDefault(require("../Base"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _reactNative = require("react-native");
var _QuizContext = require("./../QuizContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('should render a form with three text inputs, two selections, and one submit', function () {
  var wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Base.default, {}));
  it('component renders correctly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('input state should update when textinput is modified', function () {
    var wrapper = (0, enzyme.mount)((0, _jsxRuntime.jsx)(_Base.default, {}));
    var nameInput = wrapper.find(_reactNative.TextInput).at(0);
    nameInput.simulate('changeText', 'Chandrakanth');
    expect(wrapper.find(_QuizContext.QuizContext).prop('name')).toEqual('Chandrakanth');
  });
  it('should enable the submit when all the inputs are entered', function () {
    var nameInput = wrapper.find(_reactNative.TextInput).at(0);
    var emailInput = wrapper.find(_reactNative.TextInput).at(1);
    var phoneInput = wrapper.find(_reactNative.TextInput).at(2);
    nameInput.simulate('changeText', 'Chandrakanth');
    emailInput.simulate('changeText', 'chandu@cc.com');
    phoneInput.simulate('changeText', '0909090909');
    expect(wrapper.find(_reactNative.Button).at(0).prop('disabled')).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9CYXNlIiwiX2VuenltZUFkYXB0ZXJSZWFjdCIsImVuenltZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX25hdGl2ZSIsIl9yZWFjdE5hdGl2ZSIsIl9RdWl6Q29udGV4dCIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9yZXF1aXJlIiwiY29uZmlndXJlIiwiYWRhcHRlciIsIkFkYXB0ZXIiLCJuYXZpZ2F0aW9uIiwiZGVzY3JpYmUiLCJ3cmFwcGVyIiwic2hhbGxvdyIsImpzeCIsIml0IiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90IiwibW91bnQiLCJuYW1lSW5wdXQiLCJmaW5kIiwiVGV4dElucHV0IiwiYXQiLCJzaW11bGF0ZSIsIlF1aXpDb250ZXh0IiwicHJvcCIsInRvRXF1YWwiLCJlbWFpbElucHV0IiwicGhvbmVJbnB1dCIsIkJ1dHRvbiIsInRvQmUiXSwic291cmNlcyI6WyJCYXNlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlIGZyb20gJy4uL0Jhc2UnO1xyXG5pbXBvcnQgQWRhcHRlciBmcm9tICdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNic7XHJcbmltcG9ydCB7bW91bnQsIHNoYWxsb3d9IGZyb20gJ2VuenltZSc7XHJcbmltcG9ydCAqIGFzIGVuenltZSBmcm9tICdlbnp5bWUnO1xyXG5pbXBvcnQge3VzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrL2xpYi90eXBlc2NyaXB0L3NyYy90eXBlcyc7XHJcbmltcG9ydCB7VGV4dElucHV0LCBCdXR0b259IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7UXVpekNvbnRleHR9IGZyb20gJy4vLi4vUXVpekNvbnRleHQnO1xyXG5lbnp5bWUuY29uZmlndXJlKHthZGFwdGVyOiBuZXcgQWRhcHRlcigpfSk7XHJcbmNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnc2hvdWxkIHJlbmRlciBhIGZvcm0gd2l0aCB0aHJlZSB0ZXh0IGlucHV0cywgdHdvIHNlbGVjdGlvbnMsIGFuZCBvbmUgc3VibWl0JywgKCkgPT4ge1xyXG4gIGNvbnN0IHdyYXBwZXIgPSBzaGFsbG93KDxCYXNlIC8+KTtcclxuICBpdCgnY29tcG9uZW50IHJlbmRlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHdyYXBwZXIpLnRvTWF0Y2hTbmFwc2hvdCgpO1xyXG4gIH0pO1xyXG4gIGl0KCdpbnB1dCBzdGF0ZSBzaG91bGQgdXBkYXRlIHdoZW4gdGV4dGlucHV0IGlzIG1vZGlmaWVkJywgKCkgPT4ge1xyXG4gICAgY29uc3Qgd3JhcHBlciA9IG1vdW50KDxCYXNlIC8+KTtcclxuICAgIGNvbnN0IG5hbWVJbnB1dCA9IHdyYXBwZXIuZmluZChUZXh0SW5wdXQpLmF0KDApO1xyXG4gICAgbmFtZUlucHV0LnNpbXVsYXRlKCdjaGFuZ2VUZXh0JywgJ0NoYW5kcmFrYW50aCcpO1xyXG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZChRdWl6Q29udGV4dCkucHJvcCgnbmFtZScpKS50b0VxdWFsKCdDaGFuZHJha2FudGgnKTtcclxuICB9KTtcclxuICBpdCgnc2hvdWxkIGVuYWJsZSB0aGUgc3VibWl0IHdoZW4gYWxsIHRoZSBpbnB1dHMgYXJlIGVudGVyZWQnLCAoKSA9PiB7XHJcbiAgICBjb25zdCBuYW1lSW5wdXQgPSB3cmFwcGVyLmZpbmQoVGV4dElucHV0KS5hdCgwKTtcclxuICAgIGNvbnN0IGVtYWlsSW5wdXQgPSB3cmFwcGVyLmZpbmQoVGV4dElucHV0KS5hdCgxKTtcclxuICAgIGNvbnN0IHBob25lSW5wdXQgPSB3cmFwcGVyLmZpbmQoVGV4dElucHV0KS5hdCgyKTtcclxuXHJcbiAgICBuYW1lSW5wdXQuc2ltdWxhdGUoJ2NoYW5nZVRleHQnLCAnQ2hhbmRyYWthbnRoJyk7XHJcbiAgICBlbWFpbElucHV0LnNpbXVsYXRlKCdjaGFuZ2VUZXh0JywgJ2NoYW5kdUBjYy5jb20nKTtcclxuICAgIHBob25lSW5wdXQuc2ltdWxhdGUoJ2NoYW5nZVRleHQnLCAnMDkwOTA5MDkwOScpO1xyXG5cclxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoQnV0dG9uKS5hdCgwKS5wcm9wKCdkaXNhYmxlZCcpKS50b0JlKGZhbHNlKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBVUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQU07RUFDMUMsT0FBTztJQUNMQyxhQUFhLEVBQUVDLElB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
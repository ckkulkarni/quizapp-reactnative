0456c4ddc2e2b4c3ccc0e4bad679a5f3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Question5;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _QuizContext = require("./QuizContext");
var _reactNativeDraggable = _interopRequireDefault(require("react-native-draggable"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
if (_reactNative.Platform.OS === 'android' && _reactNative.UIManager.setLayoutAnimationEnabledExperimental) {
  _reactNative.UIManager.setLayoutAnimationEnabledExperimental(true);
}
function Question5() {
  var navigation = (0, _native.useNavigation)();
  var _useContext = (0, _react.useContext)(_QuizContext.QuizContext),
    score = _useContext.score,
    trackScore = _useContext.trackScore,
    setScore = _useContext.setScore,
    selectedValue = _useContext.selectedValue;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selectedAnswer = _useState2[0],
    setSelectedAnswer = _useState2[1];
  var maxScore = 9;
  var questionPositions = [];
  if (selectedValue === 'ReactJS' || selectedValue === 'Java') {
    questionPositions = [350, 410, 450, 500, 650];
  } else if (selectedValue === 'React Native') {
    questionPositions = [360, 440, 515, 570, 650];
  } else if (selectedValue === 'JavaScript') {
    questionPositions = [350, 410, 450, 500, 650];
  }
  var _useState3 = (0, _react.useState)(function () {
      if (selectedValue === 'ReactJS') {
        return ['_ is used to avoid prop-drilling.', 'ReactJS is a _ of Javascript.', '_ are created using ReactJS.', '_ is a third party ReactJS library called that is used to make API calls.', 'ReactJS uses _ DOM.'];
      } else if (selectedValue === 'React Native') {
        return ['React Native is primarily used to make _ applications.', '_ CLI is the other option to make React Native Applications.', 'A popular option to navigate between the screens is _', "React Native CLI's Android testing is done on _ primarily.", 'Aside from React Native we can also use _ for mobile app development.'];
      } else if (selectedValue === 'JavaScript') {
        return ['Javascript is an _ language', 'var and _ are the keywords used to define a variable in Javascript', '_ can be used to access HTML elements using Javascript.', '_ can be used to display data in some form using Javascript.', 'What keyword is used to check whether a given property is valid or not? _'];
      } else if (selectedValue === 'Java') {
        return ['JVM stands for _', 'Number of primitive data types in Java are _', 'An Array is an _ in Java', 'toString() is defined in _.', "'_' keyword cannot be used for constructor."];
      } else {
        return [];
      }
    }),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    questions = _useState4[0],
    setQuestions = _useState4[1];
  var _useState5 = (0, _react.useState)(function () {
      if (selectedValue === 'ReactJS') {
        return [{
          id: 1,
          text: 'Library'
        }, {
          id: 2,
          text: 'Virtual'
        }, {
          id: 3,
          text: 'Axios'
        }, {
          id: 4,
          text: 'User Interfaces'
        }, {
          id: 5,
          text: 'Context API'
        }];
      } else if (selectedValue === 'React Native') {
        return [{
          id: 1,
          text: 'React Native Navigate'
        }, {
          id: 2,
          text: 'Flutter'
        }, {
          id: 3,
          text: 'Mobile'
        }, {
          id: 4,
          text: 'Android Studio'
        }, {
          id: 5,
          text: 'Expo'
        }];
      } else if (selectedValue === 'JavaScript') {
        return [{
          id: 1,
          text: 'let'
        }, {
          id: 2,
          text: 'in'
        }, {
          id: 3,
          text: 'document.write()'
        }, {
          id: 4,
          text: 'Object-Oriented'
        }, {
          id: 5,
          text: 'getElementById()'
        }];
      } else if (selectedValue === 'Java') {
        return [{
          id: 1,
          text: 'Object'
        }, {
          id: 2,
          text: 'Java Virtual Machine'
        }, {
          id: 3,
          text: 'static'
        }, {
          id: 4,
          text: '8'
        }, {
          id: 5,
          text: 'java.util.Object'
        }];
      } else {
        return [];
      }
    }),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    answers = _useState6[0],
    setAnswers = _useState6[1];
  var handleAnswerDrop = function handleAnswerDrop(answerId, questionIndex) {
    var correctAnswer;
    if (selectedValue === 'ReactJS') {
      if (questionIndex === 0) {
        correctAnswer = answers[4];
      } else if (questionIndex === 1) {
        correctAnswer = answers[0];
      } else if (questionIndex === 2) {
        correctAnswer = answers[3];
      } else if (questionIndex === 3) {
        correctAnswer = answers[2];
      } else if (questionIndex === 4) {
        correctAnswer = answers[1];
      }
    } else if (selectedValue === 'React Native') {
      if (questionIndex === 0) {
        correctAnswer = answers[2];
      } else if (questionIndex === 1) {
        correctAnswer = answers[4];
      } else if (questionIndex === 2) {
        correctAnswer = answers[0];
      } else if (questionIndex === 3) {
        correctAnswer = answers[3];
      } else if (questionIndex === 4) {
        correctAnswer = answers[1];
      }
    } else if (selectedValue === 'JavaScript') {
      if (questionIndex === 0) {
        correctAnswer = answers[3];
      } else if (questionIndex === 1) {
        correctAnswer = answers[0];
      } else if (questionIndex === 2) {
        correctAnswer = answers[4];
      } else if (questionIndex === 3) {
        correctAnswer = answers[2];
      } else if (questionIndex === 4) {
        correctAnswer = answers[1];
      }
    } else if (selectedValue === 'Java') {
      if (questionIndex === 0) {
        correctAnswer = answers[1];
      } else if (questionIndex === 1) {
        correctAnswer = answers[3];
      } else if (questionIndex === 2) {
        correctAnswer = answers[0];
      } else if (questionIndex === 3) {
        correctAnswer = answers[4];
      } else if (questionIndex === 4) {
        correctAnswer = answers[2];
      }
    }
    if (answerId === correctAnswer.id) {
      var newQuestions = (0, _toConsumableArray2.default)(questions);
      var question = newQuestions[questionIndex];
      var index = question.indexOf('_');
      if (index !== -1) {
        newQuestions[questionIndex] = question.substring(0, index) + correctAnswer.text + question.substring(index + 1);
        setQuestions(newQuestions);
        if (score < maxScore) {
          setScore(score + 1);
        }
      }
      setSelectedAnswer(null);
    } else {
      setSelectedAnswer(null);
    }
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    testID: "question5-container",
    children: [trackScore && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: {
        position: 'absolute',
        top: 80,
        color: 'black'
      },
      testID: "score",
      children: ["Score: ", score]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.questionNavigation,
      children: ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5'].map(function (question, index) {
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            return navigation.navigate(question);
          },
          style: styles.navigationTouchable,
          testID: "goto-" + index,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.navigationText,
            children: index + 1
          })
        }, index);
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.questionsList,
      children: questions.map(function (question, index) {
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.qNaText,
            testID: "question-" + index,
            children: question
          })
        }, index);
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.answersList,
      children: answers.map(function (answer) {
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          testID: "answer-" + answer.id,
          children: (0, _jsxRuntime.jsx)(_reactNativeDraggable.default, {
            x: 200,
            y: answer.id * 40,
            onDragRelease: function onDragRelease(event, gestureState) {
              var questionIndex = -1;
              for (var i = 0; i < questionPositions.length; i++) {
                if (gestureState.moveY < questionPositions[i]) {
                  questionIndex = i;
                  break;
                }
              }
              if (questionIndex !== -1) {
                handleAnswerDrop(answer.id, questionIndex);
              } else {
                setSelectedAnswer(null);
              }
            },
            onDrag: function onDrag() {
              return setSelectedAnswer(answer.id);
            },
            shouldReverse: true,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.AnQText,
              children: answer.text
            })
          })
        }, answer.id);
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.buttonsStyling,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Button, {
        onPress: function onPress() {
          return navigation.goBack();
        },
        title: "Go Back",
        testID: "previousQuestion"
      }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
        onPress: function onPress() {
          return navigation.navigate('Final Score');
        },
        title: "Submit",
        testID: "submitButton"
      })]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white'
  },
  questionNavigation: {
    display: 'flex',
    flexDirection: 'row',
    flexWrap: 'wrap',
    position: 'absolute',
    top: 0
  },
  navigationTouchable: {
    backgroundColor: '#FEB95F',
    padding: 3,
    marginHorizontal: 7,
    borderWidth: 1,
    borderColor: 'black',
    borderRadius: 100,
    height: 30,
    width: 30,
    marginVertical: 20
  },
  navigationText: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 3
  },
  questionsList: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    position: 'absolute',
    width: '100%',
    padding: 9,
    justifyContent: 'center',
    top: 210
  },
  answersList: {
    position: 'absolute',
    display: 'flex',
    flexDirection: 'row',
    top: 0,
    left: -195,
    overflow: 'visible'
  },
  qNaText: {
    fontFamily: 'Roboto',
    color: 'black',
    fontSize: 18,
    marginTop: 25
  },
  AnQText: {
    fontFamily: 'Roboto',
    fontSize: 15,
    backgroundColor: '#66C7F4',
    color: 'white',
    padding: 5
  },
  buttonsStyling: {
    display: 'flex',
    flexDirection: 'row',
    position: 'absolute',
    bottom: 10
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
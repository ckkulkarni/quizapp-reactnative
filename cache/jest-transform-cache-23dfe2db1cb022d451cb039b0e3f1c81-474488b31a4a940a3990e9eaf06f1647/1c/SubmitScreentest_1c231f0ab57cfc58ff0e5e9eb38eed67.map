{"version":3,"names":["_getJestObj","mock","useNavigation","jest","fn","mockReturnValue","navigate","goBack","_interopRequireDefault","require","_asyncToGenerator2","_native","_react","_reactNative","_QuizContext","_SubmitScreen","_jsxRuntime","_require","navigation","describe","mockQuizContext","score","setScore","name","setName","email","setMail","phone","setPhone","selectedValue","setSelected","trackScore","setTracker","it","default","waitFor","screen","render","jsx","QuizContext","Provider","value","children","expect","getByTestId","toBeDefined"],"sources":["SubmitScreen.test.tsx"],"sourcesContent":["import {useNavigation} from '@react-navigation/native';\r\nimport {NativeStackNavigationProp} from '@react-navigation/native-stack/lib/typescript/src/types';\r\nimport React from 'react';\r\nimport {fireEvent, render, waitFor} from '@testing-library/react-native';\r\nimport {QuizContext} from './../QuizContext';\r\nimport '@testing-library/jest-dom';\r\nimport '@testing-library/jest-dom/extend-expect';\r\nimport {Text} from 'react-native';\r\nimport SubmitScreen from './../SubmitScreen';\r\nconst navigation = useNavigation<NativeStackNavigationProp<any>>();\r\n\r\njest.mock('@react-navigation/native', () => {\r\n  return {\r\n    useNavigation: jest.fn().mockReturnValue({\r\n      navigate: jest.fn(),\r\n      goBack: jest.fn(),\r\n    }),\r\n  };\r\n});\r\ndescribe('Final screen', () => {\r\n  const mockQuizContext = {\r\n    score: 0,\r\n    setScore: jest.fn(),\r\n    name: 'chandu',\r\n    setName: jest.fn(),\r\n    email: 'chandra@chandu.com',\r\n    setMail: jest.fn(),\r\n    phone: '1234567890',\r\n    setPhone: jest.fn(),\r\n    selectedValue: 'ReactJS',\r\n    setSelected: jest.fn(),\r\n    trackScore: true,\r\n    setTracker: jest.fn(),\r\n  };\r\n  it('screen renders correctly', async () => {\r\n    await waitFor(() => {\r\n      const screen = render(\r\n        <QuizContext.Provider value={mockQuizContext}>\r\n          <SubmitScreen />\r\n        </QuizContext.Provider>,\r\n      );\r\n      expect(screen.getByTestId('scoreContainer')).toBeDefined();\r\n    });\r\n  });\r\n});\r\n"],"mappings":"AAWAA,WAAA,GAAKC,IAAI,CAAC,0BAA0B,EAAE,YAAM;EAC1C,OAAO;IACLC,aAAa,EAAEC,IAAI,CAACC,EAAE,EAAE,CAACC,eAAe,CAAC;MACvCC,QAAQ,EAAEH,IAAI,CAACC,EAAE,EAAE;MACnBG,MAAM,EAAEJ,IAAI,CAACC,EAAE;IACjB,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAAC,IAAAI,sBAAA,GAAAC,OAAA;AAAA,IAAAC,kBAAA,GAAAF,sBAAA,CAAAC,OAAA;AAlBH,IAAAE,OAAA,GAAAF,OAAA;AAEA,IAAAG,MAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,YAAA,GAAAJ,OAAA;AACA,IAAAK,YAAA,GAAAL,OAAA;AACAA,OAAA;AACAA,OAAA;AAEA,IAAAM,aAAA,GAAAP,sBAAA,CAAAC,OAAA;AAA6C,IAAAO,WAAA,GAAAP,OAAA;AAAA,SAAAT,YAAA;EAAA,IAAAiB,QAAA,GAAAR,OAAA;IAAAN,IAAA,GAAAc,QAAA,CAAAd,IAAA;EAAAH,WAAA,YAAAA,YAAA;IAAA,OAAAG,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAC7C,IAAMe,UAAU,GAAG,IAAAhB,qBAAa,GAAkC;AAUlEiB,QAAQ,CAAC,cAAc,EAAE,YAAM;EAC7B,IAAMC,eAAe,GAAG;IACtBC,KAAK,EAAE,CAAC;IACRC,QAAQ,EAAEnB,IAAI,CAACC,EAAE,EAAE;IACnBmB,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAErB,IAAI,CAACC,EAAE,EAAE;IAClBqB,KAAK,EAAE,oBAAoB;IAC3BC,OAAO,EAAEvB,IAAI,CAACC,EAAE,EAAE;IAClBuB,KAAK,EAAE,YAAY;IACnBC,QAAQ,EAAEzB,IAAI,CAACC,EAAE,EAAE;IACnByB,aAAa,EAAE,SAAS;IACxBC,WAAW,EAAE3B,IAAI,CAACC,EAAE,EAAE;IACtB2B,UAAU,EAAE,IAAI;IAChBC,UAAU,EAAE7B,IAAI,CAACC,EAAE;EACrB,CAAC;EACD6B,EAAE,CAAC,0BAA0B,MAAAvB,kBAAA,CAAAwB,OAAA,EAAE,aAAY;IACzC,MAAM,IAAAC,oBAAO,EAAC,YAAM;MAClB,IAAMC,MAAM,GAAG,IAAAC,mBAAM,EACnB,IAAArB,WAAA,CAAAsB,GAAA,EAACxB,YAAA,CAAAyB,WAAW,CAACC,QAAQ;QAACC,KAAK,EAAErB,eAAgB;QAAAsB,QAAA,EAC3C,IAAA1B,WAAA,CAAAsB,GAAA,EAACvB,aAAA,CAAAmB,OAAY;MAAG,EACK,CACxB;MACDS,MAAM,CAACP,MAAM,CAACQ,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAACC,WAAW,EAAE;IAC5D,CAAC,CAAC;EACJ,CAAC,EAAC;AACJ,CAAC,CAAC"}
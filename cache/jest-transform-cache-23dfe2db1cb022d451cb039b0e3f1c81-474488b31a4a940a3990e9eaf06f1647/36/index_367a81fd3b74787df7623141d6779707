ab9adfc2ffbb3582d520256e1289a107
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _Pie = _interopRequireDefault(require("./Pie"));
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/home/aidin/workspace/aidin36/react-native-pie-chart/src/index.tsx";
var PieChart = function PieChart(_ref) {
  var widthAndHeight = _ref.widthAndHeight,
    series = _ref.series,
    sliceColor = _ref.sliceColor,
    _ref$coverFill = _ref.coverFill,
    coverFill = _ref$coverFill === void 0 ? '#FFF' : _ref$coverFill,
    _ref$coverRadius = _ref.coverRadius,
    coverRadius = _ref$coverRadius === void 0 ? 0.6 : _ref$coverRadius,
    _ref$doughnut = _ref.doughnut,
    doughnut = _ref$doughnut === void 0 ? false : _ref$doughnut,
    _ref$style = _ref.style,
    style = _ref$style === void 0 ? {} : _ref$style;
  var handleAngle = function handleAngle() {
    var sum = series.reduce(function (previous, current) {
      return previous + current;
    }, 0);
    series.forEach(function (s) {
      if (s < 0) {
        throw Error('Invalid series: all numbers should be positive');
      }
    });
    if (sum <= 0) {
      throw Error('Invalid series: sum of series is zero');
    }
    var angle = series.reduce(function (previous, current, index) {
      if (index == series.length - 1) {
        return previous.concat(360);
      }
      return previous.concat(previous[previous.length - 1] + Math.floor(360 * current / sum));
    }, [0]);
    return angle;
  };
  return (0, _jsxRuntime.jsx)(_Pie.default, {
    widthAndHeight: widthAndHeight,
    series: series,
    sliceColor: sliceColor,
    coverFill: coverFill,
    coverRadius: coverRadius,
    doughnut: doughnut,
    style: style,
    angle: handleAngle()
  });
};
var _default = PieChart;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9yZWFjdCIsIl9QaWUiLCJfanN4UnVudGltZSIsIl90aGlzIiwiX2pzeEZpbGVOYW1lIiwiUGllQ2hhcnQiLCJfcmVmIiwid2lkdGhBbmRIZWlnaHQiLCJzZXJpZXMiLCJzbGljZUNvbG9yIiwiX3JlZiRjb3ZlckZpbGwiLCJjb3ZlckZpbGwiLCJfcmVmJGNvdmVyUmFkaXVzIiwiY292ZXJSYWRpdXMiLCJfcmVmJGRvdWdobnV0IiwiZG91Z2hudXQiLCJfcmVmJHN0eWxlIiwic3R5bGUiLCJoYW5kbGVBbmdsZSIsInN1bSIsInJlZHVjZSIsInByZXZpb3VzIiwiY3VycmVudCIsImZvckVhY2giLCJzIiwiRXJyb3IiLCJhbmdsZSIsImluZGV4IiwibGVuZ3RoIiwiY29uY2F0IiwiTWF0aCIsImZsb29yIiwianN4IiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOnRydWV9KTtleHBvcnRzLmRlZmF1bHQ9dm9pZCAwO3ZhciBfcmVhY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO3ZhciBfUGllPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUGllXCIpKTt2YXIgX2pzeFJ1bnRpbWU9cmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO3ZhciBfdGhpcz10aGlzLF9qc3hGaWxlTmFtZT1cIi9ob21lL2FpZGluL3dvcmtzcGFjZS9haWRpbjM2L3JlYWN0LW5hdGl2ZS1waWUtY2hhcnQvc3JjL2luZGV4LnRzeFwiO3ZhciBQaWVDaGFydD1mdW5jdGlvbiBQaWVDaGFydChfcmVmKXt2YXIgd2lkdGhBbmRIZWlnaHQ9X3JlZi53aWR0aEFuZEhlaWdodCxzZXJpZXM9X3JlZi5zZXJpZXMsc2xpY2VDb2xvcj1fcmVmLnNsaWNlQ29sb3IsX3JlZiRjb3ZlckZpbGw9X3JlZi5jb3ZlckZpbGwsY292ZXJGaWxsPV9yZWYkY292ZXJGaWxsPT09dm9pZCAwPycjRkZGJzpfcmVmJGNvdmVyRmlsbCxfcmVmJGNvdmVyUmFkaXVzPV9yZWYuY292ZXJSYWRpdXMsY292ZXJSYWRpdXM9X3JlZiRjb3ZlclJhZGl1cz09PXZvaWQgMD8wLjY6X3JlZiRjb3ZlclJhZGl1cyxfcmVmJGRvdWdobnV0PV9yZWYuZG91Z2hudXQsZG91Z2hudXQ9X3JlZiRkb3VnaG51dD09PXZvaWQgMD9mYWxzZTpfcmVmJGRvdWdobnV0LF9yZWYkc3R5bGU9X3JlZi5zdHlsZSxzdHlsZT1fcmVmJHN0eWxlPT09dm9pZCAwP3t9Ol9yZWYkc3R5bGU7dmFyIGhhbmRsZUFuZ2xlPWZ1bmN0aW9uIGhhbmRsZUFuZ2xlKCl7dmFyIHN1bT1zZXJpZXMucmVkdWNlKGZ1bmN0aW9uKHByZXZpb3VzLGN1cnJlbnQpe3JldHVybiBwcmV2aW91cytjdXJyZW50O30sMCk7c2VyaWVzLmZvckVhY2goZnVuY3Rpb24ocyl7aWYoczwwKXt0aHJvdyBFcnJvcignSW52YWxpZCBzZXJpZXM6IGFsbCBudW1iZXJzIHNob3VsZCBiZSBwb3NpdGl2ZScpO319KTtpZihzdW08PTApe3Rocm93IEVycm9yKCdJbnZhbGlkIHNlcmllczogc3VtIG9mIHNlcmllcyBpcyB6ZXJvJyk7fXZhciBhbmdsZT1zZXJpZXMucmVkdWNlKGZ1bmN0aW9uKHByZXZpb3VzLGN1cnJlbnQsaW5kZXgpe2lmKGluZGV4PT1zZXJpZXMubGVuZ3RoLTEpe3JldHVybiBwcmV2aW91cy5jb25jYXQoMzYwKTt9cmV0dXJuIHByZXZpb3VzLmNvbmNhdChwcmV2aW91c1twcmV2aW91cy5sZW5ndGgtMV0rTWF0aC5mbG9vcigzNjAqY3VycmVudC9zdW0pKTt9LFswXSk7cmV0dXJuIGFuZ2xlO307cmV0dXJuKDAsX2pzeFJ1bnRpbWUuanN4KShfUGllLmRlZmF1bHQse3dpZHRoQW5kSGVpZ2h0OndpZHRoQW5kSGVpZ2h0LHNlcmllczpzZXJpZXMsc2xpY2VDb2xvcjpzbGljZUNvbG9yLGNvdmVyRmlsbDpjb3ZlckZpbGwsY292ZXJSYWRpdXM6Y292ZXJSYWRpdXMsZG91Z2hudXQ6ZG91Z2hudXQsc3R5bGU6c3R5bGUsYW5nbGU6aGFuZGxlQW5nbGUoKX0pO307dmFyIF9kZWZhdWx0PVBpZUNoYXJ0O2V4cG9ydHMuZGVmYXVsdD1fZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLHNCQUFzQixHQUFDQyxPQUFPLENBQUMsOENBQThDLENBQUM7QUFBQ0MsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBQyxZQUFZLEVBQUM7RUFBQ0MsS0FBSyxFQUFDO0FBQUksQ0FBQyxDQUFDO0FBQUNELE9BQU8sQ0FBQ0UsT0FBTyxHQUFDLEtBQUssQ0FBQztBQUFDLElBQUlDLE1BQU0sR0FBQ1Asc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUFDLElBQUlPLElBQUksR0FBQ1Isc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUFDLElBQUlRLFdBQVcsR0FBQ1IsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQUMsSUFBSVMsS0FBSyxHQUFDLElBQUk7RUFBQ0MsWUFBWSxHQUFDLG9FQUFvRTtBQUFDLElBQUlDLFFBQVEsR0FBQyxTQUFTQSxRQUFRQSxDQUFDQyxJQUFJLEVBQUM7RUFBQyxJQUFJQyxjQUFjLEdBQUNELElBQUksQ0FBQ0MsY0FBYztJQUFDQyxNQUFNLEdBQUNGLElBQUksQ0FBQ0UsTUFBTTtJQUFDQyxVQUFVLEdBQUNILElBQUksQ0FBQ0csVUFBVTtJQUFDQyxjQUFjLEdBQUNKLElBQUksQ0FBQ0ssU0FBUztJQUFDQSxTQUFTLEdBQUNELGNBQWMsS0FBRyxLQUFLLENBQUMsR0FBQyxNQUFNLEdBQUNBLGNBQWM7SUFBQ0UsZ0JBQWdCLEdBQUNOLElBQUksQ0FBQ08sV0FBVztJQUFDQSxXQUFXLEdBQUNELGdCQUFnQixLQUFHLEtBQUssQ0FBQyxHQUFDLEdBQUcsR0FBQ0EsZ0JBQWdCO0lBQUNFLGFBQWEsR0FBQ1IsSUFBSSxDQUFDUyxRQUFRO0lBQUNBLFFBQVEsR0FBQ0QsYUFBYSxLQUFHLEtBQUssQ0FBQyxHQUFDLEtBQUssR0FBQ0EsYUFBYTtJQUFDRSxVQUFVLEdBQUNWLElBQUksQ0FBQ1csS0FBSztJQUFDQSxLQUFLLEdBQUNELFVBQVUsS0FBRyxLQUFLLENBQUMsR0FBQyxDQUFDLENBQUMsR0FBQ0EsVUFBVTtFQUFDLElBQUlFLFdBQVcsR0FBQyxTQUFTQSxXQUFXQSxDQUFBLEVBQUU7SUFBQyxJQUFJQyxHQUFHLEdBQUNYLE1BQU0sQ0FBQ1ksTUFBTSxDQUFDLFVBQVNDLFFBQVEsRUFBQ0MsT0FBTyxFQUFDO01BQUMsT0FBT0QsUUFBUSxHQUFDQyxPQUFPO0lBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUFDZCxNQUFNLENBQUNlLE9BQU8sQ0FBQyxVQUFTQyxDQUFDLEVBQUM7TUFBQyxJQUFHQSxDQUFDLEdBQUMsQ0FBQyxFQUFDO1FBQUMsTUFBTUMsS0FBSyxDQUFDLGdEQUFnRCxDQUFDO01BQUM7SUFBQyxDQUFDLENBQUM7SUFBQyxJQUFHTixHQUFHLElBQUUsQ0FBQyxFQUFDO01BQUMsTUFBTU0sS0FBSyxDQUFDLHVDQUF1QyxDQUFDO0lBQUM7SUFBQyxJQUFJQyxLQUFLLEdBQUNsQixNQUFNLENBQUNZLE1BQU0sQ0FBQyxVQUFTQyxRQUFRLEVBQUNDLE9BQU8sRUFBQ0ssS0FBSyxFQUFDO01BQUMsSUFBR0EsS0FBSyxJQUFFbkIsTUFBTSxDQUFDb0IsTUFBTSxHQUFDLENBQUMsRUFBQztRQUFDLE9BQU9QLFFBQVEsQ0FBQ1EsTUFBTSxDQUFDLEdBQUcsQ0FBQztNQUFDO01BQUMsT0FBT1IsUUFBUSxDQUFDUSxNQUFNLENBQUNSLFFBQVEsQ0FBQ0EsUUFBUSxDQUFDTyxNQUFNLEdBQUMsQ0FBQyxDQUFDLEdBQUNFLElBQUksQ0FBQ0MsS0FBSyxDQUFDLEdBQUcsR0FBQ1QsT0FBTyxHQUFDSCxHQUFHLENBQUMsQ0FBQztJQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUMsT0FBT08sS0FBSztFQUFDLENBQUM7RUFBQyxPQUFNLENBQUMsQ0FBQyxFQUFDeEIsV0FBVyxDQUFDOEIsR0FBRyxFQUFFL0IsSUFBSSxDQUFDRixPQUFPLEVBQUM7SUFBQ1EsY0FBYyxFQUFDQSxjQUFjO0lBQUNDLE1BQU0sRUFBQ0EsTUFBTTtJQUFDQyxVQUFVLEVBQUNBLFVBQVU7SUFBQ0UsU0FBUyxFQUFDQSxTQUFTO0lBQUNFLFdBQVcsRUFBQ0EsV0FBVztJQUFDRSxRQUFRLEVBQUNBLFFBQVE7SUFBQ0UsS0FBSyxFQUFDQSxLQUFLO0lBQUNTLEtBQUssRUFBQ1IsV0FBVztFQUFFLENBQUMsQ0FBQztBQUFDLENBQUM7QUFBQyxJQUFJZSxRQUFRLEdBQUM1QixRQUFRO0FBQUNSLE9BQU8sQ0FBQ0UsT0FBTyxHQUFDa0MsUUFBUSJ9
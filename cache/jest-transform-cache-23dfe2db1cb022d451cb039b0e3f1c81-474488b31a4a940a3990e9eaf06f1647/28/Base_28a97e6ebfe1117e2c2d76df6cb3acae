69725d2b7630bd403e1a477de7e601dc
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Base;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _reactNativeSelectDropdown = _interopRequireDefault(require("react-native-select-dropdown"));
var _QuizContext = require("./QuizContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Base() {
  var navigation = (0, _native.useNavigation)();
  var _useContext = (0, _react.useContext)(_QuizContext.QuizContext),
    setName = _useContext.setName,
    setMail = _useContext.setMail,
    setPhone = _useContext.setPhone,
    setSelected = _useContext.setSelected,
    setTracker = _useContext.setTracker;
  var _useState = (0, _react.useState)(true),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    validMail = _useState2[0],
    setValid = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    validName = _useState4[0],
    setValidName = _useState4[1];
  var _useState5 = (0, _react.useState)(false),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    validPhone = _useState6[0],
    setValidPhone = _useState6[1];
  var _useState7 = (0, _react.useState)(false),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    submitPressed = _useState8[0],
    setSubmit = _useState8[1];
  var _useState9 = (0, _react.useState)(false),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    validSelections = _useState10[0],
    setSelections = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    validOption = _useState12[0],
    setOption = _useState12[1];
  var selections = ['ReactJS', 'React Native', 'JavaScript', 'Java'];
  function handleSubmit() {
    setSubmit(true);
  }
  var handleEmailChange = function handleEmailChange(text) {
    setMail(text);
    var emailFormat = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
    setValid(emailFormat.test(text));
  };
  var handleNameChange = function handleNameChange(text) {
    setName(text);
    setValidName(text.trim().length > 0);
  };
  var handlePhoneChange = function handlePhoneChange(text) {
    setPhone(text);
    setValidPhone(text.trim().length === 10);
  };
  var isFormValid = validName && validMail && validPhone;
  var startQuiz = isFormValid && submitPressed;
  var track = [true, false];
  return (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
    contentContainerStyle: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
      placeholder: "Enter your name",
      onChangeText: handleNameChange,
      style: styles.input
    }), !validMail && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        color: 'red'
      },
      children: "Enter a valid Email Address"
    }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
      placeholder: "Enter your Email ID",
      onChangeText: handleEmailChange,
      keyboardType: "email-address",
      style: [styles.input, !validMail && styles.invalidInput]
    }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
      placeholder: "Enter your Phone Number",
      keyboardType: "numeric",
      onChangeText: handlePhoneChange,
      style: styles.input
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      children: "Select your preferred language: "
    }), (0, _jsxRuntime.jsx)(_reactNativeSelectDropdown.default, {
      data: selections,
      onSelect: function onSelect(selectedItem, index) {
        setSelected(selectedItem);
      },
      searchInputTxtColor: 'blue'
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      children: "Track Score?"
    }), (0, _jsxRuntime.jsx)(_reactNativeSelectDropdown.default, {
      data: track,
      onSelect: function onSelect(tracking, index) {
        setTracker(tracking);
      },
      searchInputTxtColor: 'blue'
    }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
      title: "Submit",
      onPress: handleSubmit,
      disabled: !isFormValid
    }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
      disabled: !startQuiz,
      title: "Click Here to Start Quiz",
      onPress: function onPress() {
        return navigation.navigate('Question 1');
      }
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  input: {
    borderWidth: 1,
    borderColor: 'gray',
    borderRadius: 5,
    padding: 10,
    width: '80%',
    marginVertical: 10
  },
  invalidInput: {
    borderColor: 'red'
  },
  selector: {
    backgroundColor: 'blue',
    padding: 10
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
4f7711c7c2956290037aee5f3a2e9d7e
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Base = _interopRequireDefault(require("../Base"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('should render a form with three text inputs, two selections, and one submit', function () {
  var wrapper;
  beforeEach(function () {
    wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Base.default, {}));
  });
  it('component renders correctly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should update the name state upon text input', function () {
    expect(wrapper.find('TextInput')).toBeTruthy();
    expect(wrapper.find('SelectDropdown')).toBeTruthy();
    expect(wrapper.find('Button')).toBeTruthy();
  });
  it('should disable the submit button when the form  does not have all the inputs', function () {
    expect(wrapper.find('Button').at(0).prop('disabled')).toBe(true);
  });
  it('should enable the submit button when the form has all the inputs', function () {
    wrapper.find('TextInput').at(0).simulate('changeText', 'chandrakanth');
    wrapper.find('TextInput').at(1).simulate('changeText', 'chandra@kanth.com');
    wrapper.find('TextInput').at(2).simulate('changeText', '1234567890');
    expect(wrapper.find('Button').at(0).prop('disabled')).toBe(false);
  });
  it('on quiz start button, should navigate to the next screen, aka, the quiz should begin', function () {
    var quizStartButton = wrapper.find(_reactNative.Button).at(1).simulate('click');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9CYXNlIiwiX2VuenltZUFkYXB0ZXJSZWFjdCIsImVuenltZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX25hdGl2ZSIsIl9yZWFjdE5hdGl2ZSIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9yZXF1aXJlIiwiY29uZmlndXJlIiwiYWRhcHRlciIsIkFkYXB0ZXIiLCJuYXZpZ2F0aW9uIiwiZGVzY3JpYmUiLCJ3cmFwcGVyIiwiYmVmb3JlRWFjaCIsInNoYWxsb3ciLCJqc3giLCJpdCIsImV4cGVjdCIsInRvTWF0Y2hTbmFwc2hvdCIsImZpbmQiLCJ0b0JlVHJ1dGh5IiwiYXQiLCJwcm9wIiwidG9CZSIsInNpbXVsYXRlIiwicXVpelN0YXJ0QnV0dG9uIiwiQnV0dG9uIl0sInNvdXJjZXMiOlsiQmFzZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZSBmcm9tICcuLi9CYXNlJztcclxuaW1wb3J0IEFkYXB0ZXIgZnJvbSAnZW56eW1lLWFkYXB0ZXItcmVhY3QtMTYnO1xyXG5pbXBvcnQge21vdW50LCBzaGFsbG93fSBmcm9tICdlbnp5bWUnO1xyXG5pbXBvcnQgKiBhcyBlbnp5bWUgZnJvbSAnZW56eW1lJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjay9saWIvdHlwZXNjcmlwdC9zcmMvdHlwZXMnO1xyXG5pbXBvcnQge1RleHRJbnB1dCwgQnV0dG9ufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQge1F1aXpDb250ZXh0fSBmcm9tICcuLy4uL1F1aXpDb250ZXh0JztcclxuZW56eW1lLmNvbmZpZ3VyZSh7YWRhcHRlcjogbmV3IEFkYXB0ZXIoKX0pO1xyXG5jb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5kZXNjcmliZSgnc2hvdWxkIHJlbmRlciBhIGZvcm0gd2l0aCB0aHJlZSB0ZXh0IGlucHV0cywgdHdvIHNlbGVjdGlvbnMsIGFuZCBvbmUgc3VibWl0JywgKCkgPT4ge1xyXG4gIGxldCB3cmFwcGVyOiBhbnk7XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgd3JhcHBlciA9IHNoYWxsb3coPEJhc2UgLz4pO1xyXG4gIH0pO1xyXG4gIGl0KCdjb21wb25lbnQgcmVuZGVycyBjb3JyZWN0bHknLCAoKSA9PiB7XHJcbiAgICBleHBlY3Qod3JhcHBlcikudG9NYXRjaFNuYXBzaG90KCk7XHJcbiAgfSk7XHJcbiAgaXQoJ3Nob3VsZCB1cGRhdGUgdGhlIG5hbWUgc3RhdGUgdXBvbiB0ZXh0IGlucHV0JywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZCgnVGV4dElucHV0JykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ1NlbGVjdERyb3Bkb3duJykpLnRvQmVUcnV0aHkoKTtcclxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ0J1dHRvbicpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbiAgaXQoJ3Nob3VsZCBkaXNhYmxlIHRoZSBzdWJtaXQgYnV0dG9uIHdoZW4gdGhlIGZvcm0gIGRvZXMgbm90IGhhdmUgYWxsIHRoZSBpbnB1dHMnLCAoKSA9PiB7XHJcbiAgICBleHBlY3Qod3JhcHBlci5maW5kKCdCdXR0b24nKS5hdCgwKS5wcm9wKCdkaXNhYmxlZCcpKS50b0JlKHRydWUpO1xyXG4gIH0pO1xyXG4gIGl0KCdzaG91bGQgZW5hYmxlIHRoZSBzdWJtaXQgYnV0dG9uIHdoZW4gdGhlIGZvcm0gaGFzIGFsbCB0aGUgaW5wdXRzJywgKCkgPT4ge1xyXG4gICAgd3JhcHBlci5maW5kKCdUZXh0SW5wdXQnKS5hdCgwKS5zaW11bGF0ZSgnY2hhbmdlVGV4dCcsICdjaGFuZHJha2FudGgnKTtcclxuICAgIHdyYXBwZXIuZmluZCgnVGV4dElucHV0JykuYXQoMSkuc2ltdWxhdGUoJ2NoYW5nZVRleHQnLCAnY2hhbmRyYUBrYW50aC5jb20nKTtcclxuICAgIHdyYXBwZXIuZmluZCgnVGV4dElucHV0JykuYXQoMikuc2ltdWxhdGUoJ2NoYW5nZVRleHQnLCAnMTIzNDU2Nzg5MCcpO1xyXG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZCgnQnV0dG9uJykuYXQoMCkucHJvcCgnZGlzYWJsZWQnKSkudG9CZShmYWxzZSk7XHJcbiAgfSk7XHJcbiAgaXQoJ29uIHF1aXogc3RhcnQgYnV0dG9uLCBzaG91bGQgbmF2aWdhdGUgdG8gdGhlIG5leHQgc2NyZWVuLCBha2EsIHRoZSBxdWl6IHNob3VsZCBiZWdpbicsICgpID0+IHtcclxuICAgIGNvbnN0IHF1aXpTdGFydEJ1dHRvbiA9IHdyYXBwZXIuZmluZChCdXR0b24pLmF0KDEpLnNpbXVsYXRlKCdjbGljaycpO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFVQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLEVBQUUsQ0FBQ0MsZUFBZSxDQUFDO01BQ3ZDQyxRQUFRLEVBQUVILElBQUksQ0FBQ0MsRUFBRTtJQUNuQixDQUFDO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDLElBQUFHLHNCQUFBLEdBQUFDLE9BQUE7QUFoQkgsSUFBQUMsS0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsbUJBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUVBLElBQUFLLE9BQUEsR0FBQUwsT0FBQTtBQUVBLElBQUFNLFlBQUEsR0FBQU4sT0FBQTtBQUErQyxJQUFBTyxXQUFBLEdBQUFQLE9BQUE7QUFBQSxTQUFBUSx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQUwsd0JBQUFTLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQUUsT0FBQSxFQUFBRixHQUFBLFVBQUFHLEtBQUEsR0FBQVIsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTyxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxD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
030c1c99811feba3085181301f3e0a08
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Question = _interopRequireDefault(require("../Question1"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('Question 1 component', function () {
  var mockQuizContext = {
    trackScore: true,
    score: 0,
    setScore: jest.fn(),
    selectedValue: 'ReactJS'
  };
  var wrapper;
  beforeEach(function () {
    wrapper = enzyme.mount((0, _jsxRuntime.jsx)(_Question.default, {}), {
      context: {
        QuizContext: mockQuizContext
      }
    });
    jest.spyOn(_react.default, 'useContext').mockImplementation(function () {
      return mockQuizContext;
    });
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  var questionText = mockQuizContext.selectedValue === 'ReactJS' ? 'What is the extension used for TypeScript in ReactJS?' : '';
  expect(questionText).toEqual('What is the extension used for TypeScript in ReactJS?');
  it('the component renders properly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should render one question, and 5 answers for that quesiton', function () {
    console.log(wrapper.debug());
    expect(wrapper.find('Pressable')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9RdWVzdGlvbiIsIl9lbnp5bWVBZGFwdGVyUmVhY3QiLCJlbnp5bWUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9uYXRpdmUiLCJfcmVhY3QiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfcmVxdWlyZSIsImNvbmZpZ3VyZSIsImFkYXB0ZXIiLCJBZGFwdGVyIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwibW9ja1F1aXpDb250ZXh0IiwidHJhY2tTY29yZSIsInNjb3JlIiwic2V0U2NvcmUiLCJzZWxlY3RlZFZhbHVlIiwid3JhcHBlciIsImJlZm9yZUVhY2giLCJtb3VudCIsImpzeCIsImNvbnRleHQiLCJRdWl6Q29udGV4dCIsInNweU9uIiwiUmVhY3QiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJhZnRlckVhY2giLCJyZXN0b3JlQWxsTW9ja3MiLCJxdWVzdGlvblRleHQiLCJleHBlY3QiLCJ0b0VxdWFsIiwiaXQiLCJ0b01hdGNoU25hcHNob3QiLCJjb25zb2xlIiwibG9nIiwiZGVidWciLCJmaW5kIiwidG9CZVRydXRoeSJdLCJzb3VyY2VzIjpbIlF1ZXN0aW9uMS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUXVlc3Rpb24xIGZyb20gJy4uL1F1ZXN0aW9uMSc7XHJcbmltcG9ydCBBZGFwdGVyIGZyb20gJ2VuenltZS1hZGFwdGVyLXJlYWN0LTE2JztcclxuaW1wb3J0IHtzaGFsbG93fSBmcm9tICdlbnp5bWUnO1xyXG5pbXBvcnQgKiBhcyBlbnp5bWUgZnJvbSAnZW56eW1lJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjay9saWIvdHlwZXNjcmlwdC9zcmMvdHlwZXMnO1xyXG5pbXBvcnQgUmVhY3QsIHt1c2VDb250ZXh0fSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7VGV4dCwgQnV0dG9uLCBQcmVzc2FibGV9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7UXVpekNvbnRleHR9IGZyb20gJy4vLi4vUXVpekNvbnRleHQnO1xyXG5lbnp5bWUuY29uZmlndXJlKHthZGFwdGVyOiBuZXcgQWRhcHRlcigpfSk7XHJcbmNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuXHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ1F1ZXN0aW9uIDEgY29tcG9uZW50JywgKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tRdWl6Q29udGV4dCA9IHtcclxuICAgIHRyYWNrU2NvcmU6IHRydWUsXHJcbiAgICBzY29yZTogMCxcclxuICAgIHNldFNjb3JlOiBqZXN0LmZuKCksXHJcbiAgICBzZWxlY3RlZFZhbHVlOiAnUmVhY3RKUycsXHJcbiAgfTtcclxuICBsZXQgd3JhcHBlcjogYW55O1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgd3JhcHBlciA9IGVuenltZS5tb3VudCg8UXVlc3Rpb24xIC8+LCB7XHJcbiAgICAgIGNvbnRleHQ6IHtRdWl6Q29udGV4dDogbW9ja1F1aXpDb250ZXh0fSxcclxuICAgIH0pO1xyXG4gICAgamVzdC5zcHlPbihSZWFjdCwgJ3VzZUNvbnRleHQnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja1F1aXpDb250ZXh0KTtcclxuICB9KTtcclxuICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcclxuICB9KTtcclxuICBjb25zdCBxdWVzdGlvblRleHQgPVxyXG4gICAgbW9ja1F1aXpDb250ZXh0LnNlbGVjdGVkVmFsdWUgPT09ICdSZWFjdEpTJ1xyXG4gICAgICA/ICdXaGF0IGlzIHRoZSBleHRlbnNpb24gdXNlZCBmb3IgVHlwZVNjcmlwdCBpbiBSZWFjdEpTPydcclxuICAgICAgOiAnJztcclxuICBleHBlY3QocXVlc3Rpb25UZXh0KS50b0VxdWFsKFxyXG4gICAgJ1doYXQgaXMgdGhlIGV4dGVuc2lvbiB1c2VkIGZvciBUeXBlU2NyaXB0IGluIFJlYWN0SlM/JyxcclxuICApO1xyXG4gIGl0KCd0aGUgY29tcG9uZW50IHJlbmRlcnMgcHJvcGVybHknLCAoKSA9PiB7XHJcbiAgICBleHBlY3Qod3JhcHBlcikudG9NYXRjaFNuYXBzaG90KCk7XHJcbiAgfSk7XHJcbiAgaXQoJ3Nob3VsZCByZW5kZXIgb25lIHF1ZXN0aW9uLCBhbmQgNSBhbnN3ZXJzIGZvciB0aGF0IHF1ZXNpdG9uJywgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2cod3JhcHBlci5kZWJ1ZygpKTtcclxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ1ByZXNzYWJsZScpKS50b0JlVHJ1dGh5KCk7XHJcbiAgfSk7XHJcbiAgLy8gICBpdCgnc2hvdWxkIHVwZGF0ZSBzZWxlY3RlZEluZGV4IG9uIG9wdGlvbiBwcmVzcycsICgpID0+IHtcclxuICAvLyAgICAgY29uc3Qgb3B0aW9uSW5kZXggPSAxO1xyXG4gIC8vICAgICBjb25zb2xlLmxvZyh3cmFwcGVyLmRlYnVnKCkpO1xyXG4gIC8vICAgICBjb25zdCBvcHRpb24gPSB3cmFwcGVyLmZpbmQoJ1ByZXNzYWJsZScpLmF0KG9wdGlvbkluZGV4KTtcclxuICAvLyAgICAgY29uc29sZS5sb2cob3B0aW9uLmRlYnVnKCkpO1xyXG4gIC8vICAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQVlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQzFDLE9BQU87SUFDTEMsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsRUFBRSxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFO0lBQ25CLENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUMsSUFBQUcsc0JBQUEsR0FBQUMsT0FBQTtBQWxCSCxJQUFBQyxTQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxtQkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUcsTUFBQSxHQUFBQyx1QkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQUssT0FBQSxHQUFBTCxPQUFBO0FBRUEsSUFBQU0sTUFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQXdDLElBQUFPLFdBQUEsR0FBQVAsT0FBQTtBQUFBLFNBQUFRLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFB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
81e0bbfef8f32f2e5eafdc55c4d4afbd
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Base = _interopRequireDefault(require("../Base"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _reactNative = require("react-native");
var _QuizContext = require("./../QuizContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
var mockContext = {
  name: 'chandrakanth',
  email: 'chandu@kanth.com',
  phone: '1234567890',
  score: 0,
  trackScore: true,
  selectedValue: 'ReactJS',
  setName: jest.fn(),
  setMail: jest.fn(),
  setPhone: jest.fn(),
  setSelected: jest.fn(),
  setTracker: jest.fn(),
  setScore: jest.fn()
};
describe('should render a form with three text inputs, two selections, and one submit', function () {
  var wrapper;
  beforeEach(function () {
    wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
      value: mockContext,
      children: (0, _jsxRuntime.jsx)(_Base.default, {})
    }));
  });
  it('component renders correctly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should render a form with three text inputs, two selections, and one submit button', function () {
    expect(wrapper.find('TextInput')).toHaveLength(3);
    expect(wrapper.find('SelectDropdown')).toHaveLength(2);
    expect(wrapper.find('Button')).toHaveLength(2);
  });
  it('should disable the submit button when the form is invalid', function () {
    expect(wrapper.find('Button').at(0).prop('disabled')).toBe(true);
  });
  it('should enable the submit when all the inputs are entered', function () {
    var nameInput = wrapper.find(_reactNative.TextInput).at(0);
    var emailInput = wrapper.find(_reactNative.TextInput).at(1);
    var phoneInput = wrapper.find(_reactNative.TextInput).at(2);
    nameInput.simulate('changeText', 'Chandrakanth');
    emailInput.simulate('changeText', 'chandu@cc.com');
    phoneInput.simulate('changeText', '0909090909');
    expect(wrapper.find(_reactNative.Button).at(0).prop('disabled')).toBe(false);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
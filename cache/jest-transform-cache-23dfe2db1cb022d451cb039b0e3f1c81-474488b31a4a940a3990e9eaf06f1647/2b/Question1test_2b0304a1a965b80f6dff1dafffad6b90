aa78561ec0c2e7d28aa3d462a9a2d61c
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Question = _interopRequireDefault(require("../Question1"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('Question 1 component', function () {
  var mockQuizContext = {
    trackScore: true,
    score: 0,
    setScore: jest.fn(),
    selectedValue: 'ReactJS'
  };
  var wrapper;
  beforeEach(function () {
    wrapper = enzyme.shallow((0, _jsxRuntime.jsx)(_Question.default, {}), {
      context: {
        QuizContext: mockQuizContext
      }
    });
    jest.spyOn(_react.default, 'useContext').mockImplementation(function () {
      return mockQuizContext;
    });
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  var questionText = 'What is the extension used for TypeScript in ReactJS?';
  expect(questionText).toEqual('What is the extension used for TypeScript in ReactJS?');
  it('the component renders properly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should render one question, and 5 answers for that quesiton', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Question.default, {})),
      getByTestId = _render.getByTestId;
    var questionText = getByTestId('questionID');
    console.log(questionText.props);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9RdWVzdGlvbiIsIl9lbnp5bWVBZGFwdGVyUmVhY3QiLCJlbnp5bWUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9uYXRpdmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfcmVxdWlyZSIsImNvbmZpZ3VyZSIsImFkYXB0ZXIiLCJBZGFwdGVyIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwibW9ja1F1aXpDb250ZXh0IiwidHJhY2tTY29yZSIsInNjb3JlIiwic2V0U2NvcmUiLCJzZWxlY3RlZFZhbHVlIiwid3JhcHBlciIsImJlZm9yZUVhY2giLCJzaGFsbG93IiwianN4IiwiY29udGV4dCIsIlF1aXpDb250ZXh0Iiwic3B5T24iLCJSZWFjdCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImFmdGVyRWFjaCIsInJlc3RvcmVBbGxNb2NrcyIsInF1ZXN0aW9uVGV4dCIsImV4cGVjdCIsInRvRXF1YWwiLCJpdCIsInRvTWF0Y2hTbmFwc2hvdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJnZXRCeVRlc3RJZCIsImNvbnNvbGUiLCJsb2ciLCJwcm9wcyJdLCJzb3VyY2VzIjpbIlF1ZXN0aW9uMS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUXVlc3Rpb24xIGZyb20gJy4uL1F1ZXN0aW9uMSc7XHJcbmltcG9ydCBBZGFwdGVyIGZyb20gJ2VuenltZS1hZGFwdGVyLXJlYWN0LTE2JztcclxuaW1wb3J0IHtzaGFsbG93fSBmcm9tICdlbnp5bWUnO1xyXG5pbXBvcnQgKiBhcyBlbnp5bWUgZnJvbSAnZW56eW1lJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjay9saWIvdHlwZXNjcmlwdC9zcmMvdHlwZXMnO1xyXG5pbXBvcnQgUmVhY3QsIHt1c2VDb250ZXh0fSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7cmVuZGVyfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7VGV4dCwgQnV0dG9uLCBQcmVzc2FibGV9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7UXVpekNvbnRleHR9IGZyb20gJy4vLi4vUXVpekNvbnRleHQnO1xyXG5lbnp5bWUuY29uZmlndXJlKHthZGFwdGVyOiBuZXcgQWRhcHRlcigpfSk7XHJcbmNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuXHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ1F1ZXN0aW9uIDEgY29tcG9uZW50JywgKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tRdWl6Q29udGV4dCA9IHtcclxuICAgIHRyYWNrU2NvcmU6IHRydWUsXHJcbiAgICBzY29yZTogMCxcclxuICAgIHNldFNjb3JlOiBqZXN0LmZuKCksXHJcbiAgICBzZWxlY3RlZFZhbHVlOiAnUmVhY3RKUycsXHJcbiAgfTtcclxuICBsZXQgd3JhcHBlcjogYW55O1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgd3JhcHBlciA9IGVuenltZS5zaGFsbG93KDxRdWVzdGlvbjEgLz4sIHtcclxuICAgICAgY29udGV4dDoge1F1aXpDb250ZXh0OiBtb2NrUXVpekNvbnRleHR9LFxyXG4gICAgfSk7XHJcbiAgICBqZXN0LnNweU9uKFJlYWN0LCAndXNlQ29udGV4dCcpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBtb2NrUXVpekNvbnRleHQpO1xyXG4gIH0pO1xyXG4gIGFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LnJlc3RvcmVBbGxNb2NrcygpO1xyXG4gIH0pO1xyXG4gIGNvbnN0IHF1ZXN0aW9uVGV4dCA9ICdXaGF0IGlzIHRoZSBleHRlbnNpb24gdXNlZCBmb3IgVHlwZVNjcmlwdCBpbiBSZWFjdEpTPyc7XHJcbiAgZXhwZWN0KHF1ZXN0aW9uVGV4dCkudG9FcXVhbChcclxuICAgICdXaGF0IGlzIHRoZSBleHRlbnNpb24gdXNlZCBmb3IgVHlwZVNjcmlwdCBpbiBSZWFjdEpTPycsXHJcbiAgKTtcclxuICBpdCgndGhlIGNvbXBvbmVudCByZW5kZXJzIHByb3Blcmx5JywgKCkgPT4ge1xyXG4gICAgZXhwZWN0KHdyYXBwZXIpLnRvTWF0Y2hTbmFwc2hvdCgpO1xyXG4gIH0pO1xyXG4gIGl0KCdzaG91bGQgcmVuZGVyIG9uZSBxdWVzdGlvbiwgYW5kIDUgYW5zd2VycyBmb3IgdGhhdCBxdWVzaXRvbicsICgpID0+IHtcclxuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPFF1ZXN0aW9uMSAvPik7XHJcbiAgICBjb25zdCBxdWVzdGlvblRleHQgPSBnZXRCeVRlc3RJZCgncXVlc3Rpb25JRCcpO1xyXG4gICAgY29uc29sZS5sb2cocXVlc3Rpb25UZXh0LnByb3BzKTtcclxuICB9KTtcclxuICAvLyAgIGl0KCdzaG91bGQgdXBkYXRlIHNlbGVjdGVkSW5kZXggb24gb3B0aW9uIHByZXNzJywgKCkgPT4ge1xyXG4gIC8vICAgICBjb25zdCBvcHRpb25JbmRleCA9IDE7XHJcbiAgLy8gICAgIGNvbnNvbGUubG9nKHdyYXBwZXIuZGVidWcoKSk7XHJcbiAgLy8gICAgIGNvbnN0IG9wdGlvbiA9IHdyYXBwZXIuZmluZCgnUHJlc3NhYmxlJykuYXQob3B0aW9uSW5kZXgpO1xyXG4gIC8vICAgICBjb25zb2xlLmxvZyhvcHRpb24uZGVidWcoKSk7XHJcbiAgLy8gICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBYUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQU07RUFDMUMsT0FBTztJQUNMQyxhQUFhLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxFQUFFLENBQUNDLGVBQWUsQ0FBQztNQUN2Q0MsUUFBUSxFQUFFSCxJQUFJLENBQUNDLEVBQUU7SUFDbkIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQyxJQUFBRyxzQkFBQSxHQUFBQyxPQUFBO0FBbkJILElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLG1CQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFFQSxJQUFBRyxNQUFBLEdBQUFDLHVCQUFBLENBQUFKLE9BQUE7QUFDQSxJQUFBSyxPQUFBLEdBQUFMLE9BQUE7QUFFQSxJQUFBTSxNQUFBLEdBQUFQLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBTyxZQUFBLEdBQUFQLE9BQUE7QUFBcUQsSUFBQVEsV0FBQSxHQUFBUixPQUFBO0FBQUEsU0FBQVMseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FB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
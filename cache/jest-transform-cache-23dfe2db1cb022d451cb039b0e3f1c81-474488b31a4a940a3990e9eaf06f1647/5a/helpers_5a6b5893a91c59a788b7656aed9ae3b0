b8091f52c23a63279e591c5a0586abc2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.childrenAsString = childrenAsString;
exports.extractAlignment = extractAlignment;
exports.extractBrush = extractBrush;
exports.extractColor = extractColor;
exports.extractFontAndLines = extractFontAndLines;
exports.extractOpacity = extractOpacity;
exports.extractShadow = extractShadow;
exports.extractStrokeCap = extractStrokeCap;
exports.extractStrokeJoin = extractStrokeJoin;
exports.extractTransform = extractTransform;
exports.insertColorStopsIntoArray = insertColorStopsIntoArray;
exports.insertDoubleColorStopsIntoArray = insertDoubleColorStopsIntoArray;
var _processColor = _interopRequireDefault(require("react-native/Libraries/StyleSheet/processColor"));
var _color = _interopRequireDefault(require("art/core/color"));
var _transform = _interopRequireDefault(require("art/core/transform"));
var _reactNative = require("react-native");
function childrenAsString(children) {
  if (!children) {
    return '';
  }
  if (typeof children === 'string') {
    return children;
  }
  if (children.length) {
    return children.join('\n');
  }
  return '';
}
function extractOpacity(_ref) {
  var visible = _ref.visible,
    opacity = _ref.opacity;
  if (visible === false) {
    return 0;
  }
  if (opacity == null) {
    return 1;
  }
  return +opacity;
}
var pooledTransform = new _transform.default();
function extractTransform(props) {
  var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
  var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;
  pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY);
  if (props.transform != null) {
    pooledTransform.transform(props.transform);
  }
  return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
}
function toHex(color) {
  var intValues = [color.red, color.green, color.blue];
  if (color.alpha < 1) {
    var position = _reactNative.Platform.OS === 'android' ? 0 : 3;
    intValues.splice(position, 0, Math.round(color.alpha * 255));
  }
  var hexValues = intValues.map(function (iv) {
    var sv = iv.toString(16);
    return sv.length === 1 ? '0' + sv : sv;
  });
  return '#' + hexValues.join('');
}
function extractShadow(props) {
  var _props$shadowOffset, _props$shadowOffset2;
  if (!props.shadowColor && !props.shadowOpacity && !props.shadowRadius && !props.shadowOffset) {
    return;
  }
  var opacity = props.shadowOpacity;
  if (opacity === null || opacity === undefined) {
    opacity = 1;
  }
  return [(0, _processColor.default)(props.shadowColor || 'black'), opacity, props.shadowRadius || 4, ((_props$shadowOffset = props.shadowOffset) == null ? void 0 : _props$shadowOffset.x) || 0, ((_props$shadowOffset2 = props.shadowOffset) == null ? void 0 : _props$shadowOffset2.y) || 0];
}
function extractColor(color) {
  if (color == null) {
    return null;
  }
  return toHex(new _color.default(color));
}
function extractStrokeJoin(strokeJoin) {
  switch (strokeJoin) {
    case 'miter':
      return 0;
    case 'bevel':
      return 2;
    default:
      return 1;
  }
}
function extractStrokeCap(strokeCap) {
  switch (strokeCap) {
    case 'butt':
      return 0;
    case 'square':
      return 2;
    default:
      return 1;
  }
}
var SOLID_COLOR = 0;
var LINEAR_GRADIENT = 1;
var RADIAL_GRADIENT = 2;
var PATTERN = 3;
function applyBoundingBoxToBrushData(brushData, props) {
  var type = brushData[0];
  var width = +props.width;
  var height = +props.height;
  if (type === LINEAR_GRADIENT) {
    brushData[1] *= width;
    brushData[2] *= height;
    brushData[3] *= width;
    brushData[4] *= height;
  } else if (type === RADIAL_GRADIENT) {
    brushData[1] *= width;
    brushData[2] *= height;
    brushData[3] *= width;
    brushData[4] *= height;
    brushData[5] *= width;
    brushData[6] *= height;
  } else if (type === PATTERN) {}
}
function extractBrush(colorOrBrush, props) {
  if (colorOrBrush == null) {
    return null;
  }
  if (colorOrBrush._brush) {
    if (colorOrBrush._bb) {
      applyBoundingBoxToBrushData(colorOrBrush._brush, props);
      colorOrBrush._bb = false;
    }
    return colorOrBrush._brush;
  }
  var c = new _color.default(colorOrBrush);
  return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
}
function extractAlignment(alignment) {
  switch (alignment) {
    case 'right':
      return 1;
    case 'center':
      return 2;
    default:
      return 0;
  }
}
var cachedFontObjectsFromString = {};
var fontFamilyPrefix = /^[\s"']*/;
var fontFamilySuffix = /[\s"']*$/;
function extractSingleFontFamily(fontFamilyString) {
  return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
}
function parseFontString(font) {
  if (cachedFontObjectsFromString.hasOwnProperty(font)) {
    return cachedFontObjectsFromString[font];
  }
  var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
  var match = regexp.exec(font);
  if (!match) {
    return null;
  }
  var fontFamily = extractSingleFontFamily(match[3]);
  var fontSize = +match[2] || 12;
  var isBold = /bold/.exec(match[1]);
  var isItalic = /italic/.exec(match[1]);
  cachedFontObjectsFromString[font] = {
    fontFamily: fontFamily,
    fontSize: fontSize,
    fontWeight: isBold ? 'bold' : 'normal',
    fontStyle: isItalic ? 'italic' : 'normal'
  };
  return cachedFontObjectsFromString[font];
}
function extractFont(font) {
  if (font == null) {
    return null;
  }
  if (typeof font === 'string') {
    return parseFontString(font);
  }
  var fontFamily = extractSingleFontFamily(font.fontFamily);
  var fontSize = +font.fontSize || 12;
  var fontWeight = font.fontWeight != null ? font.fontWeight.toString() : '400';
  return {
    fontFamily: fontFamily,
    fontSize: fontSize,
    fontWeight: fontWeight,
    fontStyle: font.fontStyle
  };
}
var newLine = /\n/g;
function extractFontAndLines(font, text) {
  return {
    font: extractFont(font),
    lines: text.split(newLine)
  };
}
function insertColorIntoArray(color, targetArray, atIndex) {
  var c = new _color.default(color);
  targetArray[atIndex + 0] = c.red / 255;
  targetArray[atIndex + 1] = c.green / 255;
  targetArray[atIndex + 2] = c.blue / 255;
  targetArray[atIndex + 3] = c.alpha;
}
function insertColorsIntoArray(stops, targetArray, atIndex) {
  var i = 0;
  if ('length' in stops) {
    while (i < stops.length) {
      insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
      i++;
    }
  } else {
    for (var offset in stops) {
      insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
      i++;
    }
  }
  return atIndex + i * 4;
}
function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
  var offsetNumber;
  var i = 0;
  if ('length' in stops) {
    while (i < stops.length) {
      offsetNumber = i / (stops.length - 1) * multi;
      targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
      i++;
    }
  } else {
    for (var offsetString in stops) {
      offsetNumber = +offsetString * multi;
      targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
      i++;
    }
  }
  return atIndex + i;
}
function insertColorStopsIntoArray(stops, targetArray, atIndex) {
  var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
  insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
}
function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
  var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
  lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
  lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
  insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
8f0896fb89220b933822c76ef0232441
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("react-native-get-random-values");
var _uuid = require("uuid");
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _jestCucumber = require("jest-cucumber");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var uuid = (0, _uuid.v4)();
var feature = (0, _jestCucumber.loadFeature)('./features/base.feature');
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
(0, _jestCucumber.defineFeature)(feature, function (test) {
  var mockQuizContext = {
    score: 7,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@chandu.com',
    setMail: jest.fn(),
    phone: '1234567890',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  test('User submits form with invalid email', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      and = _ref.and,
      then = _ref.then;
    test('User submits form with invalid email', function (_ref2) {
      var given = _ref2.given,
        when = _ref2.when,
        and = _ref2.and,
        then = _ref2.then;
      given('I am on the base screen', function () {});
      when(/^I enter an invalid email "(.*)"$/, function (arg0) {});
      and(/^I enter a valid name "(.*)"$/, function (arg0) {});
      and(/^I enter a valid phone number "(.*)"$/, function (arg0) {});
      and(/^I select "(.*)" as my preferred language$/, function (arg0) {});
      and(/^I select "(.*)" to track my score$/, function (arg0) {});
      and('I submit the form', function () {});
      then(/^I should see an error message "(.*)"$/, function (arg0) {});
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiX3V1aWQiLCJfZW56eW1lQWRhcHRlclJlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImVuenltZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX2plc3RDdWN1bWJlciIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJ1dWlkIiwidXVpZHY0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiY29uZmlndXJlIiwiYWRhcHRlciIsIkFkYXB0ZXIiLCJkZWZpbmVGZWF0dXJlIiwidGVzdCIsIm1vY2tRdWl6Q29udGV4dCIsInNjb3JlIiwic2V0U2NvcmUiLCJqZXN0IiwiZm4iLCJuYW1lIiwic2V0TmFtZSIsImVtYWlsIiwic2V0TWFpbCIsInBob25lIiwic2V0UGhvbmUiLCJzZWxlY3RlZFZhbHVlIiwic2V0U2VsZWN0ZWQiLCJ0cmFja1Njb3JlIiwic2V0VHJhY2tlciIsIl9yZWYiLCJnaXZlbiIsIndoZW4iLCJhbmQiLCJ0aGVuIiwiX3JlZjIiLCJhcmcwIl0sInNvdXJjZXMiOlsiYmFzZS5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtmaXJlRXZlbnQsIHJlbmRlciwgd2FpdEZvcn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgJ3JlYWN0LW5hdGl2ZS1nZXQtcmFuZG9tLXZhbHVlcyc7XHJcbmltcG9ydCB7djQgYXMgdXVpZHY0fSBmcm9tICd1dWlkJztcclxuaW1wb3J0IEFkYXB0ZXIgZnJvbSAnZW56eW1lLWFkYXB0ZXItcmVhY3QtMTYnO1xyXG5pbXBvcnQge21vdW50LCBzaGFsbG93fSBmcm9tICdlbnp5bWUnO1xyXG5pbXBvcnQgKiBhcyBlbnp5bWUgZnJvbSAnZW56eW1lJztcclxuaW1wb3J0IEJhc2UgZnJvbSAnLi4vLi4vQXBwcy9CYXNlJztcclxuaW1wb3J0IHtsb2FkRmVhdHVyZSwgZGVmaW5lRmVhdHVyZX0gZnJvbSAnamVzdC1jdWN1bWJlcic7XHJcbmltcG9ydCB7UXVpekNvbnRleHR9IGZyb20gJy4vLi4vLi4vQXBwcy9RdWl6Q29udGV4dCc7XHJcbmltcG9ydCB7VmlldywgVGV4dElucHV0fSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5jb25zdCB1dWlkID0gdXVpZHY0KCk7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZSgnLi9mZWF0dXJlcy9iYXNlLmZlYXR1cmUnKTtcclxuZW56eW1lLmNvbmZpZ3VyZSh7YWRhcHRlcjogbmV3IEFkYXB0ZXIoKX0pO1xyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsIHRlc3QgPT4ge1xyXG4gIGNvbnN0IG1vY2tRdWl6Q29udGV4dCA9IHtcclxuICAgIHNjb3JlOiA3LFxyXG4gICAgc2V0U2NvcmU6IGplc3QuZm4oKSxcclxuICAgIG5hbWU6ICdjaGFuZHUnLFxyXG4gICAgc2V0TmFtZTogamVzdC5mbigpLFxyXG4gICAgZW1haWw6ICdjaGFuZHJhQGNoYW5kdS5jb20nLFxyXG4gICAgc2V0TWFpbDogamVzdC5mbigpLFxyXG4gICAgcGhvbmU6ICcxMjM0NTY3ODkwJyxcclxuICAgIHNldFBob25lOiBqZXN0LmZuKCksXHJcbiAgICBzZWxlY3RlZFZhbHVlOiAnUmVhY3RKUycsXHJcbiAgICBzZXRTZWxlY3RlZDogamVzdC5mbigpLFxyXG4gICAgdHJhY2tTY29yZTogdHJ1ZSxcclxuICAgIHNldFRyYWNrZXI6IGplc3QuZm4oKSxcclxuICB9O1xyXG5cclxuICB0ZXN0KCdVc2VyIHN1Ym1pdHMgZm9ybSB3aXRoIGludmFsaWQgZW1haWwnLCAoe2dpdmVuLCB3aGVuLCBhbmQsIHRoZW59KSA9PiB7XHJcbiAgICB0ZXN0KCdVc2VyIHN1Ym1pdHMgZm9ybSB3aXRoIGludmFsaWQgZW1haWwnLCAoe2dpdmVuLCB3aGVuLCBhbmQsIHRoZW59KSA9PiB7XHJcbiAgICAgIGdpdmVuKCdJIGFtIG9uIHRoZSBiYXNlIHNjcmVlbicsICgpID0+IHt9KTtcclxuXHJcbiAgICAgIHdoZW4oL15JIGVudGVyIGFuIGludmFsaWQgZW1haWwgXCIoLiopXCIkLywgYXJnMCA9PiB7fSk7XHJcblxyXG4gICAgICBhbmQoL15JIGVudGVyIGEgdmFsaWQgbmFtZSBcIiguKilcIiQvLCBhcmcwID0+IHt9KTtcclxuXHJcbiAgICAgIGFuZCgvXkkgZW50ZXIgYSB2YWxpZCBwaG9uZSBudW1iZXIgXCIoLiopXCIkLywgYXJnMCA9PiB7fSk7XHJcblxyXG4gICAgICBhbmQoL15JIHNlbGVjdCBcIiguKilcIiBhcyBteSBwcmVmZXJyZWQgbGFuZ3VhZ2UkLywgYXJnMCA9PiB7fSk7XHJcblxyXG4gICAgICBhbmQoL15JIHNlbGVjdCBcIiguKilcIiB0byB0cmFjayBteSBzY29yZSQvLCBhcmcwID0+IHt9KTtcclxuXHJcbiAgICAgIGFuZCgnSSBzdWJtaXQgdGhlIGZvcm0nLCAoKSA9PiB7fSk7XHJcblxyXG4gICAgICB0aGVuKC9eSSBzaG91bGQgc2VlIGFuIGVycm9yIG1lc3NhZ2UgXCIoLiopXCIkLywgYXJnMCA9PiB7fSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IjtBQUNBQSxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsbUJBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUVBLElBQUFJLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUwsT0FBQTtBQUVBLElBQUFNLGFBQUEsR0FBQU4sT0FBQTtBQUF5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
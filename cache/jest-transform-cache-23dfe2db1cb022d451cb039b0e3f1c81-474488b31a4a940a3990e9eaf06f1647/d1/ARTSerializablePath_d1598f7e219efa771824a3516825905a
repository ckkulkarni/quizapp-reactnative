984a211833cbd70356cacec1b952edab
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _class = _interopRequireDefault(require("art/core/class"));
var _path = _interopRequireDefault(require("art/core/path"));
var MOVE_TO = 0;
var CLOSE = 1;
var LINE_TO = 2;
var CURVE_TO = 3;
var ARC = 4;
var SerializablePath = (0, _class.default)(_path.default, {
  initialize: function initialize(path) {
    this.reset();
    if (path instanceof SerializablePath) {
      this.path = path.path.slice(0);
    } else if (path) {
      this.push(path);
    }
  },
  onReset: function onReset() {
    this.path = [];
  },
  onMove: function onMove(sx, sy, x, y) {
    this.path.push(MOVE_TO, x, y);
  },
  onLine: function onLine(sx, sy, x, y) {
    this.path.push(LINE_TO, x, y);
  },
  onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
    this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
  },
  _arcToBezier: _path.default.prototype.onArc,
  onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
    if (rx !== ry || rotation) {
      return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
    }
    this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
  },
  onClose: function onClose() {
    this.path.push(CLOSE);
  },
  toJSON: function toJSON() {
    return this.path;
  }
});
var _default = SerializablePath;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY2xhc3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wYXRoIiwiTU9WRV9UTyIsIkNMT1NFIiwiTElORV9UTyIsIkNVUlZFX1RPIiwiQVJDIiwiU2VyaWFsaXphYmxlUGF0aCIsIkNsYXNzIiwiUGF0aCIsImluaXRpYWxpemUiLCJwYXRoIiwicmVzZXQiLCJzbGljZSIsInB1c2giLCJvblJlc2V0Iiwib25Nb3ZlIiwic3giLCJzeSIsIngiLCJ5Iiwib25MaW5lIiwib25CZXppZXJDdXJ2ZSIsInAxeCIsInAxeSIsInAyeCIsInAyeSIsIl9hcmNUb0JlemllciIsInByb3RvdHlwZSIsIm9uQXJjIiwiZXgiLCJleSIsImN4IiwiY3kiLCJyeCIsInJ5Iiwic2EiLCJlYSIsImNjdyIsInJvdGF0aW9uIiwib25DbG9zZSIsInRvSlNPTiIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwic291cmNlcyI6WyJBUlRTZXJpYWxpemFibGVQYXRoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgQ2xhc3MgZnJvbSAnYXJ0L2NvcmUvY2xhc3MnO1xuaW1wb3J0IFBhdGggZnJvbSAnYXJ0L2NvcmUvcGF0aCc7XG5cbmNvbnN0IE1PVkVfVE8gPSAwO1xuY29uc3QgQ0xPU0UgPSAxO1xuY29uc3QgTElORV9UTyA9IDI7XG5jb25zdCBDVVJWRV9UTyA9IDM7XG5jb25zdCBBUkMgPSA0O1xuXG4vLyBUT0RPOiBSZWZhY3RvciB0byBjbGFzc1xuY29uc3QgU2VyaWFsaXphYmxlUGF0aCA9IENsYXNzKFBhdGgsIHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ocGF0aDogc3RyaW5nIHwgU2VyaWFsaXphYmxlUGF0aCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgICBpZiAocGF0aCBpbnN0YW5jZW9mIFNlcmlhbGl6YWJsZVBhdGgpIHtcbiAgICAgIHRoaXMucGF0aCA9IHBhdGgucGF0aC5zbGljZSgwKTtcbiAgICB9IGVsc2UgaWYgKHBhdGgpIHtcbiAgICAgIHRoaXMucHVzaChwYXRoKTtcbiAgICB9XG4gIH0sXG5cbiAgb25SZXNldDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wYXRoID0gW107XG4gIH0sXG5cbiAgb25Nb3ZlOiBmdW5jdGlvbihzeDogbnVtYmVyLCBzeTogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIHRoaXMucGF0aC5wdXNoKE1PVkVfVE8sIHgsIHkpO1xuICB9LFxuXG4gIG9uTGluZTogZnVuY3Rpb24oc3g6IG51bWJlciwgc3k6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICB0aGlzLnBhdGgucHVzaChMSU5FX1RPLCB4LCB5KTtcbiAgfSxcblxuICBvbkJlemllckN1cnZlOiBmdW5jdGlvbihcbiAgICBzeDogbnVtYmVyLFxuICAgIHN5OiBudW1iZXIsXG4gICAgcDF4OiBudW1iZXIsXG4gICAgcDF5OiBudW1iZXIsXG4gICAgcDJ4OiBudW1iZXIsXG4gICAgcDJ5OiBudW1iZXIsXG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlcixcbiAgKSB7XG4gICAgdGhpcy5wYXRoLnB1c2goQ1VSVkVfVE8sIHAxeCwgcDF5LCBwMngsIHAyeSwgeCwgeSk7XG4gIH0sXG5cbiAgX2FyY1RvQmV6aWVyOiBQYXRoLnByb3RvdHlwZS5vbkFyYyxcblxuICBvbkFyYzogZnVuY3Rpb24oXG4gICAgc3g6IG51bWJlcixcbiAgICBzeTogbnVtYmVyLFxuICAgIGV4OiBudW1iZXIsXG4gICAgZXk6IG51bWJlcixcbiAgICBjeDogbnVtYmVyLFxuICAgIGN5OiBudW1iZXIsXG4gICAgcng6IG51bWJlcixcbiAgICByeTogbnVtYmVyLFxuICAgIHNhOiBudW1iZXIsXG4gICAgZWE6IG51bWJlcixcbiAgICBjY3c6IGJvb2xlYW4sXG4gICAgcm90YXRpb246IG51bWJlcixcbiAgKSB7XG4gICAgaWYgKHJ4ICE9PSByeSB8fCByb3RhdGlvbikge1xuICAgICAgcmV0dXJuIHRoaXMuX2FyY1RvQmV6aWVyKFxuICAgICAgICBzeCxcbiAgICAgICAgc3ksXG4gICAgICAgIGV4LFxuICAgICAgICBleSxcbiAgICAgICAgY3gsXG4gICAgICAgIGN5LFxuICAgICAgICByeCxcbiAgICAgICAgcnksXG4gICAgICAgIHNhLFxuICAgICAgICBlYSxcbiAgICAgICAgY2N3LFxuICAgICAgICByb3RhdGlvbixcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMucGF0aC5wdXNoKEFSQywgY3gsIGN5LCByeCwgc2EsIGVhLCBjY3cgPyAwIDogMSk7XG4gIH0sXG5cbiAgb25DbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wYXRoLnB1c2goQ0xPU0UpO1xuICB9LFxuXG4gIHRvSlNPTjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucGF0aDtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBTZXJpYWxpemFibGVQYXRoO1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQVNBLElBQUFBLE1BQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQU1FLE9BQU8sR0FBRyxDQUFDO0FBQ2pCLElBQU1DLEtBQUssR0FBRyxDQUFDO0FBQ2YsSUFBTUMsT0FBTyxHQUFHLENBQUM7QUFDakIsSUFBTUMsUUFBUSxHQUFHLENBQUM7QUFDbEIsSUFBTUMsR0FBRyxHQUFHLENBQUM7QUFHYixJQUFNQyxnQkFBZ0IsR0FBRyxJQUFBQyxjQUFLLEVBQUNDLGFBQUksRUFB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
58b49100e5eb15fda8264dbf543e527a
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Question = _interopRequireDefault(require("../Question1"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('Question 1 component', function () {
  var mockSetScore = jest.fn();
  var mockQuizContext = {
    trackScore: true,
    score: 0,
    setScore: mockSetScore,
    selectedValue: 'ReactJS'
  };
  var wrapper;
  beforeEach(function () {
    wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Question.default, {}));
    wrapper.setContext({
      QuizContext: mockQuizContext
    });
    jest.spyOn(_react.default, 'useContext').mockImplementation(function () {
      return mockQuizContext;
    });
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  it('the component renders properly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should render one question, and 5 answers for that quesiton', function () {
    expect(wrapper.find(_reactNative.Text).at(1).text()).toEqual('What is the extension used for TypeScript in ReactJS?');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9RdWVzdGlvbiIsIl9lbnp5bWVBZGFwdGVyUmVhY3QiLCJlbnp5bWUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9uYXRpdmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfcmVxdWlyZSIsImNvbmZpZ3VyZSIsImFkYXB0ZXIiLCJBZGFwdGVyIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwibW9ja1NldFNjb3JlIiwibW9ja1F1aXpDb250ZXh0IiwidHJhY2tTY29yZSIsInNjb3JlIiwic2V0U2NvcmUiLCJzZWxlY3RlZFZhbHVlIiwid3JhcHBlciIsImJlZm9yZUVhY2giLCJzaGFsbG93IiwianN4Iiwic2V0Q29udGV4dCIsIlF1aXpDb250ZXh0Iiwic3B5T24iLCJSZWFjdCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImFmdGVyRWFjaCIsInJlc3RvcmVBbGxNb2NrcyIsIml0IiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90IiwiZmluZCIsIlRleHQiLCJhdCIsInRleHQiLCJ0b0VxdWFsIl0sInNvdXJjZXMiOlsiUXVlc3Rpb24xLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBRdWVzdGlvbjEgZnJvbSAnLi4vUXVlc3Rpb24xJztcclxuaW1wb3J0IEFkYXB0ZXIgZnJvbSAnZW56eW1lLWFkYXB0ZXItcmVhY3QtMTYnO1xyXG5pbXBvcnQge3NoYWxsb3d9IGZyb20gJ2VuenltZSc7XHJcbmltcG9ydCAqIGFzIGVuenltZSBmcm9tICdlbnp5bWUnO1xyXG5pbXBvcnQge3VzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrL2xpYi90eXBlc2NyaXB0L3NyYy90eXBlcyc7XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7VGV4dH0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuZW56eW1lLmNvbmZpZ3VyZSh7YWRhcHRlcjogbmV3IEFkYXB0ZXIoKX0pO1xyXG5jb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcblxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdRdWVzdGlvbiAxIGNvbXBvbmVudCcsICgpID0+IHtcclxuICBjb25zdCBtb2NrU2V0U2NvcmUgPSBqZXN0LmZuKCk7XHJcbiAgY29uc3QgbW9ja1F1aXpDb250ZXh0ID0ge1xyXG4gICAgdHJhY2tTY29yZTogdHJ1ZSxcclxuICAgIHNjb3JlOiAwLFxyXG4gICAgc2V0U2NvcmU6IG1vY2tTZXRTY29yZSxcclxuICAgIHNlbGVjdGVkVmFsdWU6ICdSZWFjdEpTJyxcclxuICB9O1xyXG4gIGxldCB3cmFwcGVyOiBhbnk7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICB3cmFwcGVyID0gc2hhbGxvdyg8UXVlc3Rpb24xIC8+KTtcclxuICAgIHdyYXBwZXIuc2V0Q29udGV4dCh7UXVpekNvbnRleHQ6IG1vY2tRdWl6Q29udGV4dH0pO1xyXG4gICAgamVzdC5zcHlPbihSZWFjdCwgJ3VzZUNvbnRleHQnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja1F1aXpDb250ZXh0KTtcclxuICB9KTtcclxuICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3RoZSBjb21wb25lbnQgcmVuZGVycyBwcm9wZXJseScsICgpID0+IHtcclxuICAgIGV4cGVjdCh3cmFwcGVyKS50b01hdGNoU25hcHNob3QoKTtcclxuICB9KTtcclxuICBpdCgnc2hvdWxkIHJlbmRlciBvbmUgcXVlc3Rpb24sIGFuZCA1IGFuc3dlcnMgZm9yIHRoYXQgcXVlc2l0b24nLCAoKSA9PiB7XHJcbiAgICBleHBlY3Qod3JhcHBlci5maW5kKFRleHQpLmF0KDEpLnRleHQoKSkudG9FcXVhbChcclxuICAgICAgJ1doYXQgaXMgdGhlIGV4dGVuc2lvbiB1c2VkIGZvciBUeXBlU2NyaXB0IGluIFJlYWN0SlM/JyxcclxuICAgICk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQVdBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQzFDLE9BQU87SUFDTEMsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsRUFBRSxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFO0lBQ25CLENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUMsSUFBQUcsc0JBQUEsR0FBQUMsT0FB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
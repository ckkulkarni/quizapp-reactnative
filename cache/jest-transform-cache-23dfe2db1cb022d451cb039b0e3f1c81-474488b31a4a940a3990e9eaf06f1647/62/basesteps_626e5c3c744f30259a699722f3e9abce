6665843e22c03c10401d0ffc73bd67b3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
require("react-native-get-random-values");
var _uuid = require("uuid");
var _Base = _interopRequireDefault(require("../../Apps/Base"));
var _jestCucumber = require("jest-cucumber");
var _QuizContext = require("./../../Apps/QuizContext");
var _jsxRuntime = require("react/jsx-runtime");
var uuid = (0, _uuid.v4)();
var feature = (0, _jestCucumber.loadFeature)('./features/base.feature');
(0, _jestCucumber.defineFeature)(feature, function (test) {
  var mockQuizContext = {
    score: 7,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@chandu.com',
    setMail: jest.fn(),
    phone: '1234567890',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  test('user submits form with invalid mail', function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (_ref) {
      var given = _ref.given,
        when = _ref.when,
        then = _ref.then;
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_Base.default, {})
        }));
        expect(screen).toBeDefined();
      });
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }());
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX3V1aWQiLCJfQmFzZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfamVzdEN1Y3VtYmVyIiwiX1F1aXpDb250ZXh0IiwiX2pzeFJ1bnRpbWUiLCJ1dWlkIiwidXVpZHY0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJtb2NrUXVpekNvbnRleHQiLCJzY29yZSIsInNldFNjb3JlIiwiamVzdCIsImZuIiwibmFtZSIsInNldE5hbWUiLCJlbWFpbCIsInNldE1haWwiLCJwaG9uZSIsInNldFBob25lIiwic2VsZWN0ZWRWYWx1ZSIsInNldFNlbGVjdGVkIiwidHJhY2tTY29yZSIsInNldFRyYWNrZXIiLCJfcmVmMiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsImRlZmF1bHQiLCJfcmVmIiwiZ2l2ZW4iLCJ3aGVuIiwidGhlbiIsIndhaXRGb3IiLCJzY3JlZW4iLCJyZW5kZXIiLCJqc3giLCJRdWl6Q29udGV4dCIsIlByb3ZpZGVyIiwidmFsdWUiLCJjaGlsZHJlbiIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwiX3giLCJhcHBseSIsImFyZ3VtZW50cyJdLCJzb3VyY2VzIjpbImJhc2Uuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3J9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0ICdyZWFjdC1uYXRpdmUtZ2V0LXJhbmRvbS12YWx1ZXMnO1xyXG5pbXBvcnQge3Y0IGFzIHV1aWR2NH0gZnJvbSAndXVpZCc7XHJcblxyXG5pbXBvcnQgQmFzZSBmcm9tICcuLi8uLi9BcHBzL0Jhc2UnO1xyXG5pbXBvcnQge2xvYWRGZWF0dXJlLCBkZWZpbmVGZWF0dXJlfSBmcm9tICdqZXN0LWN1Y3VtYmVyJztcclxuaW1wb3J0IHtRdWl6Q29udGV4dH0gZnJvbSAnLi8uLi8uLi9BcHBzL1F1aXpDb250ZXh0JztcclxuY29uc3QgdXVpZCA9IHV1aWR2NCgpO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoJy4vZmVhdHVyZXMvYmFzZS5mZWF0dXJlJyk7XHJcblxyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsIHRlc3QgPT4ge1xyXG4gIGNvbnN0IG1vY2tRdWl6Q29udGV4dCA9IHtcclxuICAgIHNjb3JlOiA3LFxyXG4gICAgc2V0U2NvcmU6IGplc3QuZm4oKSxcclxuICAgIG5hbWU6ICdjaGFuZHUnLFxyXG4gICAgc2V0TmFtZTogamVzdC5mbigpLFxyXG4gICAgZW1haWw6ICdjaGFuZHJhQGNoYW5kdS5jb20nLFxyXG4gICAgc2V0TWFpbDogamVzdC5mbigpLFxyXG4gICAgcGhvbmU6ICcxMjM0NTY3ODkwJyxcclxuICAgIHNldFBob25lOiBqZXN0LmZuKCksXHJcbiAgICBzZWxlY3RlZFZhbHVlOiAnUmVhY3RKUycsXHJcbiAgICBzZXRTZWxlY3RlZDogamVzdC5mbigpLFxyXG4gICAgdHJhY2tTY29yZTogdHJ1ZSxcclxuICAgIHNldFRyYWNrZXI6IGplc3QuZm4oKSxcclxuICB9O1xyXG4gIHRlc3QoJ3VzZXIgc3VibWl0cyBmb3JtIHdpdGggaW52YWxpZCBtYWlsJywgYXN5bmMgKHtnaXZlbiwgd2hlbiwgdGhlbn0pID0+IHtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgPFF1aXpDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXttb2NrUXVpekNvbnRleHR9PlxyXG4gICAgICAgICAgPEJhc2UgLz5cclxuICAgICAgICA8L1F1aXpDb250ZXh0LlByb3ZpZGVyPixcclxuICAgICAgKTtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZURlZmluZWQoKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUFBLFlBQUEsR0FBQUMsT0FBQTtBQUNBQSxPQUFBO0FBQ0EsSUFBQUMsS0FBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsS0FBQSxHQUFBQyxzQkFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQUksYUFBQSxHQUFBSixPQUFBO0FBQ0EsSUFBQUssWUFBQSxHQUFBTCxPQUFBO0FBQXFELElBQUFNLFdBQUEsR0FBQU4sT0FBQTtBQUNyRCxJQUFNTyxJQUFJLEdBQUcsSUFBQUMsUUFBTSxHQUFFO0FBQ3JCLElBQU1DLE9BQU8sR0FBRyxJQUFBQyx5QkFBVyxFQUFDLHlCQUF5QixDQUFDO0FBRXRELElBQUFDLDJCQUFhLEVBQUNGLE9BQU8sRUFBRSxVQUFBRyxJQUFJLEVBQUk7RUFDN0IsSUFBTUMsZUFBZSxHQUFHO0lBQ3RCQyxLQUFLLEVBQUUsQ0FBQztJQUNSQyxRQUFRLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQ25CQyxJQUFJLEVBQUUsUUFBUTtJQUNkQyxPQUFPLEVBQUVILElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQ2xCRyxLQUFLLEVBQUUsb0JBQW9CO0lBQzNCQyxPQUFPLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQ2xCSyxLQUFLLEVBQUUsWUFBWTtJQUNuQkMsUUFBUSxFQUFFUCxJQUFJLENBQUNDLEVBQUUsRUFBRTtJQUNuQk8sYUFBYSxFQUFFLFNBQVM7SUFDeEJDLFdBQVcsRUFBRVQsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDdEJTLFVBQVUsRUFBRSxJQUFJO0lBQ2hCQyxVQUFVLEVBQUVYLElBQUksQ0FBQ0MsRUFBRTtFQUNyQixDQUFDO0VBQ0RMLElBQUksQ0FBQyxxQ0FBcUM7SUFBQSxJQUFBZ0IsS0FBQSxPQUFBQyxrQkFBQSxDQUFBQyxPQUFBLEVBQUUsV0FBQUMsSUFBQSxFQUErQjtNQUFBLElBQXZCQyxLQUFLLEdBQUFELElBQUEsQ0FBTEMsS0FBSztRQUFFQyxJQUFJLEdBQUFGLElBQUEsQ0FBSkUsSUFBSTtRQUFFQyxJQUFJLEdBQUFILElBQUEsQ0FBSkcsSUFBSTtNQUNuRSxNQUFNLElBQUFDLG9CQUFPLEVBQUMsWUFBTTtRQUNsQixJQUFNQyxNQUFNLEdBQUcsSUFBQUMsbUJBQU0sRUFDbkIsSUFBQS9CLFdBQUEsQ0FBQWdDLEdBQUEsRUFBQ2pDLFlBQUEsQ0FBQWtDLFdBQVcsQ0FBQ0MsUUFBUTtVQUFDQyxLQUFLLEVBQUU1QixlQUFnQjtVQUFBNkIsUUFBQSxFQUMzQyxJQUFBcEMsV0FBQSxDQUFBZ0MsR0FBQSxFQUFDcEMsS0FBQSxDQUFBNEIsT0FBSTtRQUFHLEVBQ2EsQ0FDeEI7UUFDRGEsTUFBTSxDQUFDUCxNQUFNLENBQUMsQ0FBQ1EsV0FBVyxFQUFFO01BQzlCLENBQUMsQ0FBQztJQUNKLENBQUM7SUFBQSxpQkFBQUMsRUFBQTtNQUFBLE9BQUFqQixLQUFBLENBQUFrQixLQUFBLE9BQUFDLFNBQUE7SUFBQTtFQUFBLElBQUM7QUFDSixDQUFDLENBQUMifQ==
0e5c1883dafd34e3a3aa5f97ce2fa605
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
require("react-native-get-random-values");
var _uuid = require("uuid");
var _jestCucumber = require("jest-cucumber");
var _QuizContext = require("./../../Apps/QuizContext");
var _reactNative2 = require("react-native");
var _native = require("@react-navigation/native");
var _Question = _interopRequireDefault(require("./../../Apps/Question5"));
var _reactNativeDraggable = _interopRequireDefault(require("react-native-draggable"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var uuid = (0, _uuid.v4)();
var navigation = (0, _native.useNavigation)();
var feature = (0, _jestCucumber.loadFeature)('./features/question5.feature');
(0, _jestCucumber.defineFeature)(feature, function (test) {
  var mockQuizContext = {
    score: 0,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@chandu.com',
    setMail: jest.fn(),
    phone: '1234567890',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  test('User answers Question 5 correctly', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    given('I am on the Question 5 screen', function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      expect(screen.getByTestId('question5-container')).toBeDefined();
    });
    when('I see the questions rendered properly', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_Question.default, {})
        }));
        expect(screen.getByTestId('question-0').props.children).toBe('_ is used to avoid prop-drilling.');
        expect(screen.getByTestId('question-1').props.children).toBe('ReactJS is a _ of Javascript.');
        expect(screen.getByTestId('question-2').props.children).toBe('_ are created using ReactJS.');
        expect(screen.getByTestId('question-3').props.children).toBe('_ is a third party ReactJS library called that is used to make API calls.');
        expect(screen.getByTestId('question-4').props.children).toBe('ReactJS uses _ DOM.');
      });
    }));
    and('I drag the correct answer to the blank space, and the answer is accepted', (0, _asyncToGenerator2.default)(function* () {
      var answers = [{
        id: 1,
        text: 'Answer 1'
      }, {
        id: 2,
        text: 'Answer 2'
      }, {
        id: 3,
        text: 'Answer 3'
      }];
      var questionPositions = [100, 200, 300];
      var handleAnswerDrop = jest.fn();
      var setSelectedAnswer = jest.fn();
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_reactNative2.View, {
          children: [(0, _jsxRuntime.jsxs)(_reactNative2.View, {
            children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Question 1"
            }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Question 2"
            }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Question 3"
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
            children: answers.map(function (answer) {
              return (0, _jsxRuntime.jsx)(_reactNative2.View, {
                children: (0, _jsxRuntime.jsx)(_reactNativeDraggable.default, {
                  onDrag: function onDrag() {
                    return setSelectedAnswer(answer.id);
                  },
                  onDragRelease: function onDragRelease(event, gestureState) {
                    var questionIndex = -1;
                    for (var i = 0; i < questionPositions.length; i++) {
                      if (gestureState.moveY < questionPositions[i]) {
                        questionIndex = i;
                        break;
                      }
                    }
                    if (questionIndex !== -1) {
                      handleAnswerDrop(answer.id, questionIndex);
                    }
                  },
                  children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
                    children: answer.text
                  })
                })
              }, answer.id);
            })
          })]
        })),
        getByText = _render.getByText,
        UNSAFE_queryAllByType = _render.UNSAFE_queryAllByType;
      var _ref4 = UNSAFE_queryAllByType(_reactNativeDraggable.default) || [],
        _ref5 = (0, _slicedToArray2.default)(_ref4, 1),
        draggableElement = _ref5[0];
      yield (0, _reactNative.fireEvent)(draggableElement, 'drag', {
        moveY: 105
      });
      expect(setSelectedAnswer).toBeCalled();
    }));
    then('I press the "Submit" button, and it should take me to the final submission screen', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_Question.default, {})
        }));
        _reactNative.fireEvent.press(screen.getByTestId('submitButton'));
        expect(navigation.navigate).toBeCalledWith('Final Score');
      });
    }));
  });
  test('User answers Question 5 incorrectly', function (_ref7) {
    var given = _ref7.given,
      when = _ref7.when,
      then = _ref7.then,
      and = _ref7.and;
    given('I am on the Question 5 screen', function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      expect(screen.getByTestId('question5-container')).toBeDefined();
    });
    when('I see the question rendered properly', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_Question.default, {})
        }));
        expect(screen.getByTestId('question-0').props.children).toBe('_ is used to avoid prop-drilling.');
        expect(screen.getByTestId('question-1').props.children).toBe('ReactJS is a _ of Javascript.');
        expect(screen.getByTestId('question-2').props.children).toBe('_ are created using ReactJS.');
        expect(screen.getByTestId('question-3').props.children).toBe('_ is a third party ReactJS library called that is used to make API calls.');
        expect(screen.getByTestId('question-4').props.children).toBe('ReactJS uses _ DOM.');
      });
    }));
    and('I drag an incorrect answer to the blank space, and the answer is rejected', (0, _asyncToGenerator2.default)(function* () {
      var answers = [{
        id: 1,
        text: 'Answer 1'
      }, {
        id: 2,
        text: 'Answer 2'
      }, {
        id: 3,
        text: 'Answer 3'
      }];
      var questionPositions = [100, 200, 300];
      var handleAnswerDrop = jest.fn();
      var setSelectedAnswer = jest.fn();
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_reactNative2.View, {
          children: [(0, _jsxRuntime.jsxs)(_reactNative2.View, {
            children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Question 1"
            }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Question 2"
            }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Question 3"
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
            children: answers.map(function (answer) {
              return (0, _jsxRuntime.jsx)(_reactNative2.View, {
                children: (0, _jsxRuntime.jsx)(_reactNativeDraggable.default, {
                  onDrag: function onDrag() {
                    return setSelectedAnswer(answer.id);
                  },
                  onDragRelease: function onDragRelease(event, gestureState) {
                    var questionIndex = -1;
                    for (var i = 0; i < questionPositions.length; i++) {
                      if (gestureState.moveY < questionPositions[i]) {
                        questionIndex = i;
                        break;
                      }
                    }
                    if (questionIndex !== -1) {
                      handleAnswerDrop(answer.id, questionIndex);
                    }
                  },
                  children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
                    children: answer.text
                  })
                })
              }, answer.id);
            })
          })]
        })),
        getByText = _render2.getByText,
        UNSAFE_queryAllByType = _render2.UNSAFE_queryAllByType;
      var _ref10 = UNSAFE_queryAllByType(_reactNativeDraggable.default) || [],
        _ref11 = (0, _slicedToArray2.default)(_ref10, 1),
        draggableElement = _ref11[0];
      yield (0, _reactNative.fireEvent)(draggableElement, 'drag', {
        moveY: 155
      });
      expect(setSelectedAnswer).toBeCalled();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zbGljZWRUb0FycmF5MiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdE5hdGl2ZSIsIl91dWlkIiwiX2plc3RDdWN1bWJlciIsIl9RdWl6Q29udGV4dCIsIl9yZWFjdE5hdGl2ZTIiLCJfbmF0aXZlIiwiX1F1ZXN0aW9uIiwiX3JlYWN0TmF0aXZlRHJhZ2dhYmxlIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsInV1aWQiLCJ1dWlkdjQiLCJuYXZpZ2F0aW9uIiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJtb2NrUXVpekNvbnRleHQiLCJzY29yZSIsInNldFNjb3JlIiwibmFtZSIsInNldE5hbWUiLCJlbWFpbCIsInNldE1haWwiLCJwaG9uZSIsInNldFBob25lIiwic2VsZWN0ZWRWYWx1ZSIsInNldFNlbGVjdGVkIiwidHJhY2tTY29yZSIsInNldFRyYWNrZXIiLCJfcmVmIiwiZ2l2ZW4iLCJ3aGVuIiwidGhlbiIsImFuZCIsInNjcmVlbiIsInJlbmRlciIsImpzeCIsIlF1aXpDb250ZXh0IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsImNoaWxkcmVuIiwiZGVmYXVsdCIsImV4cGVjdCIsImdldEJ5VGVzdElkIiwidG9CZURlZmluZWQiLCJ3YWl0Rm9yIiwicHJvcHMiLCJ0b0JlIiwiYW5zd2VycyIsImlkIiwidGV4dCIsInF1ZXN0aW9uUG9zaXRpb25zIiwiaGFuZGxlQW5zd2VyRHJvcCIsInNldFNlbGVjdGVkQW5zd2VyIiwiX3JlbmRlciIsImpzeHMiLCJWaWV3IiwiVGV4dCIsIm1hcCIsImFuc3dlciIsIm9uRHJhZyIsIm9uRHJhZ1JlbGVhc2UiLCJldmVudCIsImdlc3R1cmVTdGF0ZSIsInF1ZXN0aW9uSW5kZXgiLCJpIiwibGVuZ3RoIiwibW92ZVkiLCJnZXRCeVRleHQiLCJVTlNBRkVfcXVlcnlBbGxCeVR5cGUiLCJfcmVmNCIsIkRyYWdnYWJsZSIsIl9yZWY1IiwiZHJhZ2dhYmxlRWxlbWVudCIsImZpcmVFdmVudCIsInRvQmVDYWxsZWQiLCJwcmVzcyIsInRvQmVDYWxsZWRXaXRoIiwiX3JlZjciLCJfcmVuZGVyMiIsIl9yZWYxMCIsIl9yZWYxMSJdLCJzb3VyY2VzIjpbInF1ZXN0aW9uNS5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtmaXJlRXZlbnQsIHJlbmRlciwgd2FpdEZvcn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgJ3JlYWN0LW5hdGl2ZS1nZXQtcmFuZG9tLXZhbHVlcyc7XHJcbmltcG9ydCB7djQgYXMgdXVpZHY0fSBmcm9tICd1dWlkJztcclxuaW1wb3J0IHtsb2FkRmVhdHVyZSwgZGVmaW5lRmVhdHVyZX0gZnJvbSAnamVzdC1jdWN1bWJlcic7XHJcbmltcG9ydCB7UXVpekNvbnRleHR9IGZyb20gJy4vLi4vLi4vQXBwcy9RdWl6Q29udGV4dCc7XHJcbmltcG9ydCB7VmlldywgVGV4dCwgVGV4dElucHV0LCBCdXR0b259IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7dXNlTmF2aWdhdGlvbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2snO1xyXG5pbXBvcnQgUXVlc3Rpb241IGZyb20gJy4vLi4vLi4vQXBwcy9RdWVzdGlvbjUnO1xyXG5pbXBvcnQgRHJhZ2dhYmxlIGZyb20gJ3JlYWN0LW5hdGl2ZS1kcmFnZ2FibGUnO1xyXG5jb25zdCB1dWlkID0gdXVpZHY0KCk7XHJcblxyXG5jb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcblxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKCcuL2ZlYXR1cmVzL3F1ZXN0aW9uNS5mZWF0dXJlJyk7XHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgdGVzdCA9PiB7XHJcbiAgY29uc3QgbW9ja1F1aXpDb250ZXh0ID0ge1xyXG4gICAgc2NvcmU6IDAsXHJcbiAgICBzZXRTY29yZTogamVzdC5mbigpLFxyXG4gICAgbmFtZTogJ2NoYW5kdScsXHJcbiAgICBzZXROYW1lOiBqZXN0LmZuKCksXHJcbiAgICBlbWFpbDogJ2NoYW5kcmFAY2hhbmR1LmNvbScsXHJcbiAgICBzZXRNYWlsOiBqZXN0LmZuKCksXHJcbiAgICBwaG9uZTogJzEyMzQ1Njc4OTAnLFxyXG4gICAgc2V0UGhvbmU6IGplc3QuZm4oKSxcclxuICAgIHNlbGVjdGVkVmFsdWU6ICdSZWFjdEpTJyxcclxuICAgIHNldFNlbGVjdGVkOiBqZXN0LmZuKCksXHJcbiAgICB0cmFja1Njb3JlOiB0cnVlLFxyXG4gICAgc2V0VHJhY2tlcjogamVzdC5mbigpLFxyXG4gIH07XHJcbiAgdGVzdCgnVXNlciBhbnN3ZXJzIFF1ZXN0aW9uIDUgY29ycmVjdGx5JywgKHtnaXZlbiwgd2hlbiwgdGhlbiwgYW5kfSkgPT4ge1xyXG4gICAgZ2l2ZW4oJ0kgYW0gb24gdGhlIFF1ZXN0aW9uIDUgc2NyZWVuJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgPFF1aXpDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXttb2NrUXVpekNvbnRleHR9PlxyXG4gICAgICAgICAgPFF1ZXN0aW9uNSAvPlxyXG4gICAgICAgIDwvUXVpekNvbnRleHQuUHJvdmlkZXI+LFxyXG4gICAgICApO1xyXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbjUtY29udGFpbmVyJykpLnRvQmVEZWZpbmVkKCk7XHJcbiAgICB9KTtcclxuICAgIHdoZW4oJ0kgc2VlIHRoZSBxdWVzdGlvbnMgcmVuZGVyZWQgcHJvcGVybHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgICAgIDxRdWl6Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja1F1aXpDb250ZXh0fT5cclxuICAgICAgICAgICAgPFF1ZXN0aW9uNSAvPlxyXG4gICAgICAgICAgPC9RdWl6Q29udGV4dC5Qcm92aWRlcj4sXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi0wJykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnXyBpcyB1c2VkIHRvIGF2b2lkIHByb3AtZHJpbGxpbmcuJyxcclxuICAgICAgICApO1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3F1ZXN0aW9uLTEnKS5wcm9wcy5jaGlsZHJlbikudG9CZShcclxuICAgICAgICAgICdSZWFjdEpTIGlzIGEgXyBvZiBKYXZhc2NyaXB0LicsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi0yJykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnXyBhcmUgY3JlYXRlZCB1c2luZyBSZWFjdEpTLicsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi0zJykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnXyBpcyBhIHRoaXJkIHBhcnR5IFJlYWN0SlMgbGlicmFyeSBjYWxsZWQgdGhhdCBpcyB1c2VkIHRvIG1ha2UgQVBJIGNhbGxzLicsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi00JykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnUmVhY3RKUyB1c2VzIF8gRE9NLicsXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGFuZChcclxuICAgICAgJ0kgZHJhZyB0aGUgY29ycmVjdCBhbnN3ZXIgdG8gdGhlIGJsYW5rIHNwYWNlLCBhbmQgdGhlIGFuc3dlciBpcyBhY2NlcHRlZCcsXHJcbiAgICAgIGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCBhbnN3ZXJzID0gW1xyXG4gICAgICAgICAge2lkOiAxLCB0ZXh0OiAnQW5zd2VyIDEnfSxcclxuICAgICAgICAgIHtpZDogMiwgdGV4dDogJ0Fuc3dlciAyJ30sXHJcbiAgICAgICAgICB7aWQ6IDMsIHRleHQ6ICdBbnN3ZXIgMyd9LFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgY29uc3QgcXVlc3Rpb25Qb3NpdGlvbnMgPSBbMTAwLCAyMDAsIDMwMF07XHJcbiAgICAgICAgY29uc3QgaGFuZGxlQW5zd2VyRHJvcCA9IGplc3QuZm4oKTtcclxuICAgICAgICBjb25zdCBzZXRTZWxlY3RlZEFuc3dlciA9IGplc3QuZm4oKTtcclxuICAgICAgICBjb25zdCB7Z2V0QnlUZXh0LCBVTlNBRkVfcXVlcnlBbGxCeVR5cGV9ID0gcmVuZGVyKFxyXG4gICAgICAgICAgPFZpZXc+XHJcbiAgICAgICAgICAgIDxWaWV3PlxyXG4gICAgICAgICAgICAgIDxUZXh0PlF1ZXN0aW9uIDE8L1RleHQ+XHJcbiAgICAgICAgICAgICAgPFRleHQ+UXVlc3Rpb24gMjwvVGV4dD5cclxuICAgICAgICAgICAgICA8VGV4dD5RdWVzdGlvbiAzPC9UZXh0PlxyXG4gICAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICAgIDxWaWV3PlxyXG4gICAgICAgICAgICAgIHthbnN3ZXJzLm1hcChhbnN3ZXIgPT4gKFxyXG4gICAgICAgICAgICAgICAgPFZpZXcga2V5PXthbnN3ZXIuaWR9PlxyXG4gICAgICAgICAgICAgICAgICA8RHJhZ2dhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgb25EcmFnPXsoKSA9PiBzZXRTZWxlY3RlZEFuc3dlcihhbnN3ZXIuaWQpfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uRHJhZ1JlbGVhc2U9eyhldmVudCwgZ2VzdHVyZVN0YXRlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgcXVlc3Rpb25JbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWVzdGlvblBvc2l0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2VzdHVyZVN0YXRlLm1vdmVZIDwgcXVlc3Rpb25Qb3NpdGlvbnNbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbkluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uSW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUFuc3dlckRyb3AoYW5zd2VyLmlkLCBxdWVzdGlvbkluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgICAgICA8VGV4dD57YW5zd2VyLnRleHR9PC9UZXh0PlxyXG4gICAgICAgICAgICAgICAgICA8L0RyYWdnYWJsZT5cclxuICAgICAgICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICAgICAgICApKX1cclxuICAgICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICAgPC9WaWV3PixcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IFtkcmFnZ2FibGVFbGVtZW50XSA9IFVOU0FGRV9xdWVyeUFsbEJ5VHlwZShEcmFnZ2FibGUpIHx8IFtdO1xyXG4gICAgICAgIGF3YWl0IGZpcmVFdmVudChkcmFnZ2FibGVFbGVtZW50LCAnZHJhZycsIHtcclxuICAgICAgICAgIG1vdmVZOiAxMDUsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZXhwZWN0KHNldFNlbGVjdGVkQW5zd2VyKS50b0JlQ2FsbGVkKCk7XHJcbiAgICAgIH0sXHJcbiAgICApO1xyXG4gICAgdGhlbihcclxuICAgICAgJ0kgcHJlc3MgdGhlIFwiU3VibWl0XCIgYnV0dG9uLCBhbmQgaXQgc2hvdWxkIHRha2UgbWUgdG8gdGhlIGZpbmFsIHN1Ym1pc3Npb24gc2NyZWVuJyxcclxuICAgICAgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICAgICAgICA8UXVpekNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e21vY2tRdWl6Q29udGV4dH0+XHJcbiAgICAgICAgICAgICAgPFF1ZXN0aW9uNSAvPlxyXG4gICAgICAgICAgICA8L1F1aXpDb250ZXh0LlByb3ZpZGVyPixcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGVzdElkKCdzdWJtaXRCdXR0b24nKSk7XHJcblxyXG4gICAgICAgICAgZXhwZWN0KG5hdmlnYXRpb24ubmF2aWdhdGUpLnRvQmVDYWxsZWRXaXRoKCdGaW5hbCBTY29yZScpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9LFxyXG4gICAgKTtcclxuICB9KTtcclxuICB0ZXN0KCdVc2VyIGFuc3dlcnMgUXVlc3Rpb24gNSBpbmNvcnJlY3RseScsICh7Z2l2ZW4sIHdoZW4sIHRoZW4sIGFuZH0pID0+IHtcclxuICAgIGdpdmVuKCdJIGFtIG9uIHRoZSBRdWVzdGlvbiA1IHNjcmVlbicsICgpID0+IHtcclxuICAgICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICAgIDxRdWl6Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja1F1aXpDb250ZXh0fT5cclxuICAgICAgICAgIDxRdWVzdGlvbjUgLz5cclxuICAgICAgICA8L1F1aXpDb250ZXh0LlByb3ZpZGVyPixcclxuICAgICAgKTtcclxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgncXVlc3Rpb241LWNvbnRhaW5lcicpKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCdJIHNlZSB0aGUgcXVlc3Rpb24gcmVuZGVyZWQgcHJvcGVybHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgICAgIDxRdWl6Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja1F1aXpDb250ZXh0fT5cclxuICAgICAgICAgICAgPFF1ZXN0aW9uNSAvPlxyXG4gICAgICAgICAgPC9RdWl6Q29udGV4dC5Qcm92aWRlcj4sXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi0wJykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnXyBpcyB1c2VkIHRvIGF2b2lkIHByb3AtZHJpbGxpbmcuJyxcclxuICAgICAgICApO1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3F1ZXN0aW9uLTEnKS5wcm9wcy5jaGlsZHJlbikudG9CZShcclxuICAgICAgICAgICdSZWFjdEpTIGlzIGEgXyBvZiBKYXZhc2NyaXB0LicsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi0yJykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnXyBhcmUgY3JlYXRlZCB1c2luZyBSZWFjdEpTLicsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi0zJykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnXyBpcyBhIHRoaXJkIHBhcnR5IFJlYWN0SlMgbGlicmFyeSBjYWxsZWQgdGhhdCBpcyB1c2VkIHRvIG1ha2UgQVBJIGNhbGxzLicsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi00JykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnUmVhY3RKUyB1c2VzIF8gRE9NLicsXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGFuZChcclxuICAgICAgJ0kgZHJhZyBhbiBpbmNvcnJlY3QgYW5zd2VyIHRvIHRoZSBibGFuayBzcGFjZSwgYW5kIHRoZSBhbnN3ZXIgaXMgcmVqZWN0ZWQnLFxyXG4gICAgICBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYW5zd2VycyA9IFtcclxuICAgICAgICAgIHtpZDogMSwgdGV4dDogJ0Fuc3dlciAxJ30sXHJcbiAgICAgICAgICB7aWQ6IDIsIHRleHQ6ICdBbnN3ZXIgMid9LFxyXG4gICAgICAgICAge2lkOiAzLCB0ZXh0OiAnQW5zd2VyIDMnfSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IHF1ZXN0aW9uUG9zaXRpb25zID0gWzEwMCwgMjAwLCAzMDBdO1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZUFuc3dlckRyb3AgPSBqZXN0LmZuKCk7XHJcbiAgICAgICAgY29uc3Qgc2V0U2VsZWN0ZWRBbnN3ZXIgPSBqZXN0LmZuKCk7XHJcbiAgICAgICAgY29uc3Qge2dldEJ5VGV4dCwgVU5TQUZFX3F1ZXJ5QWxsQnlUeXBlfSA9IHJlbmRlcihcclxuICAgICAgICAgIDxWaWV3PlxyXG4gICAgICAgICAgICA8Vmlldz5cclxuICAgICAgICAgICAgICA8VGV4dD5RdWVzdGlvbiAxPC9UZXh0PlxyXG4gICAgICAgICAgICAgIDxUZXh0PlF1ZXN0aW9uIDI8L1RleHQ+XHJcbiAgICAgICAgICAgICAgPFRleHQ+UXVlc3Rpb24gMzwvVGV4dD5cclxuICAgICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICAgICA8Vmlldz5cclxuICAgICAgICAgICAgICB7YW5zd2Vycy5tYXAoYW5zd2VyID0+IChcclxuICAgICAgICAgICAgICAgIDxWaWV3IGtleT17YW5zd2VyLmlkfT5cclxuICAgICAgICAgICAgICAgICAgPERyYWdnYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIG9uRHJhZz17KCkgPT4gc2V0U2VsZWN0ZWRBbnN3ZXIoYW5zd2VyLmlkKX1cclxuICAgICAgICAgICAgICAgICAgICBvbkRyYWdSZWxlYXNlPXsoZXZlbnQsIGdlc3R1cmVTdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgbGV0IHF1ZXN0aW9uSW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVlc3Rpb25Qb3NpdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdlc3R1cmVTdGF0ZS5tb3ZlWSA8IHF1ZXN0aW9uUG9zaXRpb25zW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25JbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvbkluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVBbnN3ZXJEcm9wKGFuc3dlci5pZCwgcXVlc3Rpb25JbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRleHQ+e2Fuc3dlci50ZXh0fTwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XHJcbiAgICAgICAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICAgIDwvVmlldz4sXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBbZHJhZ2dhYmxlRWxlbWVudF0gPSBVTlNBRkVfcXVlcnlBbGxCeVR5cGUoRHJhZ2dhYmxlKSB8fCBbXTtcclxuICAgICAgICBhd2FpdCBmaXJlRXZlbnQoZHJhZ2dhYmxlRWxlbWVudCwgJ2RyYWcnLCB7XHJcbiAgICAgICAgICBtb3ZlWTogMTU1LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdChzZXRTZWxlY3RlZEFuc3dlcikudG9CZUNhbGxlZCgpO1xyXG4gICAgICB9LFxyXG4gICAgKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBY0FBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQU07RUFDMUMsT0FBTztJQUNMQyxhQUFhLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxFQUFFLENBQUNDLGVBQWUsQ0FBQztNQUN2Q0MsUUFBUSxFQUFFSCxJQUFJLENBQUNDLEVBQUU7SUFDbkIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQyxJQUFBRyxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZUFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsa0JBQUEsR0FBQUgsc0JB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
{"version":3,"names":["_getJestObj","mock","useNavigation","jest","fn","mockReturnValue","navigate","_interopRequireDefault","require","_asyncToGenerator2","_reactNative","_uuid","_jestCucumber","_QuizContext","_native","_Question","_jsxRuntime","_require","uuid","uuidv4","feature","loadFeature","navigation","defineFeature","test","mockQuizContext","score","setScore","name","setName","email","setMail","phone","setPhone","selectedValue","setSelected","trackScore","setTracker","_ref","given","when","then","and","screen","render","jsx","QuizContext","Provider","value","children","default","expect","getByTestId","toBeDefined","fireEvent","press","toBeCalledWith","waitFor","_ref3"],"sources":["question1.steps.tsx"],"sourcesContent":["import {fireEvent, render, waitFor} from '@testing-library/react-native';\r\nimport 'react-native-get-random-values';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {loadFeature, defineFeature} from 'jest-cucumber';\r\nimport {QuizContext} from './../../Apps/QuizContext';\r\nimport {View, TextInput, Button} from 'react-native';\r\nimport {useNavigation} from '@react-navigation/native';\r\nimport {NativeStackNavigationProp} from '@react-navigation/native-stack';\r\nimport Question1 from './../../Apps/Question1';\r\nconst uuid = uuidv4();\r\nconst feature = loadFeature('./features/question1.feature');\r\nconst navigation = useNavigation<NativeStackNavigationProp<any>>();\r\n\r\njest.mock('@react-navigation/native', () => {\r\n  return {\r\n    useNavigation: jest.fn().mockReturnValue({\r\n      navigate: jest.fn(),\r\n    }),\r\n  };\r\n});\r\ndefineFeature(feature, test => {\r\n  const mockQuizContext = {\r\n    score: 7,\r\n    setScore: jest.fn(),\r\n    name: 'chandu',\r\n    setName: jest.fn(),\r\n    email: 'chandra@chandu.com',\r\n    setMail: jest.fn(),\r\n    phone: '1234567890',\r\n    setPhone: jest.fn(),\r\n    selectedValue: 'ReactJS',\r\n    setSelected: jest.fn(),\r\n    trackScore: true,\r\n    setTracker: jest.fn(),\r\n  };\r\n  test('User answers first quiz question correctly', ({\r\n    given,\r\n    when,\r\n    then,\r\n    and,\r\n  }) => {\r\n    given('I am on the Question 1 screen', () => {\r\n      const screen = render(\r\n        <QuizContext.Provider value={mockQuizContext}>\r\n          <Question1 />\r\n        </QuizContext.Provider>,\r\n      );\r\n      expect(screen.getByTestId('questionContainer')).toBeDefined();\r\n    });\r\n    when(\r\n      'I select the correct answer and press \"Answer\", then the score should update',\r\n      () => {\r\n        const screen = render(\r\n          <QuizContext.Provider value={mockQuizContext}>\r\n            <Question1 />\r\n          </QuizContext.Provider>,\r\n        );\r\n        fireEvent.press(screen.getByTestId('answer-0'));\r\n        fireEvent.press(screen.getByTestId('answerButton'));\r\n        expect(mockQuizContext.setScore).toBeCalledWith(1);\r\n      },\r\n    );\r\n    then(\r\n      'I navigate to the next question when I click on the \"Next Question\" button',\r\n      async () => {\r\n        await waitFor(() => {\r\n          const screen = render(\r\n            <QuizContext.Provider value={mockQuizContext}>\r\n              <Question1 />\r\n            </QuizContext.Provider>,\r\n          );\r\n          fireEvent.press(screen.getByTestId('question2'));\r\n          expect(navigation.navigate).toBeCalledWith('Question 2');\r\n        });\r\n      },\r\n    );\r\n  });\r\n  test('User answers first quiz question incorrectly', ({\r\n    given,\r\n    when,\r\n    then,\r\n    and,\r\n  }) => {\r\n    given('I am on the Question 1 screen', () => {\r\n      const screen = render(\r\n        <QuizContext.Provider value={mockQuizContext}>\r\n          <Question1 />\r\n        </QuizContext.Provider>,\r\n      );\r\n      expect(screen.getByTestId('questionContainer')).toBeDefined();\r\n    });\r\n    when(\r\n      'I select an incorrect answer and press \"Answer\", then the score should remain the same',\r\n      () => {\r\n        const screen = render(\r\n          <QuizContext.Provider value={mockQuizContext}>\r\n            <Question1 />\r\n          </QuizContext.Provider>,\r\n        );\r\n        fireEvent.press(screen.getByTestId('answer-2'));\r\n        fireEvent.press(screen.getByTestId('answerButton'));\r\n        expect(mockQuizContext.setScore).toBeCalledWith(0);\r\n      },\r\n    );\r\n  });\r\n});\r\n"],"mappings":"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"}
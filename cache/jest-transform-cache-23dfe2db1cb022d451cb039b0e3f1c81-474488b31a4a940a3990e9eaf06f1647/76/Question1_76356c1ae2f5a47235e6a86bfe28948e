d5fb3939b201ddca0856cea47128525d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Question1;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _QuizContext = require("./QuizContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Question1() {
  var _useContext = (0, _react.useContext)(_QuizContext.QuizContext),
    trackScore = _useContext.trackScore,
    score = _useContext.score,
    setScore = _useContext.setScore,
    selectedValue = _useContext.selectedValue;
  var navigation = (0, _native.useNavigation)();
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selectedIndex = _useState2[0],
    setIndex = _useState2[1];
  var currentScore = score;
  var maxScore = 9;
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    submitted = _useState4[0],
    setSubmit = _useState4[1];
  var questionText = '';
  var options = [];
  if (selectedValue == 'ReactJS') {
    questionText = 'What is the extension used for TypeScript in ReactJS?';
    options = ['.tsx', '.jsx', '.js', '.java'];
  } else if (selectedValue == 'React Native') {
    questionText = 'What are the simpler of the two CLIs used to create React Native Apps?';
    options = ['Expo CLI', 'React Native CLI'];
  } else if (selectedValue == 'JavaScript') {
    questionText = 'Inside which HTML element do we put the JavaScript?';
    options = ['<javascript>', '<script>', '<js>', '<scripting>'];
  } else if (selectedValue == 'Java') {
    questionText = 'In Java, the class name should always be different from file name. True or False?';
    options = ['True', 'False'];
  }
  var handleOptionPress = function handleOptionPress(index) {
    setIndex(index);
  };
  var handleAnswerCheck = function handleAnswerCheck() {
    setSubmit(true);
    if (selectedValue == 'ReactJS') {
      if (selectedIndex === 0 && score < maxScore) {
        setScore(score + 1);
      } else {
        setScore(currentScore);
      }
    } else if (selectedValue == 'React Native' && score < maxScore) {
      if (selectedIndex === 0) {
        setScore(score + 1);
      } else {
        setScore(currentScore);
      }
    } else if (selectedValue == 'JavaScript' && score < maxScore) {
      if (selectedIndex === 1) {
        setScore(score + 1);
      } else {
        setScore(currentScore);
      }
    } else if (selectedValue == 'Java' && score < maxScore) {
      if (selectedIndex === 1) {
        setScore(score + 1);
      } else {
        setScore(currentScore);
      }
    }
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.questionNavigation,
      children: ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5'].map(function (question, index) {
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            return navigation.navigate(question);
          },
          style: styles.navigationTouchable,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.navigationText,
            children: index + 1
          })
        }, index);
      })
    }), trackScore && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      testID: "score",
      children: ["Score: ", score]
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        fontSize: 20,
        color: 'black'
      },
      testID: "questionID",
      children: questionText
    }), options.map(function (option, index) {
      return (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
        style: [styles.optionStyling, selectedIndex === index && styles.selectedOption],
        onPress: function onPress() {
          return handleOptionPress(index);
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          testID: "answer-" + index,
          children: option.toString()
        })
      }, index);
    }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
      title: "Answer",
      onPress: handleAnswerCheck,
      disabled: submitted
    }), selectedIndex !== null && (0, _jsxRuntime.jsx)(_reactNative.Button, {
      title: "Next Question",
      onPress: function onPress() {
        return navigation.navigate('Question 2');
      }
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  optionStyling: {
    backgroundColor: '#00A1E4',
    padding: 10,
    borderRadius: 20,
    marginTop: 6,
    marginBottom: 10,
    width: '70%'
  },
  selectedOption: {
    backgroundColor: '#CC3F0C'
  },
  questionNavigation: {
    display: 'flex',
    flexDirection: 'row',
    flexWrap: 'wrap',
    position: 'absolute',
    top: 0
  },
  navigationTouchable: {
    backgroundColor: '#FEB95F',
    padding: 3,
    marginHorizontal: 7,
    borderWidth: 1,
    borderColor: 'black',
    borderRadius: 100,
    height: 30,
    width: 30,
    marginVertical: 20
  },
  navigationText: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 3
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfbmF0aXZlIiwiX1F1aXpDb250ZXh0IiwiX2pzeFJ1bnRpbWUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiUXVlc3Rpb24xIiwiX3VzZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwiUXVpekNvbnRleHQiLCJ0cmFja1Njb3JlIiwic2NvcmUiLCJzZXRTY29yZSIsInNlbGVjdGVkVmFsdWUiLCJuYXZpZ2F0aW9uIiwidXNlTmF2aWdhdGlvbiIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsInNlbGVjdGVkSW5kZXgiLCJzZXRJbmRleCIsImN1cnJlbnRTY29yZSIsIm1heFNjb3JlIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJzdWJtaXR0ZWQiLCJzZXRTdWJtaXQiLCJxdWVzdGlvblRleHQiLCJvcHRpb25zIiwiaGFuZGxlT3B0aW9uUHJlc3MiLCJpbmRleCIsImhhbmRsZUFuc3dlckNoZWNrIiwianN4cyIsIlZpZXciLCJzdHlsZSIsInN0eWxlcyIsImNvbnRhaW5lciIsImNoaWxkcmVuIiwianN4IiwicXVlc3Rpb25OYXZpZ2F0aW9uIiwibWFwIiwicXVlc3Rpb24iLCJUb3VjaGFibGVPcGFjaXR5Iiwib25QcmVzcyIsIm5hdmlnYXRlIiwibmF2aWdhdGlvblRvdWNoYWJsZSIsIlRleHQiLCJuYXZpZ2F0aW9uVGV4dCIsInRlc3RJRCIsImZvbnRTaXplIiwiY29sb3IiLCJvcHRpb24iLCJQcmVzc2FibGUiLCJvcHRpb25TdHlsaW5nIiwic2VsZWN0ZWRPcHRpb24iLCJ0b1N0cmluZyIsIkJ1dHRvbiIsInRpdGxlIiwiZGlzYWJsZWQiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZmxleCIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImJhY2tncm91bmRDb2xvciIsInBhZGRpbmciLCJib3JkZXJSYWRpdXMiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJ3aWR0aCIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwiZmxleFdyYXAiLCJwb3NpdGlvbiIsInRvcCIsIm1hcmdpbkhvcml6b250YWwiLCJib3JkZXJXaWR0aCIsImJvcmRlckNvbG9yIiwiaGVpZ2h0IiwibWFyZ2luVmVydGljYWwiLCJtYXJnaW5MZWZ0Il0sInNvdXJjZXMiOlsiUXVlc3Rpb24xLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHt1c2VDb250ZXh0LCB1c2VTdGF0ZX0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge1xyXG4gIFRleHQsXHJcbiAgVmlldyxcclxuICBCdXR0b24sXHJcbiAgUHJlc3NhYmxlLFxyXG4gIFN0eWxlU2hlZXQsXHJcbiAgVG91Y2hhYmxlT3BhY2l0eSxcclxufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQge3VzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrL2xpYi90eXBlc2NyaXB0L3NyYy90eXBlcyc7XHJcbmltcG9ydCB7UXVpekNvbnRleHR9IGZyb20gJy4vUXVpekNvbnRleHQnO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBRdWVzdGlvbjEoKSB7XHJcbiAgY29uc3Qge3RyYWNrU2NvcmUsIHNjb3JlLCBzZXRTY29yZSwgc2VsZWN0ZWRWYWx1ZX0gPSB1c2VDb250ZXh0KFF1aXpDb250ZXh0KTtcclxuICBjb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcbiAgY29uc3QgW3NlbGVjdGVkSW5kZXgsIHNldEluZGV4XSA9IHVzZVN0YXRlPG51bWJlcj4oKTtcclxuICBjb25zdCBjdXJyZW50U2NvcmUgPSBzY29yZTtcclxuICBjb25zdCBtYXhTY29yZSA9IDk7XHJcbiAgY29uc3QgW3N1Ym1pdHRlZCwgc2V0U3VibWl0XSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcclxuICBsZXQgcXVlc3Rpb25UZXh0ID0gJyc7XHJcbiAgbGV0IG9wdGlvbnM6IGFueVtdID0gW107XHJcbiAgaWYgKHNlbGVjdGVkVmFsdWUgPT0gJ1JlYWN0SlMnKSB7XHJcbiAgICBxdWVzdGlvblRleHQgPSAnV2hhdCBpcyB0aGUgZXh0ZW5zaW9uIHVzZWQgZm9yIFR5cGVTY3JpcHQgaW4gUmVhY3RKUz8nO1xyXG4gICAgb3B0aW9ucyA9IFsnLnRzeCcsICcuanN4JywgJy5qcycsICcuamF2YSddO1xyXG4gIH0gZWxzZSBpZiAoc2VsZWN0ZWRWYWx1ZSA9PSAnUmVhY3QgTmF0aXZlJykge1xyXG4gICAgcXVlc3Rpb25UZXh0ID1cclxuICAgICAgJ1doYXQgYXJlIHRoZSBzaW1wbGVyIG9mIHRoZSB0d28gQ0xJcyB1c2VkIHRvIGNyZWF0ZSBSZWFjdCBOYXRpdmUgQXBwcz8nO1xyXG4gICAgb3B0aW9ucyA9IFsnRXhwbyBDTEknLCAnUmVhY3QgTmF0aXZlIENMSSddO1xyXG4gIH0gZWxzZSBpZiAoc2VsZWN0ZWRWYWx1ZSA9PSAnSmF2YVNjcmlwdCcpIHtcclxuICAgIHF1ZXN0aW9uVGV4dCA9ICdJbnNpZGUgd2hpY2ggSFRNTCBlbGVtZW50IGRvIHdlIHB1dCB0aGUgSmF2YVNjcmlwdD8nO1xyXG4gICAgb3B0aW9ucyA9IFsnPGphdmFzY3JpcHQ+JywgJzxzY3JpcHQ+JywgJzxqcz4nLCAnPHNjcmlwdGluZz4nXTtcclxuICB9IGVsc2UgaWYgKHNlbGVjdGVkVmFsdWUgPT0gJ0phdmEnKSB7XHJcbiAgICBxdWVzdGlvblRleHQgPVxyXG4gICAgICAnSW4gSmF2YSwgdGhlIGNsYXNzIG5hbWUgc2hvdWxkIGFsd2F5cyBiZSBkaWZmZXJlbnQgZnJvbSBmaWxlIG5hbWUuIFRydWUgb3IgRmFsc2U/JztcclxuICAgIG9wdGlvbnMgPSBbJ1RydWUnLCAnRmFsc2UnXTtcclxuICB9XHJcbiAgY29uc3QgaGFuZGxlT3B0aW9uUHJlc3MgPSAoaW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgc2V0SW5kZXgoaW5kZXgpO1xyXG4gIH07XHJcbiAgY29uc3QgaGFuZGxlQW5zd2VyQ2hlY2sgPSAoKSA9PiB7XHJcbiAgICBzZXRTdWJtaXQodHJ1ZSk7XHJcbiAgICBpZiAoc2VsZWN0ZWRWYWx1ZSA9PSAnUmVhY3RKUycpIHtcclxuICAgICAgaWYgKHNlbGVjdGVkSW5kZXggPT09IDAgJiYgc2NvcmUgPCBtYXhTY29yZSkge1xyXG4gICAgICAgIHNldFNjb3JlKHNjb3JlICsgMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0U2NvcmUoY3VycmVudFNjb3JlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChzZWxlY3RlZFZhbHVlID09ICdSZWFjdCBOYXRpdmUnICYmIHNjb3JlIDwgbWF4U2NvcmUpIHtcclxuICAgICAgaWYgKHNlbGVjdGVkSW5kZXggPT09IDApIHtcclxuICAgICAgICBzZXRTY29yZShzY29yZSArIDEpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNldFNjb3JlKGN1cnJlbnRTY29yZSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRWYWx1ZSA9PSAnSmF2YVNjcmlwdCcgJiYgc2NvcmUgPCBtYXhTY29yZSkge1xyXG4gICAgICBpZiAoc2VsZWN0ZWRJbmRleCA9PT0gMSkge1xyXG4gICAgICAgIHNldFNjb3JlKHNjb3JlICsgMSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2V0U2NvcmUoY3VycmVudFNjb3JlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChzZWxlY3RlZFZhbHVlID09ICdKYXZhJyAmJiBzY29yZSA8IG1heFNjb3JlKSB7XHJcbiAgICAgIGlmIChzZWxlY3RlZEluZGV4ID09PSAxKSB7XHJcbiAgICAgICAgc2V0U2NvcmUoc2NvcmUgKyAxKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZXRTY29yZShjdXJyZW50U2NvcmUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfT5cclxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5xdWVzdGlvbk5hdmlnYXRpb259PlxyXG4gICAgICAgIHtbXHJcbiAgICAgICAgICAnUXVlc3Rpb24gMScsXHJcbiAgICAgICAgICAnUXVlc3Rpb24gMicsXHJcbiAgICAgICAgICAnUXVlc3Rpb24gMycsXHJcbiAgICAgICAgICAnUXVlc3Rpb24gNCcsXHJcbiAgICAgICAgICAnUXVlc3Rpb24gNScsXHJcbiAgICAgICAgXS5tYXAoKHF1ZXN0aW9uLCBpbmRleCkgPT4gKFxyXG4gICAgICAgICAgPFRvdWNoYWJsZU9wYWNpdHlcclxuICAgICAgICAgICAga2V5PXtpbmRleH1cclxuICAgICAgICAgICAgb25QcmVzcz17KCkgPT4gbmF2aWdhdGlvbi5uYXZpZ2F0ZShxdWVzdGlvbil9XHJcbiAgICAgICAgICAgIHN0eWxlPXtzdHlsZXMubmF2aWdhdGlvblRvdWNoYWJsZX0+XHJcbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMubmF2aWdhdGlvblRleHR9PntpbmRleCArIDF9PC9UZXh0PlxyXG4gICAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgICAgICkpfVxyXG4gICAgICA8L1ZpZXc+XHJcbiAgICAgIHt0cmFja1Njb3JlICYmIDxUZXh0IHRlc3RJRD1cInNjb3JlXCI+U2NvcmU6IHtzY29yZX08L1RleHQ+fVxyXG4gICAgICA8VGV4dCBzdHlsZT17e2ZvbnRTaXplOiAyMCwgY29sb3I6ICdibGFjayd9fSB0ZXN0SUQ9XCJxdWVzdGlvbklEXCI+XHJcbiAgICAgICAge3F1ZXN0aW9uVGV4dH1cclxuICAgICAgPC9UZXh0PlxyXG4gICAgICB7b3B0aW9ucy5tYXAoKG9wdGlvbiwgaW5kZXgpID0+IChcclxuICAgICAgICA8UHJlc3NhYmxlXHJcbiAgICAgICAgICBrZXk9e2luZGV4fVxyXG4gICAgICAgICAgc3R5bGU9e1tcclxuICAgICAgICAgICAgc3R5bGVzLm9wdGlvblN0eWxpbmcsXHJcbiAgICAgICAgICAgIHNlbGVjdGVkSW5kZXggPT09IGluZGV4ICYmIHN0eWxlcy5zZWxlY3RlZE9wdGlvbixcclxuICAgICAgICAgIF19XHJcbiAgICAgICAgICBvblByZXNzPXsoKSA9PiBoYW5kbGVPcHRpb25QcmVzcyhpbmRleCl9PlxyXG4gICAgICAgICAgPFRleHQgdGVzdElEPXtgYW5zd2VyLSR7aW5kZXh9YH0+e29wdGlvbi50b1N0cmluZygpfTwvVGV4dD5cclxuICAgICAgICA8L1ByZXNzYWJsZT5cclxuICAgICAgKSl9XHJcbiAgICAgIDxCdXR0b24gdGl0bGU9XCJBbnN3ZXJcIiBvblByZXNzPXtoYW5kbGVBbnN3ZXJDaGVja30gZGlzYWJsZWQ9e3N1Ym1pdHRlZH0gLz5cclxuICAgICAge3NlbGVjdGVkSW5kZXggIT09IG51bGwgJiYgKFxyXG4gICAgICAgIDxCdXR0b25cclxuICAgICAgICAgIHRpdGxlPVwiTmV4dCBRdWVzdGlvblwiXHJcbiAgICAgICAgICBvblByZXNzPXsoKSA9PiBuYXZpZ2F0aW9uLm5hdmlnYXRlKCdRdWVzdGlvbiAyJyl9XHJcbiAgICAgICAgLz5cclxuICAgICAgKX1cclxuICAgIDwvVmlldz5cclxuICApO1xyXG59XHJcbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcclxuICBjb250YWluZXI6IHtcclxuICAgIGZsZXg6IDEsXHJcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXHJcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcclxuICB9LFxyXG4gIG9wdGlvblN0eWxpbmc6IHtcclxuICAgIGJhY2tncm91bmRDb2xvcjogJyMwMEExRTQnLFxyXG4gICAgcGFkZGluZzogMTAsXHJcbiAgICBib3JkZXJSYWRpdXM6IDIwLFxyXG4gICAgbWFyZ2luVG9wOiA2LFxyXG4gICAgbWFyZ2luQm90dG9tOiAxMCxcclxuICAgIHdpZHRoOiAnNzAlJyxcclxuICB9LFxyXG4gIHNlbGVjdGVkT3B0aW9uOiB7XHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjQ0MzRjBDJyxcclxuICB9LFxyXG4gIHF1ZXN0aW9uTmF2aWdhdGlvbjoge1xyXG4gICAgZGlzcGxheTogJ2ZsZXgnLFxyXG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXHJcbiAgICBmbGV4V3JhcDogJ3dyYXAnLFxyXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICB0b3A6IDAsXHJcbiAgfSxcclxuICBuYXZpZ2F0aW9uVG91Y2hhYmxlOiB7XHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjRkVCOTVGJyxcclxuICAgIHBhZGRpbmc6IDMsXHJcbiAgICBtYXJnaW5Ib3Jpem9udGFsOiA3LFxyXG4gICAgYm9yZGVyV2lkdGg6IDEsXHJcbiAgICBib3JkZXJDb2xvcjogJ2JsYWNrJyxcclxuICAgIGJvcmRlclJhZGl1czogMTAwLFxyXG4gICAgaGVpZ2h0OiAzMCxcclxuICAgIHdpZHRoOiAzMCxcclxuICAgIG1hcmdpblZlcnRpY2FsOiAyMCxcclxuICB9LFxyXG4gIG5hdmlnYXRpb25UZXh0OiB7XHJcbiAgICBmbGV4OiAxLFxyXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICBtYXJnaW5MZWZ0OiAzLFxyXG4gIH0sXHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFlBQUEsR0FBQUQsT0FBQTtBQVFBLElBQUFFLE9BQUEsR0FBQUYsT0FBQTtBQUVBLElBQUFHLFlBQUEsR0FBQUgsT0FBQTtBQUEwQyxJQUFBSSxXQUFBLEdBQUFKLE9BQUE7QUFBQSxTQUFBSyx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQVAsd0JBQUFXLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLFdBQUFELEdBQUEsUUFBQUEsR0FBQSxvQkFBQUEsR0FBQSx3QkFBQUEsR0FBQSw0QkFBQUUsT0FBQSxFQUFBRixHQUFBLFVBQUFHLEtBQUEsR0FBQVIsd0JBQUEsQ0FBQUMsV0FBQSxPQUFBTyxLQUFBLElBQUFBLEtBQUEsQ0FBQUMsR0FBQSxDQUFBSixHQUFBLFlBQUFHLEtBQUEsQ0FBQUUsR0FBQSxDQUFBTCxHQUFBLFNBQUFNLE1BQUEsV0FBQUMscUJBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsR0FBQSxJQUFBWCxHQUFBLFFBQUFXLEdBQUEsa0JBQUFILE1BQUEsQ0FBQUksU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQWQsR0FBQSxFQUFBVyxHQUFBLFNBQUFJLElBQUEsR0FBQVIscUJBQUEsR0FBQUMsTUFBQSxDQUFBRSx3QkFBQSxDQUFBVixHQUFBLEVBQUFXLEdBQUEsY0FBQUks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
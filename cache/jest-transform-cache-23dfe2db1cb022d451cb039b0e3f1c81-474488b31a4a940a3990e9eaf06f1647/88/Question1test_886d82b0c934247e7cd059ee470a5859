f76674dde78b92d54dcb56a866295d3a
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Question = _interopRequireDefault(require("../Question1"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('Question 1 component', function () {
  var mockQuizContext = {
    trackScore: true,
    score: 0,
    setScore: jest.fn(),
    selectedValue: 'ReactJS'
  };
  var wrapper;
  beforeEach(function () {
    wrapper = enzyme.shallow((0, _jsxRuntime.jsx)(_Question.default, {}), {
      context: {
        QuizContext: mockQuizContext
      }
    });
    jest.spyOn(_react.default, 'useContext').mockImplementation(function () {
      return mockQuizContext;
    });
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  var questionText = mockQuizContext.selectedValue === 'ReactJS' ? 'What is the extension used for TypeScript in ReactJS?' : '';
  expect(questionText).toEqual('What is the extension used for TypeScript in ReactJS?');
  it('the component renders properly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should render one question, and 5 answers for that quesiton', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Question.default, {})),
      getByText = _render.getByText;
    var questionText = getByText('What is the extension used for TypeScript in ReactJS?');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9RdWVzdGlvbiIsIl9lbnp5bWVBZGFwdGVyUmVhY3QiLCJlbnp5bWUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9uYXRpdmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfcmVxdWlyZSIsImNvbmZpZ3VyZSIsImFkYXB0ZXIiLCJBZGFwdGVyIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwibW9ja1F1aXpDb250ZXh0IiwidHJhY2tTY29yZSIsInNjb3JlIiwic2V0U2NvcmUiLCJzZWxlY3RlZFZhbHVlIiwid3JhcHBlciIsImJlZm9yZUVhY2giLCJzaGFsbG93IiwianN4IiwiY29udGV4dCIsIlF1aXpDb250ZXh0Iiwic3B5T24iLCJSZWFjdCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImFmdGVyRWFjaCIsInJlc3RvcmVBbGxNb2NrcyIsInF1ZXN0aW9uVGV4dCIsImV4cGVjdCIsInRvRXF1YWwiLCJpdCIsInRvTWF0Y2hTbmFwc2hvdCIsIl9yZW5kZXIiLCJyZW5kZXIiLCJnZXRCeVRleHQiXSwic291cmNlcyI6WyJRdWVzdGlvbjEudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFF1ZXN0aW9uMSBmcm9tICcuLi9RdWVzdGlvbjEnO1xyXG5pbXBvcnQgQWRhcHRlciBmcm9tICdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNic7XHJcbmltcG9ydCB7c2hhbGxvd30gZnJvbSAnZW56eW1lJztcclxuaW1wb3J0ICogYXMgZW56eW1lIGZyb20gJ2VuenltZSc7XHJcbmltcG9ydCB7dXNlTmF2aWdhdGlvbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2svbGliL3R5cGVzY3JpcHQvc3JjL3R5cGVzJztcclxuaW1wb3J0IFJlYWN0LCB7dXNlQ29udGV4dH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge3JlbmRlcn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQge1RleHQsIEJ1dHRvbiwgUHJlc3NhYmxlfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQge1F1aXpDb250ZXh0fSBmcm9tICcuLy4uL1F1aXpDb250ZXh0JztcclxuZW56eW1lLmNvbmZpZ3VyZSh7YWRhcHRlcjogbmV3IEFkYXB0ZXIoKX0pO1xyXG5jb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcblxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdRdWVzdGlvbiAxIGNvbXBvbmVudCcsICgpID0+IHtcclxuICBjb25zdCBtb2NrUXVpekNvbnRleHQgPSB7XHJcbiAgICB0cmFja1Njb3JlOiB0cnVlLFxyXG4gICAgc2NvcmU6IDAsXHJcbiAgICBzZXRTY29yZTogamVzdC5mbigpLFxyXG4gICAgc2VsZWN0ZWRWYWx1ZTogJ1JlYWN0SlMnLFxyXG4gIH07XHJcbiAgbGV0IHdyYXBwZXI6IGFueTtcclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIHdyYXBwZXIgPSBlbnp5bWUuc2hhbGxvdyg8UXVlc3Rpb24xIC8+LCB7XHJcbiAgICAgIGNvbnRleHQ6IHtRdWl6Q29udGV4dDogbW9ja1F1aXpDb250ZXh0fSxcclxuICAgIH0pO1xyXG4gICAgamVzdC5zcHlPbihSZWFjdCwgJ3VzZUNvbnRleHQnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja1F1aXpDb250ZXh0KTtcclxuICB9KTtcclxuICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcclxuICB9KTtcclxuICBjb25zdCBxdWVzdGlvblRleHQgPVxyXG4gICAgbW9ja1F1aXpDb250ZXh0LnNlbGVjdGVkVmFsdWUgPT09ICdSZWFjdEpTJ1xyXG4gICAgICA/ICdXaGF0IGlzIHRoZSBleHRlbnNpb24gdXNlZCBmb3IgVHlwZVNjcmlwdCBpbiBSZWFjdEpTPydcclxuICAgICAgOiAnJztcclxuICBleHBlY3QocXVlc3Rpb25UZXh0KS50b0VxdWFsKFxyXG4gICAgJ1doYXQgaXMgdGhlIGV4dGVuc2lvbiB1c2VkIGZvciBUeXBlU2NyaXB0IGluIFJlYWN0SlM/JyxcclxuICApO1xyXG4gIGl0KCd0aGUgY29tcG9uZW50IHJlbmRlcnMgcHJvcGVybHknLCAoKSA9PiB7XHJcbiAgICBleHBlY3Qod3JhcHBlcikudG9NYXRjaFNuYXBzaG90KCk7XHJcbiAgfSk7XHJcbiAgaXQoJ3Nob3VsZCByZW5kZXIgb25lIHF1ZXN0aW9uLCBhbmQgNSBhbnN3ZXJzIGZvciB0aGF0IHF1ZXNpdG9uJywgKCkgPT4ge1xyXG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoPFF1ZXN0aW9uMSAvPik7XHJcbiAgICBjb25zdCBxdWVzdGlvblRleHQgPSBnZXRCeVRleHQoXHJcbiAgICAgICdXaGF0IGlzIHRoZSBleHRlbnNpb24gdXNlZCBmb3IgVHlwZVNjcmlwdCBpbiBSZWFjdEpTPycsXHJcbiAgICApO1xyXG4gIH0pO1xyXG4gIC8vICAgaXQoJ3Nob3VsZCB1cGRhdGUgc2VsZWN0ZWRJbmRleCBvbiBvcHRpb24gcHJlc3MnLCAoKSA9PiB7XHJcbiAgLy8gICAgIGNvbnN0IG9wdGlvbkluZGV4ID0gMTtcclxuICAvLyAgICAgY29uc29sZS5sb2cod3JhcHBlci5kZWJ1ZygpKTtcclxuICAvLyAgICAgY29uc3Qgb3B0aW9uID0gd3JhcHBlci5maW5kKCdQcmVzc2FibGUnKS5hdChvcHRpb25JbmRleCk7XHJcbiAgLy8gICAgIGNvbnNvbGUubG9nKG9wdGlvbi5kZWJ1ZygpKTtcclxuICAvLyAgIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFhQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLEVBQUUsQ0FBQ0MsZUFBZSxDQUFDO01BQ3ZDQyxRQUFRLEVBQUVILElBQUksQ0FBQ0MsRUFBRTtJQUNuQixDQUFDO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDLElBQUFHLHNCQUFBLEdBQUFDLE9BQUE7QUFuQkgsSUFBQUMsU0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsbUJBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQUFHLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFLLE9BQUEsR0FBQUwsT0FBQTtBQUVBLElBQUFNLE1BQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFPLFlBQUEsR0FBQVAsT0FBQTtBQUFxRCxJQUFB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
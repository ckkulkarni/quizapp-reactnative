02489e752b390713171fd921506724b2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
var _Base = _interopRequireDefault(require("../../Apps/Base"));
var _jestCucumber = require("jest-cucumber");
var _QuizContext = require("./../../Apps/QuizContext");
var _jsxRuntime = require("react/jsx-runtime");
global.crypto = {
  getRandomValues: function getRandomValues(buffer) {
    for (var i = 0; i < buffer.length; i++) {
      buffer[i] = Math.floor(Math.random() * 256);
    }
    return buffer;
  }
};
var feature = (0, _jestCucumber.loadFeature)('./features/base.feature');
(0, _jestCucumber.defineFeature)(feature, function (test) {
  var mockQuizContext = {
    score: 7,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@chandu.com',
    setMail: jest.fn(),
    phone: '1234567890',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  test('user submits form with invalid mail', function () {
    var _ref2 = (0, _asyncToGenerator2.default)(function* (_ref) {
      var given = _ref.given,
        when = _ref.when,
        then = _ref.then;
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_Base.default, {})
        }));
        expect(screen).toBeDefined();
      });
    });
    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }());
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX0Jhc2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2plc3RDdWN1bWJlciIsIl9RdWl6Q29udGV4dCIsIl9qc3hSdW50aW1lIiwiZ2xvYmFsIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiYnVmZmVyIiwiaSIsImxlbmd0aCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImZlYXR1cmUiLCJsb2FkRmVhdHVyZSIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwibW9ja1F1aXpDb250ZXh0Iiwic2NvcmUiLCJzZXRTY29yZSIsImplc3QiLCJmbiIsIm5hbWUiLCJzZXROYW1lIiwiZW1haWwiLCJzZXRNYWlsIiwicGhvbmUiLCJzZXRQaG9uZSIsInNlbGVjdGVkVmFsdWUiLCJzZXRTZWxlY3RlZCIsInRyYWNrU2NvcmUiLCJzZXRUcmFja2VyIiwiX3JlZjIiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJkZWZhdWx0IiwiX3JlZiIsImdpdmVuIiwid2hlbiIsInRoZW4iLCJ3YWl0Rm9yIiwic2NyZWVuIiwicmVuZGVyIiwianN4IiwiUXVpekNvbnRleHQiLCJQcm92aWRlciIsInZhbHVlIiwiY2hpbGRyZW4iLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCIsIl94IiwiYXBwbHkiLCJhcmd1bWVudHMiXSwic291cmNlcyI6WyJiYXNlLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2ZpcmVFdmVudCwgcmVuZGVyLCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcblxyXG5nbG9iYWwuY3J5cHRvID0ge1xyXG4gIGdldFJhbmRvbVZhbHVlczogZnVuY3Rpb24gKGJ1ZmZlcjogYW55W10pIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGJ1ZmZlcltpXSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1Nik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYnVmZmVyO1xyXG4gIH0sXHJcbn07XHJcbmltcG9ydCBCYXNlIGZyb20gJy4uLy4uL0FwcHMvQmFzZSc7XHJcbmltcG9ydCB7bG9hZEZlYXR1cmUsIGRlZmluZUZlYXR1cmV9IGZyb20gJ2plc3QtY3VjdW1iZXInO1xyXG5pbXBvcnQge1F1aXpDb250ZXh0fSBmcm9tICcuLy4uLy4uL0FwcHMvUXVpekNvbnRleHQnO1xyXG5cclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKCcuL2ZlYXR1cmVzL2Jhc2UuZmVhdHVyZScpO1xyXG5cclxuZGVmaW5lRmVhdHVyZShmZWF0dXJlLCB0ZXN0ID0+IHtcclxuICBjb25zdCBtb2NrUXVpekNvbnRleHQgPSB7XHJcbiAgICBzY29yZTogNyxcclxuICAgIHNldFNjb3JlOiBqZXN0LmZuKCksXHJcbiAgICBuYW1lOiAnY2hhbmR1JyxcclxuICAgIHNldE5hbWU6IGplc3QuZm4oKSxcclxuICAgIGVtYWlsOiAnY2hhbmRyYUBjaGFuZHUuY29tJyxcclxuICAgIHNldE1haWw6IGplc3QuZm4oKSxcclxuICAgIHBob25lOiAnMTIzNDU2Nzg5MCcsXHJcbiAgICBzZXRQaG9uZTogamVzdC5mbigpLFxyXG4gICAgc2VsZWN0ZWRWYWx1ZTogJ1JlYWN0SlMnLFxyXG4gICAgc2V0U2VsZWN0ZWQ6IGplc3QuZm4oKSxcclxuICAgIHRyYWNrU2NvcmU6IHRydWUsXHJcbiAgICBzZXRUcmFja2VyOiBqZXN0LmZuKCksXHJcbiAgfTtcclxuICB0ZXN0KCd1c2VyIHN1Ym1pdHMgZm9ybSB3aXRoIGludmFsaWQgbWFpbCcsIGFzeW5jICh7Z2l2ZW4sIHdoZW4sIHRoZW59KSA9PiB7XHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICAgIDxRdWl6Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja1F1aXpDb250ZXh0fT5cclxuICAgICAgICAgIDxCYXNlIC8+XHJcbiAgICAgICAgPC9RdWl6Q29udGV4dC5Qcm92aWRlcj4sXHJcbiAgICAgICk7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVEZWZpbmVkKCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFVQSxJQUFBQyxLQUFBLEdBQUFDLHNCQUFBLENBQUFGLE9BQUE7QUFDQSxJQUFBRyxhQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxZQUFBLEdBQUFKLE9BQUE7QUFBcUQsSUFBQUssV0FBQSxHQUFBTCxPQUFBO0FBVnJETSxNQUFNLENBQUNDLE1BQU0sR0FBRztFQUNkQyxlQUFlLEVBQUUsU0FBQUEsZ0JBQVVDLE1BQWEsRUFBRTtJQUN4QyxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0QsTUFBTSxDQUFDRSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO01BQ3RDRCxNQUFNLENBQUNDLENBQUMsQ0FBQyxHQUFHRSxJQUFJLENBQUNDLEtBQUssQ0FBQ0QsSUFBSSxDQUFDRSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDN0M7SUFDQSxPQUFPTCxNQUFNO0VBQ2Y7QUFDRixDQUFDO0FBS0QsSUFBTU0sT0FBTyxHQUFHLElBQUFDLHlCQUFXLEVBQUMseUJBQXlCLENBQUM7QUFFdEQsSUFBQUMsMkJBQWEsRUFBQ0YsT0FBTyxFQUFFLFVBQUFHLElBQUksRUFBSTtFQUM3QixJQUFNQyxlQUFlLEdBQUc7SUFDdEJDLEtBQUssRUFBRSxDQUFDO0lBQ1JDLFFBQVEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDbkJDLElBQUksRUFBRSxRQUFRO0lBQ2RDLE9BQU8sRUFBRUgsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDbEJHLEtBQUssRUFBRSxvQkFBb0I7SUFDM0JDLE9BQU8sRUFBRUwsSUFBSSxDQUFDQyxFQUFFLEVBQUU7SUFDbEJLLEtBQUssRUFBRSxZQUFZO0lBQ25CQyxRQUFRLEVBQUVQLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQ25CTyxhQUFhLEVBQUUsU0FBUztJQUN4QkMsV0FBVyxFQUFFVCxJQUFJLENBQUNDLEVBQUUsRUFBRTtJQUN0QlMsVUFBVSxFQUFFLElBQUk7SUFDaEJDLFVBQVUsRUFBRVgsSUFBSSxDQUFDQyxFQUFFO0VBQ3JCLENBQUM7RUFDREwsSUFBSSxDQUFDLHFDQUFxQztJQUFBLElBQUFnQixLQUFBLE9BQUFDLGtCQUFBLENBQUFDLE9BQUEsRUFBRSxXQUFBQyxJQUFBLEVBQStCO01BQUEsSUFBdkJDLEtBQUssR0FBQUQsSUFBQSxDQUFMQyxLQUFLO1FBQUVDLElBQUksR0FBQUYsSUFBQSxDQUFKRSxJQUFJO1FBQUVDLElBQUksR0FBQUgsSUFBQSxDQUFKRyxJQUFJO01BQ25FLE1BQU0sSUFBQUMsb0JBQU8sRUFBQyxZQUFNO1FBQ2xCLElBQU1DLE1BQU0sR0FBRyxJQUFBQyxtQkFBTSxFQUNuQixJQUFBdEMsV0FBQSxDQUFBdUMsR0FBQSxFQUFDeEMsWUFBQSxDQUFBeUMsV0FBVyxDQUFDQyxRQUFRO1VBQUNDLEtBQUssRUFBRTVCLGVBQWdCO1VBQUE2QixRQUFBLEVBQzNDLElBQUEzQyxXQUFBLENBQUF1QyxHQUFBLEVBQUMzQyxLQUFBLENBQUFtQyxPQUFJO1FBQUcsRUFDYSxDQUN4QjtRQUNEYSxNQUFNLENBQUNQLE1BQU0sQ0FBQyxDQUFDUSxXQUFXLEVBQUU7TUFDOUIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUFBLGlCQUFBQyxFQUFBO01BQUEsT0FBQWpCLEtBQUEsQ0FBQWtCLEtBQUEsT0FBQUMsU0FBQTtJQUFBO0VBQUEsSUFBQztBQUNKLENBQUMsQ0FBQyJ9
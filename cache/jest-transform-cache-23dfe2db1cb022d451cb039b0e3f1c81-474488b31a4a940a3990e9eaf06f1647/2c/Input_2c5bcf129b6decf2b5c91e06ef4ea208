f5ab3e181d0bc1bb52c08dddb8564232
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var voidFunction = function voidFunction() {};
var Input = function Input(_ref, ref) {
  var searchViewWidth = _ref.searchViewWidth,
    inputStyle = _ref.inputStyle,
    inputTextStyle = _ref.inputTextStyle,
    value = _ref.value,
    valueColor = _ref.valueColor,
    placeholder = _ref.placeholder,
    placeholderTextColor = _ref.placeholderTextColor,
    textAlign = _ref.textAlign,
    onChangeText = _ref.onChangeText,
    onEndEditing = _ref.onEndEditing,
    onSubmitEditing = _ref.onSubmitEditing,
    renderLeft = _ref.renderLeft,
    renderRight = _ref.renderRight,
    testID = _ref.testID;
  var defaults = {
    inputStyle: inputStyle,
    inputTextStyle: inputTextStyle,
    value: value != null ? value : '',
    valueColor: valueColor != null ? valueColor : '#000000',
    placeholder: placeholder != null ? placeholder : '',
    placeholderTextColor: placeholderTextColor != null ? placeholderTextColor : '#CACACA',
    textAlign: textAlign || (_reactNative.I18nManager.isRTL ? 'right' : 'left'),
    onChangeText: onChangeText != null ? onChangeText : voidFunction,
    onEndEditing: onEndEditing != null ? onEndEditing : voidFunction,
    onSubmitEditing: onSubmitEditing != null ? onSubmitEditing : voidFunction,
    renderLeft: renderLeft,
    renderRight: renderRight,
    testID: testID
  };
  var onChangeTextValidator = function onChangeTextValidator(txt) {
    if (txt.length == 1 && txt == ' ') {
      return;
    }
    if (txt.length > 1 && txt.slice(-2) == '  ') {
      return;
    }
    defaults.onChangeText(txt);
  };
  return (0, _jsxRuntime.jsx)(_reactNative.View, {
    style: Object.assign({}, styles.searchViewStyle, {
      width: searchViewWidth
    }),
    children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: Object.assign({}, styles.defaultInputStyle, defaults.inputStyle),
      children: [defaults.renderLeft && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.pressableLeft,
        children: defaults.renderLeft()
      }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        testID: defaults.testID,
        ref: ref,
        value: defaults.value,
        placeholder: defaults.placeholder,
        placeholderTextColor: defaults.placeholderTextColor,
        textAlign: defaults.textAlign,
        onChangeText: onChangeTextValidator,
        onEndEditing: defaults.onEndEditing,
        onSubmitEditing: defaults.onSubmitEditing,
        style: Object.assign({}, styles.inputField, {
          color: defaults.valueColor
        }, defaults.inputTextStyle),
        returnKeyType: 'done',
        textContentType: 'oneTimeCode',
        allowFontScaling: false,
        autoComplete: 'off',
        autoCorrect: false,
        autoCapitalize: 'none',
        autoFocus: true
      }), defaults.renderRight && (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: styles.pressableRight,
        children: defaults.renderRight()
      })]
    })
  });
};
var _default = (0, _react.forwardRef)(function (props, ref) {
  return Input(props, ref);
});
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  searchViewStyle: {
    height: 50,
    paddingHorizontal: 0
  },
  defaultInputStyle: {
    width: '100%',
    height: '100%',
    backgroundColor: '#FFFFFF',
    flexDirection: 'row',
    justifyContent: 'center',
    paddingHorizontal: '4%'
  },
  inputField: {
    flex: 1,
    height: '100%',
    backgroundColor: '#0000',
    textAlignVertical: 'center',
    paddingVertical: 0
  },
  pressableLeft: {
    height: '100%',
    marginRight: '4%',
    justifyContent: 'center'
  },
  pressableRight: {
    height: '100%',
    marginLeft: '4%',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
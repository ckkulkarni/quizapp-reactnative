7e9a616a529f4a71344e2b8f5a3c6771
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
require("react-native-get-random-values");
var _uuid = require("uuid");
var _jestCucumber = require("jest-cucumber");
var _QuizContext = require("../../Apps/QuizContext");
var _native = require("@react-navigation/native");
var _Question = _interopRequireDefault(require("../../Apps/Question4"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var uuid = (0, _uuid.v4)();
var navigation = (0, _native.useNavigation)();
var feature = (0, _jestCucumber.loadFeature)('./features/question4.feature');
(0, _jestCucumber.defineFeature)(feature, function (test) {
  var mockQuizContext = {
    score: 0,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@chandu.com',
    setMail: jest.fn(),
    phone: '1234567890',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  test('User answers third quiz question correctly', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    given('I am on the Question 4 screen', function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      expect(screen.getByTestId('questionContainer')).toBeDefined();
    });
    when('I select the correct answer and press "Answer", then the score should update', function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      _reactNative.fireEvent.press(screen.getByTestId('answer-0'));
      _reactNative.fireEvent.press(screen.getByTestId('answerButton'));
      expect(mockQuizContext.setScore).toBeCalledWith(1);
    });
    when('I select any of the numbers above the questions, then it should navigate to that respective question screen', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_Question.default, {})
        }));
        _reactNative.fireEvent.press(screen.getByTestId('goto-0'));
        expect(navigation.navigate).toBeCalledWith('Question 1');
        _reactNative.fireEvent.press(screen.getByTestId('goto-1'));
        expect(navigation.navigate).toBeCalledWith('Question 2');
        _reactNative.fireEvent.press(screen.getByTestId('goto-2'));
        expect(navigation.navigate).toBeCalledWith('Question 3');
        _reactNative.fireEvent.press(screen.getByTestId('goto-4'));
        expect(navigation.navigate).toBeCalledWith('Question 5');
      });
    }));
    then('I navigate to the next question when I click on the "Next Question" button', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_Question.default, {})
        }));
        _reactNative.fireEvent.press(screen.getByTestId('nextQuestion'));
        expect(navigation.navigate).toBeCalledWith('Question 5');
      });
    }));
  });
  test('User answers third quiz question incorrectly', function (_ref4) {
    var given = _ref4.given,
      when = _ref4.when,
      then = _ref4.then;
    given('I am on the Question 4 screen', function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      expect(screen.getByTestId('questionContainer')).toBeDefined();
    });
    when('I select an incorrect answer and press "Answer", then the score should remain the same', function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      _reactNative.fireEvent.press(screen.getByTestId('answer-3'));
      _reactNative.fireEvent.press(screen.getByTestId('answerButton'));
      expect(mockQuizContext.setScore).toBeCalledWith(0);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
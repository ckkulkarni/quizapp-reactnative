57b62f6626932999a2848e7578f93fae
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Base = _interopRequireDefault(require("../Base"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('should render a form with three text inputs, two selections, and one submit', function () {
  var wrapper;
  beforeEach(function () {
    wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Base.default, {}));
  });
  it('component renders correctly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should update the name state upon text input', function () {
    expect(wrapper.find('TextInput')).toBeTruthy();
    expect(wrapper.find('SelectDropdown')).toBeTruthy();
    expect(wrapper.find('Button')).toBeTruthy();
  });
  it('should disable the submit button when the form  does not have all the inputs', function () {
    expect(wrapper.find('Button').at(0).prop('disabled')).toBe(true);
  });
  it('should enable the submit button when the form has all the inputs', function () {
    wrapper.find('TextInput').at(0).simulate('changeText', 'chandrakanth');
    wrapper.find('TextInput').at(1).simulate('changeText', 'chandra@kanth.com');
    wrapper.find('TextInput').at(2).simulate('changeText', '1234567890');
    expect(wrapper.find('Button').at(0).prop('disabled')).toBe(false);
  });
  it('on quiz start button, should navigate to the next screen, aka, the quiz should begin', function () {
    wrapper.find('Button').at(0).props().onPress();
    wrapper.find(_reactNative.Button).at(1).props().onPress();
    wrapper.update();
    expect(navigation.navigate).toBeCalledWith('Question 1');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
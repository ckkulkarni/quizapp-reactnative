952e70265f6c9f9f212fc23da8c5e459
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Question = _interopRequireDefault(require("../Question5"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _QuizContext = require("./../QuizContext");
require("@testing-library/jest-dom");
require("@testing-library/jest-dom/extend-expect");
var _enzyme = require("enzyme");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
describe('Fifth Question component', function () {
  var mockQuizContext = {
    score: 0,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@chandu.com',
    setMail: jest.fn(),
    phone: '1234567890',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  it('on touching any of the 5 numbers above the question, the user should navigate to the previous or next questions', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.waitFor)(function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      _reactNative.fireEvent.press(screen.getByTestId('goto-0'));
      expect(navigation.navigate).toBeCalledWith('Question 1');
      _reactNative.fireEvent.press(screen.getByTestId('goto-1'));
      expect(navigation.navigate).toBeCalledWith('Question 2');
      _reactNative.fireEvent.press(screen.getByTestId('goto-2'));
      expect(navigation.navigate).toBeCalledWith('Question 3');
      _reactNative.fireEvent.press(screen.getByTestId('goto-3'));
      expect(navigation.navigate).toBeCalledWith('Question 4');
    });
  }));
  it('component renders properly', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.waitFor)(function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      expect(screen.getByTestId('question5-container')).toBeDefined();
    });
  }));
  it('on pressing the Go Back Button, it should navigate back to the previous question screen', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.waitFor)(function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      _reactNative.fireEvent.press(screen.getByTestId('previousQuestion'));
      expect(navigation.goBack).toBeCalled();
    });
  }));
  it('the questions are rendered correctly, assuming that the selectedValue state from the context API is ReactJS', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.waitFor)(function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      expect(screen.getByTestId('question-0').props.children).toBe('_ is used to avoid prop-drilling.');
      expect(screen.getByTestId('question-1').props.children).toBe('ReactJS is a _ of Javascript.');
      expect(screen.getByTestId('question-2').props.children).toBe('_ are created using ReactJS.');
      expect(screen.getByTestId('question-3').props.children).toBe('_ is a third party ReactJS library called that is used to make API calls.');
      expect(screen.getByTestId('question-4').props.children).toBe('ReactJS uses _ DOM.');
    });
  }));
  it('expects the draggable to have been defined', function () {
    var wrapper = (0, _enzyme.shallow)((0, _jsxRuntime.jsx)(_Question.default, {}));
    expect(wrapper.find('Draggable')).toHaveLength(5);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
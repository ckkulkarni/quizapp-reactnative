514622d9f6e46d75945d7dcb1c2272a2
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Question = _interopRequireDefault(require("../Question1"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('Question 1 component', function () {
  var mockSetScore = jest.fn();
  var mockQuizContext = {
    trackScore: true,
    score: 0,
    setScore: mockSetScore,
    selectedValue: 'ReactJS'
  };
  var wrapper;
  beforeEach(function () {
    wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Question.default, {}), {
      context: {
        QuizContext: mockQuizContext
      }
    });
    jest.spyOn(_react.default, 'useContext').mockImplementation(function () {
      return mockQuizContext;
    });
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  it('the component renders properly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should render one question, and 5 answers for that quesiton', function () {
    var questionText = '';
    if (mockQuizContext.selectedValue === 'ReactJS') {
      questionText = 'What is the extension used for TypeScript in ReactJS?';
    }
    questionText = wrapper.find('Text').at(1).text();
    console.log(questionText);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9RdWVzdGlvbiIsIl9lbnp5bWVBZGFwdGVyUmVhY3QiLCJlbnp5bWUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9uYXRpdmUiLCJfcmVhY3QiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfcmVxdWlyZSIsImNvbmZpZ3VyZSIsImFkYXB0ZXIiLCJBZGFwdGVyIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwibW9ja1NldFNjb3JlIiwibW9ja1F1aXpDb250ZXh0IiwidHJhY2tTY29yZSIsInNjb3JlIiwic2V0U2NvcmUiLCJzZWxlY3RlZFZhbHVlIiwid3JhcHBlciIsImJlZm9yZUVhY2giLCJzaGFsbG93IiwianN4IiwiY29udGV4dCIsIlF1aXpDb250ZXh0Iiwic3B5T24iLCJSZWFjdCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImFmdGVyRWFjaCIsInJlc3RvcmVBbGxNb2NrcyIsIml0IiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90IiwicXVlc3Rpb25UZXh0IiwiZmluZCIsImF0IiwidGV4dCIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlcyI6WyJRdWVzdGlvbjEudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFF1ZXN0aW9uMSBmcm9tICcuLi9RdWVzdGlvbjEnO1xyXG5pbXBvcnQgQWRhcHRlciBmcm9tICdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNic7XHJcbmltcG9ydCB7c2hhbGxvd30gZnJvbSAnZW56eW1lJztcclxuaW1wb3J0ICogYXMgZW56eW1lIGZyb20gJ2VuenltZSc7XHJcbmltcG9ydCB7dXNlTmF2aWdhdGlvbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2svbGliL3R5cGVzY3JpcHQvc3JjL3R5cGVzJztcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtUZXh0fSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQge1F1aXpDb250ZXh0fSBmcm9tICcuLy4uL1F1aXpDb250ZXh0JztcclxuZW56eW1lLmNvbmZpZ3VyZSh7YWRhcHRlcjogbmV3IEFkYXB0ZXIoKX0pO1xyXG5jb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcblxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdRdWVzdGlvbiAxIGNvbXBvbmVudCcsICgpID0+IHtcclxuICBjb25zdCBtb2NrU2V0U2NvcmUgPSBqZXN0LmZuKCk7XHJcbiAgY29uc3QgbW9ja1F1aXpDb250ZXh0ID0ge1xyXG4gICAgdHJhY2tTY29yZTogdHJ1ZSxcclxuICAgIHNjb3JlOiAwLFxyXG4gICAgc2V0U2NvcmU6IG1vY2tTZXRTY29yZSxcclxuICAgIHNlbGVjdGVkVmFsdWU6ICdSZWFjdEpTJyxcclxuICB9O1xyXG5cclxuICBsZXQgd3JhcHBlcjogYW55O1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgd3JhcHBlciA9IHNoYWxsb3coPFF1ZXN0aW9uMSAvPiwge1xyXG4gICAgICBjb250ZXh0OiB7UXVpekNvbnRleHQ6IG1vY2tRdWl6Q29udGV4dH0sXHJcbiAgICB9KTtcclxuICAgIGplc3Quc3B5T24oUmVhY3QsICd1c2VDb250ZXh0JykubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IG1vY2tRdWl6Q29udGV4dCk7XHJcbiAgfSk7XHJcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcclxuICAgIGplc3QucmVzdG9yZUFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCd0aGUgY29tcG9uZW50IHJlbmRlcnMgcHJvcGVybHknLCAoKSA9PiB7XHJcbiAgICBleHBlY3Qod3JhcHBlcikudG9NYXRjaFNuYXBzaG90KCk7XHJcbiAgfSk7XHJcbiAgaXQoJ3Nob3VsZCByZW5kZXIgb25lIHF1ZXN0aW9uLCBhbmQgNSBhbnN3ZXJzIGZvciB0aGF0IHF1ZXNpdG9uJywgKCkgPT4ge1xyXG4gICAgbGV0IHF1ZXN0aW9uVGV4dDogc3RyaW5nID0gJyc7XHJcbiAgICBpZiAobW9ja1F1aXpDb250ZXh0LnNlbGVjdGVkVmFsdWUgPT09ICdSZWFjdEpTJykge1xyXG4gICAgICBxdWVzdGlvblRleHQgPSAnV2hhdCBpcyB0aGUgZXh0ZW5zaW9uIHVzZWQgZm9yIFR5cGVTY3JpcHQgaW4gUmVhY3RKUz8nO1xyXG4gICAgfVxyXG4gICAgcXVlc3Rpb25UZXh0ID0gd3JhcHBlci5maW5kKCdUZXh0JykuYXQoMSkudGV4dCgpO1xyXG4gICAgY29uc29sZS5sb2cocXVlc3Rpb25UZXh0KTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBWUFBLFdB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
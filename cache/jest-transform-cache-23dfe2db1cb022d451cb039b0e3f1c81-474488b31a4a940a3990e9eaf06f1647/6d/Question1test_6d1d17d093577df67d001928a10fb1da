3f87f9d6c3232cd611ffac4665b96bf8
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Question = _interopRequireDefault(require("../Question1"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('Question 1 component', function () {
  var mockSetScore = jest.fn();
  var mockQuizContext = {
    trackScore: true,
    score: 0,
    setScore: mockSetScore,
    selectedValue: 'ReactJS'
  };
  var wrapper;
  beforeEach(function () {
    wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Question.default, {}), {
      context: {
        QuizContext: mockQuizContext
      }
    });
    jest.spyOn(_react.default, 'useContext').mockImplementation(function () {
      return mockQuizContext;
    });
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  it('the component renders properly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should render one question, and 5 answers for that quesiton', function () {
    var question = '';
    console.log(mockQuizContext.selectedValue);
    if (mockQuizContext.selectedValue === 'ReactJS') {
      question = 'What is the extension used for TypeScript in ReactJS?';
    }
    var questionText = wrapper.find('Text').at(1).text();
    console.log(questionText);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9RdWVzdGlvbiIsIl9lbnp5bWVBZGFwdGVyUmVhY3QiLCJlbnp5bWUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9uYXRpdmUiLCJfcmVhY3QiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfcmVxdWlyZSIsImNvbmZpZ3VyZSIsImFkYXB0ZXIiLCJBZGFwdGVyIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwibW9ja1NldFNjb3JlIiwibW9ja1F1aXpDb250ZXh0IiwidHJhY2tTY29yZSIsInNjb3JlIiwic2V0U2NvcmUiLCJzZWxlY3RlZFZhbHVlIiwid3JhcHBlciIsImJlZm9yZUVhY2giLCJzaGFsbG93IiwianN4IiwiY29udGV4dCIsIlF1aXpDb250ZXh0Iiwic3B5T24iLCJSZWFjdCIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImFmdGVyRWFjaCIsInJlc3RvcmVBbGxNb2NrcyIsIml0IiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90IiwicXVlc3Rpb24iLCJjb25zb2xlIiwibG9nIiwicXVlc3Rpb25UZXh0IiwiZmluZCIsImF0IiwidGV4dCJdLCJzb3VyY2VzIjpbIlF1ZXN0aW9uMS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUXVlc3Rpb24xIGZyb20gJy4uL1F1ZXN0aW9uMSc7XHJcbmltcG9ydCBBZGFwdGVyIGZyb20gJ2VuenltZS1hZGFwdGVyLXJlYWN0LTE2JztcclxuaW1wb3J0IHtzaGFsbG93fSBmcm9tICdlbnp5bWUnO1xyXG5pbXBvcnQgKiBhcyBlbnp5bWUgZnJvbSAnZW56eW1lJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjay9saWIvdHlwZXNjcmlwdC9zcmMvdHlwZXMnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge1RleHR9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7UXVpekNvbnRleHR9IGZyb20gJy4vLi4vUXVpekNvbnRleHQnO1xyXG5lbnp5bWUuY29uZmlndXJlKHthZGFwdGVyOiBuZXcgQWRhcHRlcigpfSk7XHJcbmNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuXHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5cclxuZGVzY3JpYmUoJ1F1ZXN0aW9uIDEgY29tcG9uZW50JywgKCkgPT4ge1xyXG4gIGNvbnN0IG1vY2tTZXRTY29yZSA9IGplc3QuZm4oKTtcclxuICBjb25zdCBtb2NrUXVpekNvbnRleHQgPSB7XHJcbiAgICB0cmFja1Njb3JlOiB0cnVlLFxyXG4gICAgc2NvcmU6IDAsXHJcbiAgICBzZXRTY29yZTogbW9ja1NldFNjb3JlLFxyXG4gICAgc2VsZWN0ZWRWYWx1ZTogJ1JlYWN0SlMnLFxyXG4gIH07XHJcblxyXG4gIGxldCB3cmFwcGVyOiBhbnk7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICB3cmFwcGVyID0gc2hhbGxvdyg8UXVlc3Rpb24xIC8+LCB7XHJcbiAgICAgIGNvbnRleHQ6IHtRdWl6Q29udGV4dDogbW9ja1F1aXpDb250ZXh0fSxcclxuICAgIH0pO1xyXG4gICAgamVzdC5zcHlPbihSZWFjdCwgJ3VzZUNvbnRleHQnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gbW9ja1F1aXpDb250ZXh0KTtcclxuICB9KTtcclxuICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ3RoZSBjb21wb25lbnQgcmVuZGVycyBwcm9wZXJseScsICgpID0+IHtcclxuICAgIGV4cGVjdCh3cmFwcGVyKS50b01hdGNoU25hcHNob3QoKTtcclxuICB9KTtcclxuICBpdCgnc2hvdWxkIHJlbmRlciBvbmUgcXVlc3Rpb24sIGFuZCA1IGFuc3dlcnMgZm9yIHRoYXQgcXVlc2l0b24nLCAoKSA9PiB7XHJcbiAgICBsZXQgcXVlc3Rpb246IHN0cmluZyA9ICcnO1xyXG4gICAgY29uc29sZS5sb2cobW9ja1F1aXpDb250ZXh0LnNlbGVjdGVkVmFsdWUpO1xyXG4gICAgaWYgKG1vY2tRdWl6Q29udGV4dC5zZWxlY3RlZFZhbHVlID09PSAnUmVhY3RKUycpIHtcclxuICAgICAgcXVlc3Rpb24gPSAnV2hhdCBpcyB0aGUgZXh0ZW5zaW9uIHVzZWQgZm9yIFR5cGVTY3JpcHQgaW4gUmVhY3RKUz8nO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcXVlc3Rpb25UZXh0ID0gd3JhcHBlci5maW5kKCdUZXh0JykuYXQoMSkudGV4dCgpO1xyXG4gICAgY29uc29sZS5s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
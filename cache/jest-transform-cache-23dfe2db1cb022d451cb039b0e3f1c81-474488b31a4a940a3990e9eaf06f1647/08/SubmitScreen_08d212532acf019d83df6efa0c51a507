6d4aa15c22fdc9984d21563313e09049
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _react = _interopRequireWildcard(require("react"));
var _QuizContext = require("./QuizContext");
var _reactNativePieChart = _interopRequireDefault(require("react-native-pie-chart"));
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var SubmitScreen = function SubmitScreen() {
  var navigation = (0, _native.useNavigation)();
  var _useContext = (0, _react.useContext)(_QuizContext.QuizContext),
    score = _useContext.score,
    setScore = _useContext.setScore,
    selectedValue = _useContext.selectedValue,
    name = _useContext.name,
    email = _useContext.email,
    phone = _useContext.phone;
  var wrongAnswers = 9 - score;
  var chartData = [wrongAnswers, score];
  var chartColors = ['#A20021', '#B0FF92'];
  function restartQuiz() {
    setScore(0);
    navigation.navigate('Home');
  }
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    testID: "scoreContainer",
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.pieStyling,
      children: (0, _jsxRuntime.jsx)(_reactNativePieChart.default, {
        widthAndHeight: 200,
        series: chartData,
        sliceColor: chartColors
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.statsView,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.textStyle,
        testID: "score",
        children: ["Score: ", score]
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.textStyle,
        testID: "selectedStream",
        children: ["Quiz Stream: ", selectedValue]
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.textStyle,
        testID: "name",
        children: ["Name: ", name]
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.textStyle,
        testID: "mail",
        children: ["Mail: ", email]
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.textStyle,
        testID: "phoneNo",
        children: ["Phone Number: ", phone]
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.buttonStyling,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          marginHorizontal: 10
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.Button, {
          title: "Re-enter Details",
          onPress: restartQuiz,
          testID: "restartQuiz"
        })
      })
    })]
  });
};
var _default = SubmitScreen;
exports.default = _default;
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white'
  },
  textStyle: {
    color: 'black',
    fontSize: 19,
    textAlign: 'center',
    backgroundColor: '#0496FF',
    padding: 5,
    marginTop: 15
  },
  pieStyling: {
    position: 'absolute',
    top: 20
  },
  statsView: {
    position: 'relative',
    top: 50
  },
  buttonStyling: {
    display: 'flex',
    flexDirection: 'row',
    position: 'absolute',
    bottom: 30
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
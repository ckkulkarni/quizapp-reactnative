3e706da158d757acf92b61af8e49ca5b
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Base = _interopRequireDefault(require("../Base"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('should render a form with three text inputs, two selections, and one submit', function () {
  var wrapper;
  beforeEach(function () {
    wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Base.default, {}));
  });
  it('component renders correctly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should update the name state upon text input', function () {
    expect(wrapper.find('TextInput')).toBeTruthy();
    expect(wrapper.find('SelectDropdown')).toBeTruthy();
    expect(wrapper.find('Button')).toBeTruthy();
  });
  it('should disable the submit button when the form  does not have all the inputs', function () {
    expect(wrapper.find('Button').at(0).prop('disabled')).toBe(true);
  });
  it('should enable the submit button when the form has all the inputs', function () {
    wrapper.find('TextInput').at(0).simulate('changeText', 'chandrakanth');
    wrapper.find('TextInput').at(1).simulate('changeText', 'chandra@kanth.com');
    wrapper.find('TextInput').at(2).simulate('changeText', '1234567890');
    expect(wrapper.find('Button').at(0).prop('disabled')).toBe(false);
  });
  it('on quiz start button, should navigate to the next screen, aka, the quiz should begin', function () {
    var quizStartButton = wrapper.find(_reactNative.Button).at(1).simulate('click');
    expect(navigation.navigate).toBeCalledWith('Question 1');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9CYXNlIiwiX2VuenltZUFkYXB0ZXJSZWFjdCIsImVuenltZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX25hdGl2ZSIsIl9yZWFjdE5hdGl2ZSIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9yZXF1aXJlIiwiY29uZmlndXJlIiwiYWRhcHRlciIsIkFkYXB0ZXIiLCJuYXZpZ2F0aW9uIiwiZGVzY3JpYmUiLCJ3cmFwcGVyIiwiYmVmb3JlRWFjaCIsInNoYWxsb3ciLCJqc3giLCJpdCIsImV4cGVjdCIsInRvTWF0Y2hTbmFwc2hvdCIsImZpbmQiLCJ0b0JlVHJ1dGh5IiwiYXQiLCJwcm9wIiwidG9CZSIsInNpbXVsYXRlIiwicXVpelN0YXJ0QnV0dG9uIiwiQnV0dG9uIiwidG9CZUNhbGxlZFdpdGgiXSwic291cmNlcyI6WyJCYXNlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNlIGZyb20gJy4uL0Jhc2UnO1xyXG5pbXBvcnQgQWRhcHRlciBmcm9tICdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNic7XHJcbmltcG9ydCB7bW91bnQsIHNoYWxsb3d9IGZyb20gJ2VuenltZSc7XHJcbmltcG9ydCAqIGFzIGVuenltZSBmcm9tICdlbnp5bWUnO1xyXG5pbXBvcnQge3VzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrL2xpYi90eXBlc2NyaXB0L3NyYy90eXBlcyc7XHJcbmltcG9ydCB7VGV4dElucHV0LCBCdXR0b259IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7UXVpekNvbnRleHR9IGZyb20gJy4vLi4vUXVpekNvbnRleHQnO1xyXG5lbnp5bWUuY29uZmlndXJlKHthZGFwdGVyOiBuZXcgQWRhcHRlcigpfSk7XHJcbmNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcbmRlc2NyaWJlKCdzaG91bGQgcmVuZGVyIGEgZm9ybSB3aXRoIHRocmVlIHRleHQgaW5wdXRzLCB0d28gc2VsZWN0aW9ucywgYW5kIG9uZSBzdWJtaXQnLCAoKSA9PiB7XHJcbiAgbGV0IHdyYXBwZXI6IGFueTtcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICB3cmFwcGVyID0gc2hhbGxvdyg8QmFzZSAvPik7XHJcbiAgfSk7XHJcbiAgaXQoJ2NvbXBvbmVudCByZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcclxuICAgIGV4cGVjdCh3cmFwcGVyKS50b01hdGNoU25hcHNob3QoKTtcclxuICB9KTtcclxuICBpdCgnc2hvdWxkIHVwZGF0ZSB0aGUgbmFtZSBzdGF0ZSB1cG9uIHRleHQgaW5wdXQnLCAoKSA9PiB7XHJcbiAgICBleHBlY3Qod3JhcHBlci5maW5kKCdUZXh0SW5wdXQnKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZCgnU2VsZWN0RHJvcGRvd24nKSkudG9CZVRydXRoeSgpO1xyXG4gICAgZXhwZWN0KHdyYXBwZXIuZmluZCgnQnV0dG9uJykpLnRvQmVUcnV0aHkoKTtcclxuICB9KTtcclxuICBpdCgnc2hvdWxkIGRpc2FibGUgdGhlIHN1Ym1pdCBidXR0b24gd2hlbiB0aGUgZm9ybSAgZG9lcyBub3QgaGF2ZSBhbGwgdGhlIGlucHV0cycsICgpID0+IHtcclxuICAgIGV4cGVjdCh3cmFwcGVyLmZpbmQoJ0J1dHRvbicpLmF0KDApLnByb3AoJ2Rpc2FibGVkJykpLnRvQmUodHJ1ZSk7XHJcbiAgfSk7XHJcbiAgaXQoJ3Nob3VsZCBlbmFibGUgdGhlIHN1Ym1pdCBidXR0b24gd2hlbiB0aGUgZm9ybSBoYXMgYWxsIHRoZSBpbnB1dHMnLCAoKSA9PiB7XHJcbiAgICB3cmFwcGVyLmZpbmQoJ1RleHRJbnB1dCcpLmF0KDApLnNpbXVsYXRlKCdjaGFuZ2VUZXh0JywgJ2NoYW5kcmFrYW50aCcpO1xyXG4gICAgd3JhcHBlci5maW5kKCdUZXh0SW5wdXQnKS5hdCgxKS5zaW11bGF0ZSgnY2hhbmdlVGV4dCcsICdjaGFuZHJhQGthbnRoLmNvbScpO1xyXG4gICAgd3JhcHBlci5maW5kKCdUZXh0SW5wdXQnKS5hdCgyKS5zaW11bGF0ZSgnY2hhbmdlVGV4dCcsICcxMjM0NTY3ODkwJyk7XHJcbiAgICBleHBlY3Qod3JhcHBlci5maW5kKCdCdXR0b24nKS5hdCgwKS5wcm9wKCdkaXNhYmxlZCcpKS50b0JlKGZhbHNlKTtcclxuICB9KTtcclxuICBpdCgnb24gcXVpeiBzdGFydCBidXR0b24sIHNob3VsZCBuYXZpZ2F0ZSB0byB0aGUgbmV4dCBzY3JlZW4sIGFrYSwgdGhlIHF1aXogc2hvdWxkIGJlZ2luJywgKCkgPT4ge1xyXG4gICAgY29uc3QgcXVpelN0YXJ0QnV0dG9uID0gd3JhcHBlci5maW5kKEJ1dHRvbikuYXQoMSkuc2ltdWxhdGUoJ2NsaWNrJyk7XHJcbiAgICBleHBlY3QobmF2aWdhdGlvbi5uYXZpZ2F0ZSkudG9CZUNhbGxlZFdpdGgoJ1F1ZXN0aW9uIDEnKTtcclxuICB9KTtcclxufSk7XHJcbiJdLCJtYXBwaW5ncyI6IkFBVUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLDBCQUEwQixFQUFFLFlBQU07RUFDMUMsT0FBTztJQUNMQyxhQUFhLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxFQUFFLENBQUNDLGVBQWUsQ0FBQztNQUN2Q0MsUUFBUSxFQUFFSCxJQUFJLENBQUNDLEVBQUU7SUFDbkIsQ0FBQztFQUNILENBQUM7QUFDSCxDQUFDLENBQUM7QUFBQyxJQUFBRyxzQkFBQSxHQUFBQyxPQUFBO0FBaEJILElBQUFDLEtBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLG1CQUFBLEdBQUFILHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRyxNQUFBLEdBQUFDLHVCQUFBLENBQUFKLE9BQUE7QUFFQSxJQUFBSyxPQUFBLEdBQUFMLE9BQUE7QUFFQSxJQUFBTSxZQUFBLEdBQUFOLE9BQUE7QUFBK0MsSUFBQU8sV0FBQSxHQUFBUCxPQUFBO0FBQUEsU0FBQVEseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFMLHdCQUFBUyxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9B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
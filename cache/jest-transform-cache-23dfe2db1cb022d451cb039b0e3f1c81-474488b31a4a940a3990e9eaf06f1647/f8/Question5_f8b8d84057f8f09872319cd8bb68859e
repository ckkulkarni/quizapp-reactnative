0e453509779f6b2f0eb9229c231cb30f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Question5;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _QuizContext = require("./QuizContext");
var _reactNativeDraggable = _interopRequireDefault(require("react-native-draggable"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
if (_reactNative.Platform.OS === 'android' && _reactNative.UIManager.setLayoutAnimationEnabledExperimental) {
  _reactNative.UIManager.setLayoutAnimationEnabledExperimental(true);
}
function Question5() {
  var navigation = (0, _native.useNavigation)();
  var _useContext = (0, _react.useContext)(_QuizContext.QuizContext),
    score = _useContext.score,
    trackScore = _useContext.trackScore,
    setScore = _useContext.setScore,
    selectedValue = _useContext.selectedValue;
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    selectedAnswer = _useState2[0],
    setSelectedAnswer = _useState2[1];
  var maxScore = 9;
  var questionPositions = [];
  if (selectedValue === 'ReactJS' || selectedValue === 'Java') {
    questionPositions = [350, 410, 450, 500, 650];
  } else if (selectedValue === 'React Native') {
    questionPositions = [360, 440, 515, 570, 650];
  } else if (selectedValue === 'JavaScript') {
    questionPositions = [350, 410, 450, 500, 650];
  }
  var _useState3 = (0, _react.useState)(function () {
      if (selectedValue === 'ReactJS') {
        return ['_ is used to avoid prop-drilling.', 'ReactJS is a _ of Javascript.', '_ are created using ReactJS.', '_ is a third party ReactJS library called that is used to make API calls.', 'ReactJS uses _ DOM.'];
      } else if (selectedValue === 'React Native') {
        return ['React Native is primarily used to make _ applications.', '_ CLI is the other option to make React Native Applications.', 'A popular option to navigate between the screens is _', "React Native CLI's Android testing is done on _ primarily.", 'Aside from React Native we can also use _ for mobile app development.'];
      } else if (selectedValue === 'JavaScript') {
        return ['Javascript is an _ language', 'var and _ are the keywords used to define a variable in Javascript', '_ can be used to access HTML elements using Javascript.', '_ can be used to display data in some form using Javascript.', 'What keyword is used to check whether a given property is valid or not? _'];
      } else if (selectedValue === 'Java') {
        return ['JVM stands for _', 'Number of primitive data types in Java are _', 'An Array is an _ in Java', 'toString() is defined in _.', "'_' keyword cannot be used for constructor."];
      } else {
        return [];
      }
    }),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    questions = _useState4[0],
    setQuestions = _useState4[1];
  var _useState5 = (0, _react.useState)(function () {
      if (selectedValue === 'ReactJS') {
        return [{
          id: 1,
          text: 'Library'
        }, {
          id: 2,
          text: 'Virtual'
        }, {
          id: 3,
          text: 'Axios'
        }, {
          id: 4,
          text: 'User Interfaces'
        }, {
          id: 5,
          text: 'Context API'
        }];
      } else if (selectedValue === 'React Native') {
        return [{
          id: 1,
          text: 'React Native Navigate'
        }, {
          id: 2,
          text: 'Flutter'
        }, {
          id: 3,
          text: 'Mobile'
        }, {
          id: 4,
          text: 'Android Studio'
        }, {
          id: 5,
          text: 'Expo'
        }];
      } else if (selectedValue === 'JavaScript') {
        return [{
          id: 1,
          text: 'let'
        }, {
          id: 2,
          text: 'in'
        }, {
          id: 3,
          text: 'document.write()'
        }, {
          id: 4,
          text: 'Object-Oriented'
        }, {
          id: 5,
          text: 'getElementById()'
        }];
      } else if (selectedValue === 'Java') {
        return [{
          id: 1,
          text: 'Object'
        }, {
          id: 2,
          text: 'Java Virtual Machine'
        }, {
          id: 3,
          text: 'static'
        }, {
          id: 4,
          text: '8'
        }, {
          id: 5,
          text: 'java.util.Object'
        }];
      } else {
        return [];
      }
    }),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    answers = _useState6[0],
    setAnswers = _useState6[1];
  var handleAnswerDrop = function handleAnswerDrop(answerId, questionIndex) {
    var correctAnswer;
    if (selectedValue === 'ReactJS') {
      if (questionIndex === 0) {
        correctAnswer = answers[4];
      } else if (questionIndex === 1) {
        correctAnswer = answers[0];
      } else if (questionIndex === 2) {
        correctAnswer = answers[3];
      } else if (questionIndex === 3) {
        correctAnswer = answers[2];
      } else if (questionIndex === 4) {
        correctAnswer = answers[1];
      }
    } else if (selectedValue === 'React Native') {
      if (questionIndex === 0) {
        correctAnswer = answers[2];
      } else if (questionIndex === 1) {
        correctAnswer = answers[4];
      } else if (questionIndex === 2) {
        correctAnswer = answers[0];
      } else if (questionIndex === 3) {
        correctAnswer = answers[3];
      } else if (questionIndex === 4) {
        correctAnswer = answers[1];
      }
    } else if (selectedValue === 'JavaScript') {
      if (questionIndex === 0) {
        correctAnswer = answers[3];
      } else if (questionIndex === 1) {
        correctAnswer = answers[0];
      } else if (questionIndex === 2) {
        correctAnswer = answers[4];
      } else if (questionIndex === 3) {
        correctAnswer = answers[2];
      } else if (questionIndex === 4) {
        correctAnswer = answers[1];
      }
    } else if (selectedValue === 'Java') {
      if (questionIndex === 0) {
        correctAnswer = answers[1];
      } else if (questionIndex === 1) {
        correctAnswer = answers[3];
      } else if (questionIndex === 2) {
        correctAnswer = answers[0];
      } else if (questionIndex === 3) {
        correctAnswer = answers[4];
      } else if (questionIndex === 4) {
        correctAnswer = answers[2];
      }
    }
    if (answerId === correctAnswer.id) {
      var newQuestions = (0, _toConsumableArray2.default)(questions);
      var question = newQuestions[questionIndex];
      var index = question.indexOf('_');
      if (index !== -1) {
        newQuestions[questionIndex] = question.substring(0, index) + correctAnswer.text + question.substring(index + 1);
        setQuestions(newQuestions);
        if (score < maxScore) {
          setScore(score + 1);
        }
      }
      setSelectedAnswer(null);
    } else {
      setSelectedAnswer(null);
    }
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    testID: "question5-container",
    children: [trackScore && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      style: {
        position: 'absolute',
        top: 80,
        color: 'black'
      },
      children: ["Score: ", score]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.questionNavigation,
      children: ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5'].map(function (question, index) {
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            return navigation.navigate(question);
          },
          style: styles.navigationTouchable,
          testID: "goto-" + index,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.navigationText,
            children: index + 1
          })
        }, index);
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.questionsList,
      children: questions.map(function (question, index) {
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.qNaText,
            testID: "question-" + index,
            children: question
          })
        }, index);
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.answersList,
      children: answers.map(function (answer) {
        return (0, _jsxRuntime.jsx)(_reactNative.View, {
          children: (0, _jsxRuntime.jsx)(_reactNativeDraggable.default, {
            x: 200,
            y: answer.id * 40,
            onDragRelease: function onDragRelease(event, gestureState) {
              var questionIndex = -1;
              for (var i = 0; i < questionPositions.length; i++) {
                if (gestureState.moveY < questionPositions[i]) {
                  questionIndex = i;
                  break;
                }
              }
              if (questionIndex !== -1) {
                handleAnswerDrop(answer.id, questionIndex);
              } else {
                setSelectedAnswer(null);
              }
            },
            onDrag: function onDrag() {
              return setSelectedAnswer(answer.id);
            },
            shouldReverse: true,
            children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
              style: styles.AnQText,
              testID: "answer-" + answer.id,
              children: answer.text
            })
          })
        }, answer.id);
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.buttonsStyling,
      children: [(0, _jsxRuntime.jsx)(_reactNative.Button, {
        onPress: function onPress() {
          return navigation.goBack();
        },
        title: "Go Back",
        testID: "previousQuestion"
      }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
        onPress: function onPress() {
          return navigation.navigate('Final Score');
        },
        title: "Submit",
        testID: "submitButton"
      })]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white'
  },
  questionNavigation: {
    display: 'flex',
    flexDirection: 'row',
    flexWrap: 'wrap',
    position: 'absolute',
    top: 0
  },
  navigationTouchable: {
    backgroundColor: '#FEB95F',
    padding: 3,
    marginHorizontal: 7,
    borderWidth: 1,
    borderColor: 'black',
    borderRadius: 100,
    height: 30,
    width: 30,
    marginVertical: 20
  },
  navigationText: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 3
  },
  questionsList: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    position: 'absolute',
    width: '100%',
    padding: 9,
    justifyContent: 'center',
    top: 210
  },
  answersList: {
    position: 'absolute',
    display: 'flex',
    flexDirection: 'row',
    top: 0,
    left: -195,
    overflow: 'visible'
  },
  qNaText: {
    fontFamily: 'Roboto',
    color: 'black',
    fontSize: 18,
    marginTop: 25
  },
  AnQText: {
    fontFamily: 'Roboto',
    fontSize: 15,
    backgroundColor: '#66C7F4',
    color: 'white',
    padding: 5
  },
  buttonsStyling: {
    display: 'flex',
    flexDirection: 'row',
    position: 'absolute',
    bottom: 10
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfbmF0aXZlIiwiX1F1aXpDb250ZXh0IiwiX3JlYWN0TmF0aXZlRHJhZ2dhYmxlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9qc3hSdW50aW1lIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwibm9kZUludGVyb3AiLCJXZWFrTWFwIiwiY2FjaGVCYWJlbEludGVyb3AiLCJjYWNoZU5vZGVJbnRlcm9wIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIlBsYXRmb3JtIiwiT1MiLCJVSU1hbmFnZXIiLCJzZXRMYXlvdXRBbmltYXRpb25FbmFibGVkRXhwZXJpbWVudGFsIiwiUXVlc3Rpb241IiwibmF2aWdhdGlvbiIsInVzZU5hdmlnYXRpb24iLCJfdXNlQ29udGV4dCIsInVzZUNvbnRleHQiLCJRdWl6Q29udGV4dCIsInNjb3JlIiwidHJhY2tTY29yZSIsInNldFNjb3JlIiwic2VsZWN0ZWRWYWx1ZSIsIl91c2VTdGF0ZSIsInVzZVN0YXRlIiwiX3VzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5MiIsInNlbGVjdGVkQW5zd2VyIiwic2V0U2VsZWN0ZWRBbnN3ZXIiLCJtYXhTY29yZSIsInF1ZXN0aW9uUG9zaXRpb25zIiwiX3VzZVN0YXRlMyIsIl91c2VTdGF0ZTQiLCJxdWVzdGlvbnMiLCJzZXRRdWVzdGlvbnMiLCJfdXNlU3RhdGU1IiwiaWQiLCJ0ZXh0IiwiX3VzZVN0YXRlNiIsImFuc3dlcnMiLCJzZXRBbnN3ZXJzIiwiaGFuZGxlQW5zd2VyRHJvcCIsImFuc3dlcklkIiwicXVlc3Rpb25JbmRleCIsImNvcnJlY3RBbnN3ZXIiLCJuZXdRdWVzdGlvbnMiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwicXVlc3Rpb24iLCJpbmRleCIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJqc3hzIiwiVmlldyIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwidGVzdElEIiwiY2hpbGRyZW4iLCJUZXh0IiwicG9zaXRpb24iLCJ0b3AiLCJjb2xvciIsImpzeCIsInF1ZXN0aW9uTmF2aWdhdGlvbiIsIm1hcCIsIlRvdWNoYWJsZU9wYWNpdHkiLCJvblByZXNzIiwibmF2aWdhdGUiLCJuYXZpZ2F0aW9uVG91Y2hhYmxlIiwibmF2aWdhdGlvblRleHQiLCJxdWVzdGlvbnNMaXN0IiwicU5hVGV4dCIsImFuc3dlcnNMaXN0IiwiYW5zd2VyIiwieCIsInkiLCJvbkRyYWdSZWxlYXNlIiwiZXZlbnQiLCJnZXN0dXJlU3RhdGUiLCJpIiwibGVuZ3RoIiwibW92ZVkiLCJvbkRyYWciLCJzaG91bGRSZXZlcnNlIiwiQW5RVGV4dCIsImJ1dHRvbnNTdHlsaW5nIiwiQnV0dG9uIiwiZ29CYWNrIiwidGl0bGUiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZmxleCIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyIsImJhY2tncm91bmRDb2xvciIsImRpc3BsYXkiLCJmbGV4RGlyZWN0aW9uIiwiZmxleFdyYXAiLCJwYWRkaW5nIiwibWFyZ2luSG9yaXpvbnRhbCIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJoZWlnaHQiLCJ3aWR0aCIsIm1hcmdpblZlcnRpY2FsIiwibWFyZ2luTGVmdCIsImxlZnQiLCJvdmVyZmxvdyIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsIm1hcmdpblRvcCIsImJvdHRvbSJdLCJzb3VyY2VzIjpbIlF1ZXN0aW9uNS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUsIHVzZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtcclxuICBUZXh0LFxyXG4gIFZpZXcsXHJcbiAgQnV0dG9uLFxyXG4gIFN0eWxlU2hlZXQsXHJcbiAgVG91Y2hhYmxlT3BhY2l0eSxcclxuICBQbGF0Zm9ybSxcclxuICBVSU1hbmFnZXIsXHJcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjay9saWIvdHlwZXNjcmlwdC9zcmMvdHlwZXMnO1xyXG5pbXBvcnQge1F1aXpDb250ZXh0fSBmcm9tICcuL1F1aXpDb250ZXh0JztcclxuaW1wb3J0IERyYWdnYWJsZSBmcm9tICdyZWFjdC1uYXRpdmUtZHJhZ2dhYmxlJztcclxuaWYgKFxyXG4gIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcgJiZcclxuICBVSU1hbmFnZXIuc2V0TGF5b3V0QW5pbWF0aW9uRW5hYmxlZEV4cGVyaW1lbnRhbFxyXG4pIHtcclxuICBVSU1hbmFnZXIuc2V0TGF5b3V0QW5pbWF0aW9uRW5hYmxlZEV4cGVyaW1lbnRhbCh0cnVlKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUXVlc3Rpb241KCkge1xyXG4gIGNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuICBjb25zdCB7c2NvcmUsIHRyYWNrU2NvcmUsIHNldFNjb3JlLCBzZWxlY3RlZFZhbHVlfSA9IHVzZUNvbnRleHQoUXVpekNvbnRleHQpO1xyXG4gIGNvbnN0IFtzZWxlY3RlZEFuc3dlciwgc2V0U2VsZWN0ZWRBbnN3ZXJdID0gdXNlU3RhdGU8YW55PihudWxsKTtcclxuICBjb25zdCBtYXhTY29yZSA9IDk7XHJcbiAgbGV0IHF1ZXN0aW9uUG9zaXRpb25zOiBudW1iZXJbXSA9IFtdO1xyXG4gIGlmIChzZWxlY3RlZFZhbHVlID09PSAnUmVhY3RKUycgfHwgc2VsZWN0ZWRWYWx1ZSA9PT0gJ0phdmEnKSB7XHJcbiAgICBxdWVzdGlvblBvc2l0aW9ucyA9IFszNTAsIDQxMCwgNDUwLCA1MDAsIDY1MF07XHJcbiAgfSBlbHNlIGlmIChzZWxlY3RlZFZhbHVlID09PSAnUmVhY3QgTmF0aXZlJykge1xyXG4gICAgcXVlc3Rpb25Qb3NpdGlvbnMgPSBbMzYwLCA0NDAsIDUxNSwgNTcwLCA2NTBdO1xyXG4gIH0gZWxzZSBpZiAoc2VsZWN0ZWRWYWx1ZSA9PT0gJ0phdmFTY3JpcHQnKSB7XHJcbiAgICBxdWVzdGlvblBvc2l0aW9ucyA9IFszNTAsIDQxMCwgNDUwLCA1MDAsIDY1MF07XHJcbiAgfVxyXG4gIGNvbnN0IFtxdWVzdGlvbnMsIHNldFF1ZXN0aW9uc10gPSB1c2VTdGF0ZSgoKSA9PiB7XHJcbiAgICBpZiAoc2VsZWN0ZWRWYWx1ZSA9PT0gJ1JlYWN0SlMnKSB7XHJcbiAgICAgIHJldHVybiBbXHJcbiAgICAgICAgJ18gaXMgdXNlZCB0byBhdm9pZCBwcm9wLWRyaWxsaW5nLicsXHJcbiAgICAgICAgJ1JlYWN0SlMgaXMgYSBfIG9mIEphdmFzY3JpcHQuJyxcclxuICAgICAgICAnXyBhcmUgY3JlYXRlZCB1c2luZyBSZWFjdEpTLicsXHJcbiAgICAgICAgJ18gaXMgYSB0aGlyZCBwYXJ0eSBSZWFjdEpTIGxpYnJhcnkgY2FsbGVkIHRoYXQgaXMgdXNlZCB0byBtYWtlIEFQSSBjYWxscy4nLFxyXG4gICAgICAgICdSZWFjdEpTIHVzZXMgXyBET00uJyxcclxuICAgICAgXTtcclxuICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRWYWx1ZSA9PT0gJ1JlYWN0IE5hdGl2ZScpIHtcclxuICAgICAgcmV0dXJuIFtcclxuICAgICAgICAnUmVhY3QgTmF0aXZlIGlzIHByaW1hcmlseSB1c2VkIHRvIG1ha2UgXyBhcHBsaWNhdGlvbnMuJyxcclxuICAgICAgICAnXyBDTEkgaXMgdGhlIG90aGVyIG9wdGlvbiB0byBtYWtlIFJlYWN0IE5hdGl2ZSBBcHBsaWNhdGlvbnMuJyxcclxuICAgICAgICAnQSBwb3B1bGFyIG9wdGlvbiB0byBuYXZpZ2F0ZSBiZXR3ZWVuIHRoZSBzY3JlZW5zIGlzIF8nLFxyXG4gICAgICAgIFwiUmVhY3QgTmF0aXZlIENMSSdzIEFuZHJvaWQgdGVzdGluZyBpcyBkb25lIG9uIF8gcHJpbWFyaWx5LlwiLFxyXG4gICAgICAgICdBc2lkZSBmcm9tIFJlYWN0IE5hdGl2ZSB3ZSBjYW4gYWxzbyB1c2UgXyBmb3IgbW9iaWxlIGFwcCBkZXZlbG9wbWVudC4nLFxyXG4gICAgICBdO1xyXG4gICAgfSBlbHNlIGlmIChzZWxlY3RlZFZhbHVlID09PSAnSmF2YVNjcmlwdCcpIHtcclxuICAgICAgcmV0dXJuIFtcclxuICAgICAgICAnSmF2YXNjcmlwdCBpcyBhbiBfIGxhbmd1YWdlJyxcclxuICAgICAgICAndmFyIGFuZCBfIGFyZSB0aGUga2V5d29yZHMgdXNlZCB0byBkZWZpbmUgYSB2YXJpYWJsZSBpbiBKYXZhc2NyaXB0JyxcclxuICAgICAgICAnXyBjYW4gYmUgdXNlZCB0byBhY2Nlc3MgSFRNTCBlbGVtZW50cyB1c2luZyBKYXZhc2NyaXB0LicsXHJcbiAgICAgICAgJ18gY2FuIGJlIHVzZWQgdG8gZGlzcGxheSBkYXRhIGluIHNvbWUgZm9ybSB1c2luZyBKYXZhc2NyaXB0LicsXHJcbiAgICAgICAgJ1doYXQga2V5d29yZCBpcyB1c2VkIHRvIGNoZWNrIHdoZXRoZXIgYSBnaXZlbiBwcm9wZXJ0eSBpcyB2YWxpZCBvciBub3Q/IF8nLFxyXG4gICAgICBdO1xyXG4gICAgfSBlbHNlIGlmIChzZWxlY3RlZFZhbHVlID09PSAnSmF2YScpIHtcclxuICAgICAgcmV0dXJuIFtcclxuICAgICAgICAnSlZNIHN0YW5kcyBmb3IgXycsXHJcbiAgICAgICAgJ051bWJlciBvZiBwcmltaXRpdmUgZGF0YSB0eXBlcyBpbiBKYXZhIGFyZSBfJyxcclxuICAgICAgICAnQW4gQXJyYXkgaXMgYW4gXyBpbiBKYXZhJyxcclxuICAgICAgICAndG9TdHJpbmcoKSBpcyBkZWZpbmVkIGluIF8uJyxcclxuICAgICAgICBcIidfJyBrZXl3b3JkIGNhbm5vdCBiZSB1c2VkIGZvciBjb25zdHJ1Y3Rvci5cIixcclxuICAgICAgXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9KTtcclxuICBjb25zdCBbYW5zd2Vycywgc2V0QW5zd2Vyc10gPSB1c2VTdGF0ZSgoKSA9PiB7XHJcbiAgICBpZiAoc2VsZWN0ZWRWYWx1ZSA9PT0gJ1JlYWN0SlMnKSB7XHJcbiAgICAgIHJldHVybiBbXHJcbiAgICAgICAge2lkOiAxLCB0ZXh0OiAnTGlicmFyeSd9LFxyXG4gICAgICAgIHtpZDogMiwgdGV4dDogJ1ZpcnR1YWwnfSxcclxuICAgICAgICB7aWQ6IDMsIHRleHQ6ICdBeGlvcyd9LFxyXG4gICAgICAgIHtpZDogNCwgdGV4dDogJ1VzZXIgSW50ZXJmYWNlcyd9LFxyXG4gICAgICAgIHtpZDogNSwgdGV4dDogJ0NvbnRleHQgQVBJJ30sXHJcbiAgICAgIF07XHJcbiAgICB9IGVsc2UgaWYgKHNlbGVjdGVkVmFsdWUgPT09ICdSZWFjdCBOYXRpdmUnKSB7XHJcbiAgICAgIHJldHVybiBbXHJcbiAgICAgICAge2lkOiAxLCB0ZXh0OiAnUmVhY3QgTmF0aXZlIE5hdmlnYXRlJ30sXHJcbiAgICAgICAge2lkOiAyLCB0ZXh0OiAnRmx1dHRlcid9LFxyXG4gICAgICAgIHtpZDogMywgdGV4dDogJ01vYmlsZSd9LFxyXG4gICAgICAgIHtpZDogNCwgdGV4dDogJ0FuZHJvaWQgU3R1ZGlvJ30sXHJcbiAgICAgICAge2lkOiA1LCB0ZXh0OiAnRXhwbyd9LFxyXG4gICAgICBdO1xyXG4gICAgfSBlbHNlIGlmIChzZWxlY3RlZFZhbHVlID09PSAnSmF2YVNjcmlwdCcpIHtcclxuICAgICAgcmV0dXJuIFtcclxuICAgICAgICB7aWQ6IDEsIHRleHQ6ICdsZXQnfSxcclxuICAgICAgICB7aWQ6IDIsIHRleHQ6ICdpbid9LFxyXG4gICAgICAgIHtpZDogMywgdGV4dDogJ2RvY3VtZW50LndyaXRlKCknfSxcclxuICAgICAgICB7aWQ6IDQsIHRleHQ6ICdPYmplY3QtT3JpZW50ZWQnfSxcclxuICAgICAgICB7aWQ6IDUsIHRleHQ6ICdnZXRFbGVtZW50QnlJZCgpJ30sXHJcbiAgICAgIF07XHJcbiAgICB9IGVsc2UgaWYgKHNlbGVjdGVkVmFsdWUgPT09ICdKYXZhJykge1xyXG4gICAgICByZXR1cm4gW1xyXG4gICAgICAgIHtpZDogMSwgdGV4dDogJ09iamVjdCd9LFxyXG4gICAgICAgIHtpZDogMiwgdGV4dDogJ0phdmEgVmlydHVhbCBNYWNoaW5lJ30sXHJcbiAgICAgICAge2lkOiAzLCB0ZXh0OiAnc3RhdGljJ30sXHJcbiAgICAgICAge2lkOiA0LCB0ZXh0OiAnOCd9LFxyXG4gICAgICAgIHtpZDogNSwgdGV4dDogJ2phdmEudXRpbC5PYmplY3QnfSxcclxuICAgICAgXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICB9KTtcclxuICBjb25zdCBoYW5kbGVBbnN3ZXJEcm9wID0gKGFuc3dlcklkOiBudW1iZXIsIHF1ZXN0aW9uSW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgbGV0IGNvcnJlY3RBbnN3ZXI6IGFueTtcclxuICAgIGlmIChzZWxlY3RlZFZhbHVlID09PSAnUmVhY3RKUycpIHtcclxuICAgICAgaWYgKHF1ZXN0aW9uSW5kZXggPT09IDApIHtcclxuICAgICAgICBjb3JyZWN0QW5zd2VyID0gYW5zd2Vyc1s0XTtcclxuICAgICAgfSBlbHNlIGlmIChxdWVzdGlvbkluZGV4ID09PSAxKSB7XHJcbiAgICAgICAgY29ycmVjdEFuc3dlciA9IGFuc3dlcnNbMF07XHJcbiAgICAgIH0gZWxzZSBpZiAocXVlc3Rpb25JbmRleCA9PT0gMikge1xyXG4gICAgICAgIGNvcnJlY3RBbnN3ZXIgPSBhbnN3ZXJzWzNdO1xyXG4gICAgICB9IGVsc2UgaWYgKHF1ZXN0aW9uSW5kZXggPT09IDMpIHtcclxuICAgICAgICBjb3JyZWN0QW5zd2VyID0gYW5zd2Vyc1syXTtcclxuICAgICAgfSBlbHNlIGlmIChxdWVzdGlvbkluZGV4ID09PSA0KSB7XHJcbiAgICAgICAgY29ycmVjdEFuc3dlciA9IGFuc3dlcnNbMV07XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRWYWx1ZSA9PT0gJ1JlYWN0IE5hdGl2ZScpIHtcclxuICAgICAgaWYgKHF1ZXN0aW9uSW5kZXggPT09IDApIHtcclxuICAgICAgICBjb3JyZWN0QW5zd2VyID0gYW5zd2Vyc1syXTtcclxuICAgICAgfSBlbHNlIGlmIChxdWVzdGlvbkluZGV4ID09PSAxKSB7XHJcbiAgICAgICAgY29ycmVjdEFuc3dlciA9IGFuc3dlcnNbNF07XHJcbiAgICAgIH0gZWxzZSBpZiAocXVlc3Rpb25JbmRleCA9PT0gMikge1xyXG4gICAgICAgIGNvcnJlY3RBbnN3ZXIgPSBhbnN3ZXJzWzBdO1xyXG4gICAgICB9IGVsc2UgaWYgKHF1ZXN0aW9uSW5kZXggPT09IDMpIHtcclxuICAgICAgICBjb3JyZWN0QW5zd2VyID0gYW5zd2Vyc1szXTtcclxuICAgICAgfSBlbHNlIGlmIChxdWVzdGlvbkluZGV4ID09PSA0KSB7XHJcbiAgICAgICAgY29ycmVjdEFuc3dlciA9IGFuc3dlcnNbMV07XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRWYWx1ZSA9PT0gJ0phdmFTY3JpcHQnKSB7XHJcbiAgICAgIGlmIChxdWVzdGlvbkluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgY29ycmVjdEFuc3dlciA9IGFuc3dlcnNbM107XHJcbiAgICAgIH0gZWxzZSBpZiAocXVlc3Rpb25JbmRleCA9PT0gMSkge1xyXG4gICAgICAgIGNvcnJlY3RBbnN3ZXIgPSBhbnN3ZXJzWzBdO1xyXG4gICAgICB9IGVsc2UgaWYgKHF1ZXN0aW9uSW5kZXggPT09IDIpIHtcclxuICAgICAgICBjb3JyZWN0QW5zd2VyID0gYW5zd2Vyc1s0XTtcclxuICAgICAgfSBlbHNlIGlmIChxdWVzdGlvbkluZGV4ID09PSAzKSB7XHJcbiAgICAgICAgY29ycmVjdEFuc3dlciA9IGFuc3dlcnNbMl07XHJcbiAgICAgIH0gZWxzZSBpZiAocXVlc3Rpb25JbmRleCA9PT0gNCkge1xyXG4gICAgICAgIGNvcnJlY3RBbnN3ZXIgPSBhbnN3ZXJzWzFdO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHNlbGVjdGVkVmFsdWUgPT09ICdKYXZhJykge1xyXG4gICAgICBpZiAocXVlc3Rpb25JbmRleCA9PT0gMCkge1xyXG4gICAgICAgIGNvcnJlY3RBbnN3ZXIgPSBhbnN3ZXJzWzFdO1xyXG4gICAgICB9IGVsc2UgaWYgKHF1ZXN0aW9uSW5kZXggPT09IDEpIHtcclxuICAgICAgICBjb3JyZWN0QW5zd2VyID0gYW5zd2Vyc1szXTtcclxuICAgICAgfSBlbHNlIGlmIChxdWVzdGlvbkluZGV4ID09PSAyKSB7XHJcbiAgICAgICAgY29ycmVjdEFuc3dlciA9IGFuc3dlcnNbMF07XHJcbiAgICAgIH0gZWxzZSBpZiAocXVlc3Rpb25JbmRleCA9PT0gMykge1xyXG4gICAgICAgIGNvcnJlY3RBbnN3ZXIgPSBhbnN3ZXJzWzRdO1xyXG4gICAgICB9IGVsc2UgaWYgKHF1ZXN0aW9uSW5kZXggPT09IDQpIHtcclxuICAgICAgICBjb3JyZWN0QW5zd2VyID0gYW5zd2Vyc1syXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChhbnN3ZXJJZCA9PT0gY29ycmVjdEFuc3dlci5pZCkge1xyXG4gICAgICBjb25zdCBuZXdRdWVzdGlvbnMgPSBbLi4ucXVlc3Rpb25zXTtcclxuICAgICAgY29uc3QgcXVlc3Rpb24gPSBuZXdRdWVzdGlvbnNbcXVlc3Rpb25JbmRleF07XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gcXVlc3Rpb24uaW5kZXhPZignXycpO1xyXG4gICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgbmV3UXVlc3Rpb25zW3F1ZXN0aW9uSW5kZXhdID1cclxuICAgICAgICAgIHF1ZXN0aW9uLnN1YnN0cmluZygwLCBpbmRleCkgK1xyXG4gICAgICAgICAgY29ycmVjdEFuc3dlci50ZXh0ICtcclxuICAgICAgICAgIHF1ZXN0aW9uLnN1YnN0cmluZyhpbmRleCArIDEpO1xyXG4gICAgICAgIHNldFF1ZXN0aW9ucyhuZXdRdWVzdGlvbnMpO1xyXG4gICAgICAgIGlmIChzY29yZSA8IG1heFNjb3JlKSB7XHJcbiAgICAgICAgICBzZXRTY29yZShzY29yZSArIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBzZXRTZWxlY3RlZEFuc3dlcihudWxsKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNldFNlbGVjdGVkQW5zd2VyKG51bGwpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgcmV0dXJuIChcclxuICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGFpbmVyfSB0ZXN0SUQ9XCJxdWVzdGlvbjUtY29udGFpbmVyXCI+XHJcbiAgICAgIHt0cmFja1Njb3JlICYmIChcclxuICAgICAgICA8VGV4dCBzdHlsZT17e3Bvc2l0aW9uOiAnYWJzb2x1dGUnLCB0b3A6IDgwLCBjb2xvcjogJ2JsYWNrJ319PlxyXG4gICAgICAgICAgU2NvcmU6IHtzY29yZX1cclxuICAgICAgICA8L1RleHQ+XHJcbiAgICAgICl9XHJcblxyXG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnF1ZXN0aW9uTmF2aWdhdGlvbn0+XHJcbiAgICAgICAge1tcclxuICAgICAgICAgICdRdWVzdGlvbiAxJyxcclxuICAgICAgICAgICdRdWVzdGlvbiAyJyxcclxuICAgICAgICAgICdRdWVzdGlvbiAzJyxcclxuICAgICAgICAgICdRdWVzdGlvbiA0JyxcclxuICAgICAgICAgICdRdWVzdGlvbiA1JyxcclxuICAgICAgICBdLm1hcCgocXVlc3Rpb24sIGluZGV4KSA9PiAoXHJcbiAgICAgICAgICA8VG91Y2hhYmxlT3BhY2l0eVxyXG4gICAgICAgICAgICBrZXk9e2luZGV4fVxyXG4gICAgICAgICAgICBvblByZXNzPXsoKSA9PiBuYXZpZ2F0aW9uLm5hdmlnYXRlKHF1ZXN0aW9uKX1cclxuICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5uYXZpZ2F0aW9uVG91Y2hhYmxlfVxyXG4gICAgICAgICAgICB0ZXN0SUQ9e2Bnb3RvLSR7aW5kZXh9YH0+XHJcbiAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMubmF2aWdhdGlvblRleHR9PntpbmRleCArIDF9PC9UZXh0PlxyXG4gICAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxyXG4gICAgICAgICkpfVxyXG4gICAgICA8L1ZpZXc+XHJcblxyXG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnF1ZXN0aW9uc0xpc3R9PlxyXG4gICAgICAgIHtxdWVzdGlvbnMubWFwKChxdWVzdGlvbiwgaW5kZXgpID0+IChcclxuICAgICAgICAgIDxWaWV3IGtleT17aW5kZXh9PlxyXG4gICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLnFOYVRleHR9IHRlc3RJRD17YHF1ZXN0aW9uLSR7aW5kZXh9YH0+XHJcbiAgICAgICAgICAgICAge3F1ZXN0aW9ufVxyXG4gICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgKSl9XHJcbiAgICAgIDwvVmlldz5cclxuICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5hbnN3ZXJzTGlzdH0+XHJcbiAgICAgICAge2Fuc3dlcnMubWFwKGFuc3dlciA9PiAoXHJcbiAgICAgICAgICA8VmlldyBrZXk9e2Fuc3dlci5pZH0+XHJcbiAgICAgICAgICAgIDxEcmFnZ2FibGVcclxuICAgICAgICAgICAgICB4PXsyMDB9XHJcbiAgICAgICAgICAgICAgeT17YW5zd2VyLmlkICogNDB9XHJcbiAgICAgICAgICAgICAgb25EcmFnUmVsZWFzZT17KGV2ZW50LCBnZXN0dXJlU3RhdGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBxdWVzdGlvbkluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXN0aW9uUG9zaXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChnZXN0dXJlU3RhdGUubW92ZVkgPCBxdWVzdGlvblBvc2l0aW9uc1tpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uSW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb25JbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgaGFuZGxlQW5zd2VyRHJvcChhbnN3ZXIuaWQsIHF1ZXN0aW9uSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgc2V0U2VsZWN0ZWRBbnN3ZXIobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICBvbkRyYWc9eygpID0+IHNldFNlbGVjdGVkQW5zd2VyKGFuc3dlci5pZCl9XHJcbiAgICAgICAgICAgICAgc2hvdWxkUmV2ZXJzZT5cclxuICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLkFuUVRleHR9IHRlc3RJRD17YGFuc3dlci0ke2Fuc3dlci5pZH1gfT5cclxuICAgICAgICAgICAgICAgIHthbnN3ZXIudGV4dH1cclxuICAgICAgICAgICAgICA8L1RleHQ+XHJcbiAgICAgICAgICAgIDwvRHJhZ2dhYmxlPlxyXG4gICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICkpfVxyXG4gICAgICA8L1ZpZXc+XHJcbiAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuYnV0dG9uc1N0eWxpbmd9PlxyXG4gICAgICAgIDxCdXR0b25cclxuICAgICAgICAgIG9uUHJlc3M9eygpID0+IG5hdmlnYXRpb24uZ29CYWNrKCl9XHJcbiAgICAgICAgICB0aXRsZT1cIkdvIEJhY2tcIlxyXG4gICAgICAgICAgdGVzdElEPVwicHJldmlvdXNRdWVzdGlvblwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8QnV0dG9uXHJcbiAgICAgICAgICBvblByZXNzPXsoKSA9PiBuYXZpZ2F0aW9uLm5hdmlnYXRlKCdGaW5hbCBTY29yZScpfVxyXG4gICAgICAgICAgdGl0bGU9XCJTdWJtaXRcIlxyXG4gICAgICAgICAgdGVzdElEPVwic3VibWl0QnV0dG9uXCJcclxuICAgICAgICAvPlxyXG4gICAgICA8L1ZpZXc+XHJcbiAgICA8L1ZpZXc+XHJcbiAgKTtcclxufVxyXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XHJcbiAgY29udGFpbmVyOiB7XHJcbiAgICBmbGV4OiAxLFxyXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXHJcbiAgfSxcclxuICBxdWVzdGlvbk5hdmlnYXRpb246IHtcclxuICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxyXG4gICAgZmxleFdyYXA6ICd3cmFwJyxcclxuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxyXG4gICAgdG9wOiAwLFxyXG4gIH0sXHJcbiAgbmF2aWdhdGlvblRvdWNoYWJsZToge1xyXG4gICAgYmFja2dyb3VuZENvbG9yOiAnI0ZFQjk1RicsXHJcbiAgICBwYWRkaW5nOiAzLFxyXG4gICAgbWFyZ2luSG9yaXpvbnRhbDogNyxcclxuICAgIGJvcmRlcldpZHRoOiAxLFxyXG4gICAgYm9yZGVyQ29sb3I6ICdibGFjaycsXHJcbiAgICBib3JkZXJSYWRpdXM6IDEwMCxcclxuICAgIGhlaWdodDogMzAsXHJcbiAgICB3aWR0aDogMzAsXHJcbiAgICBtYXJnaW5WZXJ0aWNhbDogMjAsXHJcbiAgfSxcclxuICBuYXZpZ2F0aW9uVGV4dDoge1xyXG4gICAgZmxleDogMSxcclxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcclxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxyXG4gICAgbWFyZ2luTGVmdDogMyxcclxuICB9LFxyXG4gIHF1ZXN0aW9uc0xpc3Q6IHtcclxuICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxyXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXHJcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgIHdpZHRoOiAnMTAwJScsXHJcbiAgICBwYWRkaW5nOiA5LFxyXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxyXG4gICAgdG9wOiAyMTAsXHJcbiAgfSxcclxuICBhbnN3ZXJzTGlzdDoge1xyXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICBkaXNwbGF5OiAnZmxleCcsXHJcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcclxuICAgIHRvcDogMCxcclxuICAgIGxlZnQ6IC0xOTUsXHJcbiAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxyXG4gIH0sXHJcbiAgcU5hVGV4dDoge1xyXG4gICAgZm9udEZhbWlseTogJ1JvYm90bycsXHJcbiAgICBjb2xvcjogJ2JsYWNrJyxcclxuICAgIGZvbnRTaXplOiAxOCxcclxuICAgIG1hcmdpblRvcDogMjUsXHJcbiAgfSxcclxuICBBblFUZXh0OiB7XHJcbiAgICBmb250RmFtaWx5OiAnUm9ib3RvJyxcclxuICAgIGZvbnRTaXplOiAxNSxcclxuICAgIGJhY2tncm91bmRDb2xvcjogJyM2NkM3RjQnLFxyXG4gICAgY29sb3I6ICd3aGl0ZScsXHJcbiAgICBwYWRkaW5nOiA1LFxyXG4gIH0sXHJcbiAgYnV0dG9uc1N0eWxpbmc6IHtcclxuICAgIGRpc3BsYXk6ICdmbGV4JyxcclxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxyXG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICBib3R0b206IDEwLFxyXG4gIH0sXHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLHVCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFTQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxxQkFBQSxHQUFBQyxzQkFBQSxDQUFBTCxPQUFBO0FBQStDLElBQUFNLFdBQUEsR0FBQU4sT0FBQTtBQUFBLFNBQUFPLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBVCx3QkFBQWEsR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBLDRCQUFBRSxPQUFBLEVBQUFGLEdBQUEsVUFBQUcsS0FBQSxHQUFBUix3QkFBQSxDQUFBQyxXQUFBLE9BQUFPLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFKLEdBQUEsWUFBQUcsS0FBQSxDQUFBRSxHQUFBLENBQUFMLEdBQUEsU0FBQU0sTUFBQSxXQUFBQyxxQkFBQSxHQUFBQyxNQUFBLENBQUFDLGNBQUEsSUFBQUQsTUFBQSxDQUFBRSx3QkFBQSxXQUFBQyxHQUFBLElBQUFYLEdBQUEsUUFBQVcsR0FBQSxrQkFBQUgsTUFBQSxDQUFBSSxTQUFBLENBQUFDLGNBQUEsQ0FBQUMsSUFBQSxDQUFBZCxHQUFBLEVBQUFXLEdBQUEsU0FBQUks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
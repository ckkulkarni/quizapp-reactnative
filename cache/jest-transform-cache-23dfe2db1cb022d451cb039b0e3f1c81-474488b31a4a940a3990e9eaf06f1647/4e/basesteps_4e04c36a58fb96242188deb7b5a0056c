c3e17609d2fc2f83c44a83145208b573
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("react-native-get-random-values");
var _uuid = require("uuid");
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _Base = _interopRequireDefault(require("../../Apps/Base"));
var _jestCucumber = require("jest-cucumber");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var uuid = (0, _uuid.v4)();
var feature = (0, _jestCucumber.loadFeature)('./features/base.feature');
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
(0, _jestCucumber.defineFeature)(feature, function (test) {
  var mockQuizContext = {
    score: 7,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@chandu.com',
    setMail: jest.fn(),
    phone: '1234567890',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  test('User submits form with invalid email', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      and = _ref.and,
      then = _ref.then;
    var wrapper;
    beforeEach(function () {
      wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Base.default, {}));
    });
    given('I am on the base screen', function () {
      var wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Base.default, {}));
      expect(wrapper).toMatchSnapshot();
    });
    when('When I enter a valid email "test@test.com"', function () {
      var emailInput = wrapper.find('[testID="emailInput"]');
      emailInput.simulate('change', {
        target: {
          value: 'test@test.com'
        }
      });
    });
    and('I enter a valid name "John"', function () {
      var nameInput = wrapper.find('[testID="nameInput"]');
      nameInput.simulate('change', {
        target: {
          value: 'John'
        }
      });
    });
    and('I enter a valid phone number "1234567890"', function () {
      var phoneInput = wrapper.find('[testID="phoneInput"]');
      phoneInput.simulate('change', {
        target: {
          value: '1234567890'
        }
      });
    });
    and('I select "ReactJS" as my preferred language', function () {
      var reactJsRadioButton = wrapper.find('[testID="reactJsRadioButton"]');
      reactJsRadioButton.simulate('change', {
        target: {
          value: 'ReactJS'
        }
      });
    });
    and('I select "No" to track my score', function () {
      var noRadioButton = wrapper.find('[testID="noRadioButton"]');
      noRadioButton.simulate('change', {
        target: {
          value: 'false'
        }
      });
    });
    and('I submit the form', function () {
      var submitButton = wrapper.find('[testID="submitButton"]');
      submitButton.simulate('click');
    });
    then('I should see the start quiz button', function () {
      var startQuizButton = wrapper.find('[testID="startQuizButton"]');
      expect(startQuizButton.exists()).toBe(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
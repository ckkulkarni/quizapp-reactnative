ebf11ffe90d0ba634f41ef963dcfd8c8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _native = require("@react-navigation/native");
var _nativeStack = require("@react-navigation/native-stack");
var _react = _interopRequireWildcard(require("react"));
var _Base = _interopRequireDefault(require("./Apps/Base"));
var _Question = _interopRequireDefault(require("./Apps/Question1"));
var _Question2 = _interopRequireDefault(require("./Apps/Question2"));
var _Question3 = _interopRequireDefault(require("./Apps/Question3"));
var _Question4 = _interopRequireDefault(require("./Apps/Question4"));
var _Question5 = _interopRequireDefault(require("./Apps/Question5"));
var _QuizContext = require("./Apps/QuizContext");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _SubmitScreen = _interopRequireDefault(require("./Apps/SubmitScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function App() {
  var stack = (0, _nativeStack.createNativeStackNavigator)();
  var _useState = (0, _react.useState)(0),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    score = _useState2[0],
    setScore = _useState2[1];
  var _useState3 = (0, _react.useState)(''),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    name = _useState4[0],
    setName = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    email = _useState6[0],
    setMail = _useState6[1];
  var _useState7 = (0, _react.useState)(''),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    phone = _useState8[0],
    setPhone = _useState8[1];
  var _useState9 = (0, _react.useState)(''),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    selectedValue = _useState10[0],
    setSelected = _useState10[1];
  var _useState11 = (0, _react.useState)(false),
    _useState12 = (0, _slicedToArray2.default)(_useState11, 2),
    trackScore = _useState12[0],
    setTracker = _useState12[1];
  return (0, _jsxRuntime.jsx)(_reactNativeGestureHandler.GestureHandlerRootView, {
    style: {
      flex: 1
    },
    children: (0, _jsxRuntime.jsx)(_native.NavigationContainer, {
      children: (0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: {
          score: score,
          setScore: setScore,
          name: name,
          setName: setName,
          email: email,
          setMail: setMail,
          phone: phone,
          setPhone: setPhone,
          selectedValue: selectedValue,
          setSelected: setSelected,
          trackScore: trackScore,
          setTracker: setTracker
        },
        children: (0, _jsxRuntime.jsxs)(stack.Navigator, {
          children: [(0, _jsxRuntime.jsx)(stack.Screen, {
            name: "Home",
            component: _Base.default
          }), (0, _jsxRuntime.jsx)(stack.Screen, {
            name: "Question 1",
            component: _Question.default
          }), (0, _jsxRuntime.jsx)(stack.Screen, {
            name: "Question 2",
            component: _Question2.default
          }), (0, _jsxRuntime.jsx)(stack.Screen, {
            name: "Question 3",
            component: _Question3.default
          }), (0, _jsxRuntime.jsx)(stack.Screen, {
            name: "Question 4",
            component: _Question4.default
          }), (0, _jsxRuntime.jsx)(stack.Screen, {
            name: "Question 5",
            component: _Question5.default
          }), (0, _jsxRuntime.jsx)(stack.Screen, {
            name: "Final Score",
            component: _SubmitScreen.default
          })]
        })
      })
    })
  });
}
var _default = App;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
0c744487ca9790a3c0347dd714ca8a5f
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
require("react-native-get-random-values");
var _uuid = require("uuid");
var _jestCucumber = require("jest-cucumber");
var _QuizContext = require("./../../Apps/QuizContext");
var _reactNative2 = require("react-native");
var _native = require("@react-navigation/native");
var _Question = _interopRequireDefault(require("./../../Apps/Question5"));
var _reactNativeDraggable = _interopRequireDefault(require("react-native-draggable"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var uuid = (0, _uuid.v4)();
var navigation = (0, _native.useNavigation)();
var feature = (0, _jestCucumber.loadFeature)('./features/question5.feature');
(0, _jestCucumber.defineFeature)(feature, function (test) {
  var mockQuizContext = {
    score: 0,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@chandu.com',
    setMail: jest.fn(),
    phone: '1234567890',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  test('User answers Question 5 correctly', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      then = _ref.then,
      and = _ref.and;
    given('I am on the Question 5 screen', function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      expect(screen.getByTestId('question5-container')).toBeDefined();
    });
    when('I see the questions rendered properly', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_Question.default, {})
        }));
        expect(screen.getByTestId('question-0').props.children).toBe('_ is used to avoid prop-drilling.');
        expect(screen.getByTestId('question-1').props.children).toBe('ReactJS is a _ of Javascript.');
        expect(screen.getByTestId('question-2').props.children).toBe('_ are created using ReactJS.');
        expect(screen.getByTestId('question-3').props.children).toBe('_ is a third party ReactJS library called that is used to make API calls.');
        expect(screen.getByTestId('question-4').props.children).toBe('ReactJS uses _ DOM.');
      });
    }));
    and('I drag the correct answer to the blank space, and the answer is accepted', (0, _asyncToGenerator2.default)(function* () {
      var answers = [{
        id: 1,
        text: 'Answer 1'
      }, {
        id: 2,
        text: 'Answer 2'
      }, {
        id: 3,
        text: 'Answer 3'
      }];
      var questionPositions = [100, 200, 300];
      var handleAnswerDrop = jest.fn();
      var setSelectedAnswer = jest.fn();
      var _render = (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_reactNative2.View, {
          children: [(0, _jsxRuntime.jsxs)(_reactNative2.View, {
            children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Question 1"
            }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Question 2"
            }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Question 3"
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
            children: answers.map(function (answer) {
              return (0, _jsxRuntime.jsx)(_reactNative2.View, {
                children: (0, _jsxRuntime.jsx)(_reactNativeDraggable.default, {
                  onDrag: function onDrag() {
                    return setSelectedAnswer(answer.id);
                  },
                  onDragRelease: function onDragRelease(event, gestureState) {
                    var questionIndex = -1;
                    for (var i = 0; i < questionPositions.length; i++) {
                      if (gestureState.moveY < questionPositions[i]) {
                        questionIndex = i;
                        break;
                      }
                    }
                    if (questionIndex !== -1) {
                      handleAnswerDrop(answer.id, questionIndex);
                    }
                  },
                  children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
                    children: answer.text
                  })
                })
              }, answer.id);
            })
          })]
        })),
        getByText = _render.getByText,
        UNSAFE_queryAllByType = _render.UNSAFE_queryAllByType;
      var _ref4 = UNSAFE_queryAllByType(_reactNativeDraggable.default) || [],
        _ref5 = (0, _slicedToArray2.default)(_ref4, 1),
        draggableElement = _ref5[0];
      yield (0, _reactNative.fireEvent)(draggableElement, 'drag', {
        moveY: 105
      });
      expect(setSelectedAnswer).toBeCalled();
    }));
  });
  test('User answers Question 5 incorrectly', function (_ref6) {
    var given = _ref6.given,
      when = _ref6.when,
      then = _ref6.then,
      and = _ref6.and;
    given('I am on the Question 5 screen', function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      expect(screen.getByTestId('question5-container')).toBeDefined();
    });
    when('I see the question rendered properly', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
          value: mockQuizContext,
          children: (0, _jsxRuntime.jsx)(_Question.default, {})
        }));
        expect(screen.getByTestId('question-0').props.children).toBe('_ is used to avoid prop-drilling.');
        expect(screen.getByTestId('question-1').props.children).toBe('ReactJS is a _ of Javascript.');
        expect(screen.getByTestId('question-2').props.children).toBe('_ are created using ReactJS.');
        expect(screen.getByTestId('question-3').props.children).toBe('_ is a third party ReactJS library called that is used to make API calls.');
        expect(screen.getByTestId('question-4').props.children).toBe('ReactJS uses _ DOM.');
      });
    }));
    and('I drag an incorrect answer to the blank space, and the answer is rejected', (0, _asyncToGenerator2.default)(function* () {
      var answers = [{
        id: 1,
        text: 'Answer 1'
      }, {
        id: 2,
        text: 'Answer 2'
      }, {
        id: 3,
        text: 'Answer 3'
      }];
      var questionPositions = [100, 200, 300];
      var handleAnswerDrop = jest.fn();
      var setSelectedAnswer = jest.fn();
      var _render2 = (0, _reactNative.render)((0, _jsxRuntime.jsxs)(_reactNative2.View, {
          children: [(0, _jsxRuntime.jsxs)(_reactNative2.View, {
            children: [(0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Question 1"
            }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Question 2"
            }), (0, _jsxRuntime.jsx)(_reactNative2.Text, {
              children: "Question 3"
            })]
          }), (0, _jsxRuntime.jsx)(_reactNative2.View, {
            children: answers.map(function (answer) {
              return (0, _jsxRuntime.jsx)(_reactNative2.View, {
                children: (0, _jsxRuntime.jsx)(_reactNativeDraggable.default, {
                  onDrag: function onDrag() {
                    return setSelectedAnswer(answer.id);
                  },
                  onDragRelease: function onDragRelease(event, gestureState) {
                    var questionIndex = -1;
                    for (var i = 0; i < questionPositions.length; i++) {
                      if (gestureState.moveY < questionPositions[i]) {
                        questionIndex = i;
                        break;
                      }
                    }
                    if (questionIndex !== -1) {
                      handleAnswerDrop(answer.id, questionIndex);
                    }
                  },
                  children: (0, _jsxRuntime.jsx)(_reactNative2.Text, {
                    children: answer.text
                  })
                })
              }, answer.id);
            })
          })]
        })),
        getByText = _render2.getByText,
        UNSAFE_queryAllByType = _render2.UNSAFE_queryAllByType;
      var _ref9 = UNSAFE_queryAllByType(_reactNativeDraggable.default) || [],
        _ref10 = (0, _slicedToArray2.default)(_ref9, 1),
        draggableElement = _ref10[0];
      yield (0, _reactNative.fireEvent)(draggableElement, 'drag', {
        moveY: 155
      });
      expect(setSelectedAnswer).toBeCalled();
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9zbGljZWRUb0FycmF5MiIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9yZWFjdE5hdGl2ZSIsIl91dWlkIiwiX2plc3RDdWN1bWJlciIsIl9RdWl6Q29udGV4dCIsIl9yZWFjdE5hdGl2ZTIiLCJfbmF0aXZlIiwiX1F1ZXN0aW9uIiwiX3JlYWN0TmF0aXZlRHJhZ2dhYmxlIiwiX2pzeFJ1bnRpbWUiLCJfcmVxdWlyZSIsInV1aWQiLCJ1dWlkdjQiLCJuYXZpZ2F0aW9uIiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwiZGVmaW5lRmVhdHVyZSIsInRlc3QiLCJtb2NrUXVpekNvbnRleHQiLCJzY29yZSIsInNldFNjb3JlIiwibmFtZSIsInNldE5hbWUiLCJlbWFpbCIsInNldE1haWwiLCJwaG9uZSIsInNldFBob25lIiwic2VsZWN0ZWRWYWx1ZSIsInNldFNlbGVjdGVkIiwidHJhY2tTY29yZSIsInNldFRyYWNrZXIiLCJfcmVmIiwiZ2l2ZW4iLCJ3aGVuIiwidGhlbiIsImFuZCIsInNjcmVlbiIsInJlbmRlciIsImpzeCIsIlF1aXpDb250ZXh0IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsImNoaWxkcmVuIiwiZGVmYXVsdCIsImV4cGVjdCIsImdldEJ5VGVzdElkIiwidG9CZURlZmluZWQiLCJ3YWl0Rm9yIiwicHJvcHMiLCJ0b0JlIiwiYW5zd2VycyIsImlkIiwidGV4dCIsInF1ZXN0aW9uUG9zaXRpb25zIiwiaGFuZGxlQW5zd2VyRHJvcCIsInNldFNlbGVjdGVkQW5zd2VyIiwiX3JlbmRlciIsImpzeHMiLCJWaWV3IiwiVGV4dCIsIm1hcCIsImFuc3dlciIsIm9uRHJhZyIsIm9uRHJhZ1JlbGVhc2UiLCJldmVudCIsImdlc3R1cmVTdGF0ZSIsInF1ZXN0aW9uSW5kZXgiLCJpIiwibGVuZ3RoIiwibW92ZVkiLCJnZXRCeVRleHQiLCJVTlNBRkVfcXVlcnlBbGxCeVR5cGUiLCJfcmVmNCIsIkRyYWdnYWJsZSIsIl9yZWY1IiwiZHJhZ2dhYmxlRWxlbWVudCIsImZpcmVFdmVudCIsInRvQmVDYWxsZWQiLCJfcmVmNiIsIl9yZW5kZXIyIiwiX3JlZjkiLCJfcmVmMTAiXSwic291cmNlcyI6WyJxdWVzdGlvbjUuc3RlcHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3J9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0ICdyZWFjdC1uYXRpdmUtZ2V0LXJhbmRvbS12YWx1ZXMnO1xyXG5pbXBvcnQge3Y0IGFzIHV1aWR2NH0gZnJvbSAndXVpZCc7XHJcbmltcG9ydCB7bG9hZEZlYXR1cmUsIGRlZmluZUZlYXR1cmV9IGZyb20gJ2plc3QtY3VjdW1iZXInO1xyXG5pbXBvcnQge1F1aXpDb250ZXh0fSBmcm9tICcuLy4uLy4uL0FwcHMvUXVpekNvbnRleHQnO1xyXG5pbXBvcnQge1ZpZXcsIFRleHQsIFRleHRJbnB1dCwgQnV0dG9ufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQge3VzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrJztcclxuaW1wb3J0IFF1ZXN0aW9uNSBmcm9tICcuLy4uLy4uL0FwcHMvUXVlc3Rpb241JztcclxuaW1wb3J0IERyYWdnYWJsZSBmcm9tICdyZWFjdC1uYXRpdmUtZHJhZ2dhYmxlJztcclxuY29uc3QgdXVpZCA9IHV1aWR2NCgpO1xyXG5cclxuY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb248TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcDxhbnk+PigpO1xyXG5cclxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZSgnLi9mZWF0dXJlcy9xdWVzdGlvbjUuZmVhdHVyZScpO1xyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsIHRlc3QgPT4ge1xyXG4gIGNvbnN0IG1vY2tRdWl6Q29udGV4dCA9IHtcclxuICAgIHNjb3JlOiAwLFxyXG4gICAgc2V0U2NvcmU6IGplc3QuZm4oKSxcclxuICAgIG5hbWU6ICdjaGFuZHUnLFxyXG4gICAgc2V0TmFtZTogamVzdC5mbigpLFxyXG4gICAgZW1haWw6ICdjaGFuZHJhQGNoYW5kdS5jb20nLFxyXG4gICAgc2V0TWFpbDogamVzdC5mbigpLFxyXG4gICAgcGhvbmU6ICcxMjM0NTY3ODkwJyxcclxuICAgIHNldFBob25lOiBqZXN0LmZuKCksXHJcbiAgICBzZWxlY3RlZFZhbHVlOiAnUmVhY3RKUycsXHJcbiAgICBzZXRTZWxlY3RlZDogamVzdC5mbigpLFxyXG4gICAgdHJhY2tTY29yZTogdHJ1ZSxcclxuICAgIHNldFRyYWNrZXI6IGplc3QuZm4oKSxcclxuICB9O1xyXG4gIHRlc3QoJ1VzZXIgYW5zd2VycyBRdWVzdGlvbiA1IGNvcnJlY3RseScsICh7Z2l2ZW4sIHdoZW4sIHRoZW4sIGFuZH0pID0+IHtcclxuICAgIGdpdmVuKCdJIGFtIG9uIHRoZSBRdWVzdGlvbiA1IHNjcmVlbicsICgpID0+IHtcclxuICAgICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICAgIDxRdWl6Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja1F1aXpDb250ZXh0fT5cclxuICAgICAgICAgIDxRdWVzdGlvbjUgLz5cclxuICAgICAgICA8L1F1aXpDb250ZXh0LlByb3ZpZGVyPixcclxuICAgICAgKTtcclxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgncXVlc3Rpb241LWNvbnRhaW5lcicpKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCdJIHNlZSB0aGUgcXVlc3Rpb25zIHJlbmRlcmVkIHByb3Blcmx5JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcclxuICAgICAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgICA8UXVpekNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e21vY2tRdWl6Q29udGV4dH0+XHJcbiAgICAgICAgICAgIDxRdWVzdGlvbjUgLz5cclxuICAgICAgICAgIDwvUXVpekNvbnRleHQuUHJvdmlkZXI+LFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgncXVlc3Rpb24tMCcpLnByb3BzLmNoaWxkcmVuKS50b0JlKFxyXG4gICAgICAgICAgJ18gaXMgdXNlZCB0byBhdm9pZCBwcm9wLWRyaWxsaW5nLicsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi0xJykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnUmVhY3RKUyBpcyBhIF8gb2YgSmF2YXNjcmlwdC4nLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgncXVlc3Rpb24tMicpLnByb3BzLmNoaWxkcmVuKS50b0JlKFxyXG4gICAgICAgICAgJ18gYXJlIGNyZWF0ZWQgdXNpbmcgUmVhY3RKUy4nLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgncXVlc3Rpb24tMycpLnByb3BzLmNoaWxkcmVuKS50b0JlKFxyXG4gICAgICAgICAgJ18gaXMgYSB0aGlyZCBwYXJ0eSBSZWFjdEpTIGxpYnJhcnkgY2FsbGVkIHRoYXQgaXMgdXNlZCB0byBtYWtlIEFQSSBjYWxscy4nLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgncXVlc3Rpb24tNCcpLnByb3BzLmNoaWxkcmVuKS50b0JlKFxyXG4gICAgICAgICAgJ1JlYWN0SlMgdXNlcyBfIERPTS4nLFxyXG4gICAgICAgICk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBhbmQoXHJcbiAgICAgICdJIGRyYWcgdGhlIGNvcnJlY3QgYW5zd2VyIHRvIHRoZSBibGFuayBzcGFjZSwgYW5kIHRoZSBhbnN3ZXIgaXMgYWNjZXB0ZWQnLFxyXG4gICAgICBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYW5zd2VycyA9IFtcclxuICAgICAgICAgIHtpZDogMSwgdGV4dDogJ0Fuc3dlciAxJ30sXHJcbiAgICAgICAgICB7aWQ6IDIsIHRleHQ6ICdBbnN3ZXIgMid9LFxyXG4gICAgICAgICAge2lkOiAzLCB0ZXh0OiAnQW5zd2VyIDMnfSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IHF1ZXN0aW9uUG9zaXRpb25zID0gWzEwMCwgMjAwLCAzMDBdO1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZUFuc3dlckRyb3AgPSBqZXN0LmZuKCk7XHJcbiAgICAgICAgY29uc3Qgc2V0U2VsZWN0ZWRBbnN3ZXIgPSBqZXN0LmZuKCk7XHJcbiAgICAgICAgY29uc3Qge2dldEJ5VGV4dCwgVU5TQUZFX3F1ZXJ5QWxsQnlUeXBlfSA9IHJlbmRlcihcclxuICAgICAgICAgIDxWaWV3PlxyXG4gICAgICAgICAgICA8Vmlldz5cclxuICAgICAgICAgICAgICA8VGV4dD5RdWVzdGlvbiAxPC9UZXh0PlxyXG4gICAgICAgICAgICAgIDxUZXh0PlF1ZXN0aW9uIDI8L1RleHQ+XHJcbiAgICAgICAgICAgICAgPFRleHQ+UXVlc3Rpb24gMzwvVGV4dD5cclxuICAgICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICAgICA8Vmlldz5cclxuICAgICAgICAgICAgICB7YW5zd2Vycy5tYXAoYW5zd2VyID0+IChcclxuICAgICAgICAgICAgICAgIDxWaWV3IGtleT17YW5zd2VyLmlkfT5cclxuICAgICAgICAgICAgICAgICAgPERyYWdnYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIG9uRHJhZz17KCkgPT4gc2V0U2VsZWN0ZWRBbnN3ZXIoYW5zd2VyLmlkKX1cclxuICAgICAgICAgICAgICAgICAgICBvbkRyYWdSZWxlYXNlPXsoZXZlbnQsIGdlc3R1cmVTdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgbGV0IHF1ZXN0aW9uSW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVlc3Rpb25Qb3NpdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdlc3R1cmVTdGF0ZS5tb3ZlWSA8IHF1ZXN0aW9uUG9zaXRpb25zW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25JbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvbkluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVBbnN3ZXJEcm9wKGFuc3dlci5pZCwgcXVlc3Rpb25JbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRleHQ+e2Fuc3dlci50ZXh0fTwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XHJcbiAgICAgICAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICAgIDwvVmlldz4sXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBbZHJhZ2dhYmxlRWxlbWVudF0gPSBVTlNBRkVfcXVlcnlBbGxCeVR5cGUoRHJhZ2dhYmxlKSB8fCBbXTtcclxuICAgICAgICBhd2FpdCBmaXJlRXZlbnQoZHJhZ2dhYmxlRWxlbWVudCwgJ2RyYWcnLCB7XHJcbiAgICAgICAgICBtb3ZlWTogMTA1LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdChzZXRTZWxlY3RlZEFuc3dlcikudG9CZUNhbGxlZCgpO1xyXG4gICAgICB9LFxyXG4gICAgKTtcclxuICB9KTtcclxuICB0ZXN0KCdVc2VyIGFuc3dlcnMgUXVlc3Rpb24gNSBpbmNvcnJlY3RseScsICh7Z2l2ZW4sIHdoZW4sIHRoZW4sIGFuZH0pID0+IHtcclxuICAgIGdpdmVuKCdJIGFtIG9uIHRoZSBRdWVzdGlvbiA1IHNjcmVlbicsICgpID0+IHtcclxuICAgICAgY29uc3Qgc2NyZWVuID0gcmVuZGVyKFxyXG4gICAgICAgIDxRdWl6Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja1F1aXpDb250ZXh0fT5cclxuICAgICAgICAgIDxRdWVzdGlvbjUgLz5cclxuICAgICAgICA8L1F1aXpDb250ZXh0LlByb3ZpZGVyPixcclxuICAgICAgKTtcclxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgncXVlc3Rpb241LWNvbnRhaW5lcicpKS50b0JlRGVmaW5lZCgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCdJIHNlZSB0aGUgcXVlc3Rpb24gcmVuZGVyZWQgcHJvcGVybHknLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNjcmVlbiA9IHJlbmRlcihcclxuICAgICAgICAgIDxRdWl6Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17bW9ja1F1aXpDb250ZXh0fT5cclxuICAgICAgICAgICAgPFF1ZXN0aW9uNSAvPlxyXG4gICAgICAgICAgPC9RdWl6Q29udGV4dC5Qcm92aWRlcj4sXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi0wJykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnXyBpcyB1c2VkIHRvIGF2b2lkIHByb3AtZHJpbGxpbmcuJyxcclxuICAgICAgICApO1xyXG4gICAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3F1ZXN0aW9uLTEnKS5wcm9wcy5jaGlsZHJlbikudG9CZShcclxuICAgICAgICAgICdSZWFjdEpTIGlzIGEgXyBvZiBKYXZhc2NyaXB0LicsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi0yJykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnXyBhcmUgY3JlYXRlZCB1c2luZyBSZWFjdEpTLicsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi0zJykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnXyBpcyBhIHRoaXJkIHBhcnR5IFJlYWN0SlMgbGlicmFyeSBjYWxsZWQgdGhhdCBpcyB1c2VkIHRvIG1ha2UgQVBJIGNhbGxzLicsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbi00JykucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICAgICAnUmVhY3RKUyB1c2VzIF8gRE9NLicsXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGFuZChcclxuICAgICAgJ0kgZHJhZyBhbiBpbmNvcnJlY3QgYW5zd2VyIHRvIHRoZSBibGFuayBzcGFjZSwgYW5kIHRoZSBhbnN3ZXIgaXMgcmVqZWN0ZWQnLFxyXG4gICAgICBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYW5zd2VycyA9IFtcclxuICAgICAgICAgIHtpZDogMSwgdGV4dDogJ0Fuc3dlciAxJ30sXHJcbiAgICAgICAgICB7aWQ6IDIsIHRleHQ6ICdBbnN3ZXIgMid9LFxyXG4gICAgICAgICAge2lkOiAzLCB0ZXh0OiAnQW5zd2VyIDMnfSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIGNvbnN0IHF1ZXN0aW9uUG9zaXRpb25zID0gWzEwMCwgMjAwLCAzMDBdO1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZUFuc3dlckRyb3AgPSBqZXN0LmZuKCk7XHJcbiAgICAgICAgY29uc3Qgc2V0U2VsZWN0ZWRBbnN3ZXIgPSBqZXN0LmZuKCk7XHJcbiAgICAgICAgY29uc3Qge2dldEJ5VGV4dCwgVU5TQUZFX3F1ZXJ5QWxsQnlUeXBlfSA9IHJlbmRlcihcclxuICAgICAgICAgIDxWaWV3PlxyXG4gICAgICAgICAgICA8Vmlldz5cclxuICAgICAgICAgICAgICA8VGV4dD5RdWVzdGlvbiAxPC9UZXh0PlxyXG4gICAgICAgICAgICAgIDxUZXh0PlF1ZXN0aW9uIDI8L1RleHQ+XHJcbiAgICAgICAgICAgICAgPFRleHQ+UXVlc3Rpb24gMzwvVGV4dD5cclxuICAgICAgICAgICAgPC9WaWV3PlxyXG4gICAgICAgICAgICA8Vmlldz5cclxuICAgICAgICAgICAgICB7YW5zd2Vycy5tYXAoYW5zd2VyID0+IChcclxuICAgICAgICAgICAgICAgIDxWaWV3IGtleT17YW5zd2VyLmlkfT5cclxuICAgICAgICAgICAgICAgICAgPERyYWdnYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgIG9uRHJhZz17KCkgPT4gc2V0U2VsZWN0ZWRBbnN3ZXIoYW5zd2VyLmlkKX1cclxuICAgICAgICAgICAgICAgICAgICBvbkRyYWdSZWxlYXNlPXsoZXZlbnQsIGdlc3R1cmVTdGF0ZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgbGV0IHF1ZXN0aW9uSW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVlc3Rpb25Qb3NpdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdlc3R1cmVTdGF0ZS5tb3ZlWSA8IHF1ZXN0aW9uUG9zaXRpb25zW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25JbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWVzdGlvbkluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVBbnN3ZXJEcm9wKGFuc3dlci5pZCwgcXVlc3Rpb25JbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPFRleHQ+e2Fuc3dlci50ZXh0fTwvVGV4dD5cclxuICAgICAgICAgICAgICAgICAgPC9EcmFnZ2FibGU+XHJcbiAgICAgICAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICAgIDwvVmlldz4sXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb25zdCBbZHJhZ2dhYmxlRWxlbWVudF0gPSBVTlNBRkVfcXVlcnlBbGxCeVR5cGUoRHJhZ2dhYmxlKSB8fCBbXTtcclxuICAgICAgICBhd2FpdCBmaXJlRXZlbnQoZHJhZ2dhYmxlRWxlbWVudCwgJ2RyYWcnLCB7XHJcbiAgICAgICAgICBtb3ZlWTogMTU1LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV4cGVjdChzZXRTZWxlY3RlZEFuc3dl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
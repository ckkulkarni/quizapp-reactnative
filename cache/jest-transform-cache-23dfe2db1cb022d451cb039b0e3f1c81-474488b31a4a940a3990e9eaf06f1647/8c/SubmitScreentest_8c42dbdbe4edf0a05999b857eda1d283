2e9efe33768c2077a54753129bb46cc7
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _QuizContext = require("./../QuizContext");
require("@testing-library/jest-dom");
require("@testing-library/jest-dom/extend-expect");
var _SubmitScreen = _interopRequireDefault(require("./../SubmitScreen"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
describe('Final screen', function () {
  var mockQuizContext = {
    score: 0,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@chandu.com',
    setMail: jest.fn(),
    phone: '1234567890',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  it('screen renders correctly', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.waitFor)(function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_SubmitScreen.default, {})
      }));
      expect(screen.getByTestId('scoreContainer')).toBeDefined();
    });
  }));
  it('the details render properly', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.waitFor)(function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_SubmitScreen.default, {})
      }));
      expect(screen.getByTestId('score').props.children[1]).toBe(0);
      expect(screen.getByTestId('selectedStream').props.children[1]).toBe('ReactJS');
      expect(screen.getByTestId('name').props.children[1]).toBe('chandu');
      expect(screen.getByTestId('mail').props.children[1]).toBe('chandra@chandu.com');
      expect(screen.getByTestId('phoneNo').props.children[1]).toBe('1234567890');
    });
  }));
  it('the restart button works as expected', (0, _asyncToGenerator2.default)(function* () {
    var restartQuiz = jest.fn();
    yield (0, _reactNative.waitFor)(function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_SubmitScreen.default, {})
      }));
      _reactNative.fireEvent.press(screen.getByTestId('restartQuiz'));
      expect(mockQuizContext.setScore).toBeCalled();
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
1ebf876970dfd0f16212d059b065ae19
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Question = _interopRequireDefault(require("../Question1"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _QuizContext = require("./../QuizContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('Question 1 component', function () {
  var mockQuizContext = {
    score: 0,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@chandu.com',
    setMail: jest.fn(),
    phone: '1234567890',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
    value: mockQuizContext,
    children: (0, _jsxRuntime.jsx)(_Question.default, {})
  }));
  it('component renders properly', function () {
    var wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_Question.default, {}));
    console.log(wrapper.debug());
    expect(wrapper).toMatchSnapshot();
  });
  it("the question is correct assuming that selectedValue state is equal to 'ReactJS'", function () {
    var questionText = screen.getByTestId('questionID');
    expect(questionText.props.children).toBe('What is the extension used for TypeScript in ReactJS?');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9RdWVzdGlvbiIsIl9lbnp5bWVBZGFwdGVyUmVhY3QiLCJlbnp5bWUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9uYXRpdmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfUXVpekNvbnRleHQiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfcmVxdWlyZSIsImNvbmZpZ3VyZSIsImFkYXB0ZXIiLCJBZGFwdGVyIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwibW9ja1F1aXpDb250ZXh0Iiwic2NvcmUiLCJzZXRTY29yZSIsIm5hbWUiLCJzZXROYW1lIiwiZW1haWwiLCJzZXRNYWlsIiwicGhvbmUiLCJzZXRQaG9uZSIsInNlbGVjdGVkVmFsdWUiLCJzZXRTZWxlY3RlZCIsInRyYWNrU2NvcmUiLCJzZXRUcmFja2VyIiwic2NyZWVuIiwicmVuZGVyIiwianN4IiwiUXVpekNvbnRleHQiLCJQcm92aWRlciIsInZhbHVlIiwiY2hpbGRyZW4iLCJpdCIsIndyYXBwZXIiLCJzaGFsbG93IiwiY29uc29sZSIsImxvZyIsImRlYnVnIiwiZXhwZWN0IiwidG9NYXRjaFNuYXBzaG90IiwicXVlc3Rpb25UZXh0IiwiZ2V0QnlUZXN0SWQiLCJwcm9wcyIsInRvQmUiXSwic291cmNlcyI6WyJRdWVzdGlvbjEudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFF1ZXN0aW9uMSBmcm9tICcuLi9RdWVzdGlvbjEnO1xyXG5pbXBvcnQgQWRhcHRlciBmcm9tICdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNic7XHJcbmltcG9ydCB7c2hhbGxvd30gZnJvbSAnZW56eW1lJztcclxuaW1wb3J0ICogYXMgZW56eW1lIGZyb20gJ2VuenltZSc7XHJcbmltcG9ydCB7dXNlTmF2aWdhdGlvbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJztcclxuaW1wb3J0IHtOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUtc3RhY2svbGliL3R5cGVzY3JpcHQvc3JjL3R5cGVzJztcclxuaW1wb3J0IFJlYWN0LCB7dXNlQ29udGV4dH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge3JlbmRlciwgd2FpdEZvcn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQge1RleHQsIEJ1dHRvbiwgUHJlc3NhYmxlfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQge1F1aXpDb250ZXh0fSBmcm9tICcuLy4uL1F1aXpDb250ZXh0JztcclxuZW56eW1lLmNvbmZpZ3VyZSh7YWRhcHRlcjogbmV3IEFkYXB0ZXIoKX0pO1xyXG5jb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcblxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxuXHJcbmRlc2NyaWJlKCdRdWVzdGlvbiAxIGNvbXBvbmVudCcsICgpID0+IHtcclxuICBjb25zdCBtb2NrUXVpekNvbnRleHQgPSB7XHJcbiAgICBzY29yZTogMCxcclxuICAgIHNldFNjb3JlOiBqZXN0LmZuKCksXHJcbiAgICBuYW1lOiAnY2hhbmR1JyxcclxuICAgIHNldE5hbWU6IGplc3QuZm4oKSxcclxuICAgIGVtYWlsOiAnY2hhbmRyYUBjaGFuZHUuY29tJyxcclxuICAgIHNldE1haWw6IGplc3QuZm4oKSxcclxuICAgIHBob25lOiAnMTIzNDU2Nzg5MCcsXHJcbiAgICBzZXRQaG9uZTogamVzdC5mbigpLFxyXG4gICAgc2VsZWN0ZWRWYWx1ZTogJ1JlYWN0SlMnLFxyXG4gICAgc2V0U2VsZWN0ZWQ6IGplc3QuZm4oKSxcclxuICAgIHRyYWNrU2NvcmU6IHRydWUsXHJcbiAgICBzZXRUcmFja2VyOiBqZXN0LmZuKCksXHJcbiAgfTtcclxuICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICA8UXVpekNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e21vY2tRdWl6Q29udGV4dH0+XHJcbiAgICAgIDxRdWVzdGlvbjEgLz5cclxuICAgIDwvUXVpekNvbnRleHQuUHJvdmlkZXI+LFxyXG4gICk7XHJcbiAgaXQoJ2NvbXBvbmVudCByZW5kZXJzIHByb3Blcmx5JywgKCkgPT4ge1xyXG4gICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPFF1ZXN0aW9uMSAvPik7XHJcbiAgICBjb25zb2xlLmxvZyh3cmFwcGVyLmRlYnVnKCkpO1xyXG4gICAgZXhwZWN0KHdyYXBwZXIpLnRvTWF0Y2hTbmFwc2hvdCgpO1xyXG4gIH0pO1xyXG4gIGl0KFwidGhlIHF1ZXN0aW9uIGlzIGNvcnJlY3QgYXNzdW1pbmcgdGhhdCBzZWxlY3RlZFZhbHVlIHN0YXRlIGlzIGVxdWFsIHRvICdSZWFjdEpTJ1wiLCAoKSA9PiB7XHJcbiAgICBjb25zdCBxdWVzdGlvblRleHQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ3F1ZXN0aW9uSUQnKTtcclxuICAgIGV4cGVjdChxdWVzdGlvblRleHQucHJvcHMuY2hpbGRyZW4pLnRvQmUoXHJcbiAgICAgICdXaGF0IGlzIHRoZSBleHRlbnNpb24gdXNlZCBmb3IgVHlwZVNjcmlwdCBpbiBSZWFjdEpTPycsXHJcbiAgICApO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFhQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLEVBQUUsQ0FBQ0MsZUFBZSxDQUFDO01BQ3ZDQyxRQUFRLEVBQUVILElBQUksQ0FBQ0MsRUFBRTtJQUNuQixDQUFDO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDLElBQUFHLHNCQUFBLEdBQUFDLE9BQUE7QUFuQkgsSUFBQUMsU0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUUsbUJBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUMsdUJBQUEsQ0FBQUosT0FBQTtBQUVBLElBQUFLLE9BQUEsR0FBQUwsT0FBQTtBQUVBLElBQUFNLE1BQUEsR0FBQVAsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFPLFlBQUEsR0FBQVAsT0FBQTtBQUVBLElBQUFRLFlBQUEsR0FBQVIsT0FBQTtBQUE2QyxJQUFBUyxXQUFBLEdBQUFULE9BQUE7QUFBQSxTQUFBVSx5QkFBQUMsV0FBQSxlQUFBQyxPQUFBLGtDQUFBQyxpQkFBQSxPQUFBRCxPQUFBLFFBQUFFLGdCQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEseUJBQUFDLFdBQUEsV0FBQUEsV0FBQSxHQUFBRyxnQkFBQSxHQUFBRCxpQkFBQSxLQUFBRixXQUFBO0FBQUEsU0FBQVAsd0JBQUFXLEdBQUEsRUFBQUosV0FBQSxTQUFBQSxXQUFBLElBQUFJLEdBQUEsSUFBQUEsR0FBQSxDQUFB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
7b6615e41961b6596ea8d8d53dd400d9
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn(),
      goBack: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Question = _interopRequireDefault(require("../Question3"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _QuizContext = require("./../QuizContext");
require("@testing-library/jest-dom");
require("@testing-library/jest-dom/extend-expect");
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var navigation = (0, _native.useNavigation)();
describe('Question 3 component', function () {
  var mockQuizContext = {
    score: 0,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@chandu.com',
    setMail: jest.fn(),
    phone: '1234567890',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  it('on touching any of the 5 numbers above the question, the user should navigate to the previous or next questions', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.waitFor)(function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      _reactNative.fireEvent.press(screen.getByTestId('goto-0'));
      expect(navigation.navigate).toBeCalledWith('Question 1');
      _reactNative.fireEvent.press(screen.getByTestId('goto-1'));
      expect(navigation.navigate).toBeCalledWith('Question 2');
      _reactNative.fireEvent.press(screen.getByTestId('goto-3'));
      expect(navigation.navigate).toBeCalledWith('Question 4');
      _reactNative.fireEvent.press(screen.getByTestId('goto-4'));
      expect(navigation.navigate).toBeCalledWith('Question 5');
    });
  }));
  it('on pressing the Next Question Button, it should navigate to the next question screen', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.waitFor)(function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      _reactNative.fireEvent.press(screen.getByTestId('answerButton'));
      expect(navigation.navigate).toBeCalledWith('Question 4');
    });
  }));
  it('on pressing the Next Question Button, it should navigate to the next question screen', (0, _asyncToGenerator2.default)(function* () {
    yield (0, _reactNative.waitFor)(function () {
      var screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
        value: mockQuizContext,
        children: (0, _jsxRuntime.jsx)(_Question.default, {})
      }));
      expect(screen.getByTestId('question').props.children).toBe('What does myReactApp refer to in the following command? npm create-react-app myReactApp');
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJnb0JhY2siLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY1RvR2VuZXJhdG9yMiIsIl9RdWVzdGlvbiIsIl9uYXRpdmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfUXVpekNvbnRleHQiLCJfanN4UnVudGltZSIsIl9yZXF1aXJlIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwibW9ja1F1aXpDb250ZXh0Iiwic2NvcmUiLCJzZXRTY29yZSIsIm5hbWUiLCJzZXROYW1lIiwiZW1haWwiLCJzZXRNYWlsIiwicGhvbmUiLCJzZXRQaG9uZSIsInNlbGVjdGVkVmFsdWUiLCJzZXRTZWxlY3RlZCIsInRyYWNrU2NvcmUiLCJzZXRUcmFja2VyIiwiaXQiLCJkZWZhdWx0Iiwid2FpdEZvciIsInNjcmVlbiIsInJlbmRlciIsImpzeCIsIlF1aXpDb250ZXh0IiwiUHJvdmlkZXIiLCJ2YWx1ZSIsImNoaWxkcmVuIiwiZmlyZUV2ZW50IiwicHJlc3MiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVDYWxsZWRXaXRoIiwicHJvcHMiLCJ0b0JlIl0sInNvdXJjZXMiOlsiUXVlc3Rpb24zLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBRdWVzdGlvbjMgZnJvbSAnLi4vUXVlc3Rpb24zJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjay9saWIvdHlwZXNjcmlwdC9zcmMvdHlwZXMnO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge2ZpcmVFdmVudCwgcmVuZGVyLCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCB7UXVpekNvbnRleHR9IGZyb20gJy4vLi4vUXVpekNvbnRleHQnO1xyXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20nO1xyXG5pbXBvcnQgJ0B0ZXN0aW5nLWxpYnJhcnkvamVzdC1kb20vZXh0ZW5kLWV4cGVjdCc7XHJcbmNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgICBnb0JhY2s6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5kZXNjcmliZSgnUXVlc3Rpb24gMyBjb21wb25lbnQnLCAoKSA9PiB7XHJcbiAgY29uc3QgbW9ja1F1aXpDb250ZXh0ID0ge1xyXG4gICAgc2NvcmU6IDAsXHJcbiAgICBzZXRTY29yZTogamVzdC5mbigpLFxyXG4gICAgbmFtZTogJ2NoYW5kdScsXHJcbiAgICBzZXROYW1lOiBqZXN0LmZuKCksXHJcbiAgICBlbWFpbDogJ2NoYW5kcmFAY2hhbmR1LmNvbScsXHJcbiAgICBzZXRNYWlsOiBqZXN0LmZuKCksXHJcbiAgICBwaG9uZTogJzEyMzQ1Njc4OTAnLFxyXG4gICAgc2V0UGhvbmU6IGplc3QuZm4oKSxcclxuICAgIHNlbGVjdGVkVmFsdWU6ICdSZWFjdEpTJyxcclxuICAgIHNldFNlbGVjdGVkOiBqZXN0LmZuKCksXHJcbiAgICB0cmFja1Njb3JlOiB0cnVlLFxyXG4gICAgc2V0VHJhY2tlcjogamVzdC5mbigpLFxyXG4gIH07XHJcbiAgaXQoJ29uIHRvdWNoaW5nIGFueSBvZiB0aGUgNSBudW1iZXJzIGFib3ZlIHRoZSBxdWVzdGlvbiwgdGhlIHVzZXIgc2hvdWxkIG5hdmlnYXRlIHRvIHRoZSBwcmV2aW91cyBvciBuZXh0IHF1ZXN0aW9ucycsIGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgPFF1aXpDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXttb2NrUXVpekNvbnRleHR9PlxyXG4gICAgICAgICAgPFF1ZXN0aW9uMyAvPlxyXG4gICAgICAgIDwvUXVpekNvbnRleHQuUHJvdmlkZXI+LFxyXG4gICAgICApO1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGVzdElkKCdnb3RvLTAnKSk7XHJcbiAgICAgIGV4cGVjdChuYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0JlQ2FsbGVkV2l0aCgnUXVlc3Rpb24gMScpO1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGVzdElkKCdnb3RvLTEnKSk7XHJcbiAgICAgIGV4cGVjdChuYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0JlQ2FsbGVkV2l0aCgnUXVlc3Rpb24gMicpO1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGVzdElkKCdnb3RvLTMnKSk7XHJcbiAgICAgIGV4cGVjdChuYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0JlQ2FsbGVkV2l0aCgnUXVlc3Rpb24gNCcpO1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGVzdElkKCdnb3RvLTQnKSk7XHJcbiAgICAgIGV4cGVjdChuYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0JlQ2FsbGVkV2l0aCgnUXVlc3Rpb24gNScpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgaXQoJ29uIHByZXNzaW5nIHRoZSBOZXh0IFF1ZXN0aW9uIEJ1dHRvbiwgaXQgc2hvdWxkIG5hdmlnYXRlIHRvIHRoZSBuZXh0IHF1ZXN0aW9uIHNjcmVlbicsIGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgPFF1aXpDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXttb2NrUXVpekNvbnRleHR9PlxyXG4gICAgICAgICAgPFF1ZXN0aW9uMyAvPlxyXG4gICAgICAgIDwvUXVpekNvbnRleHQuUHJvdmlkZXI+LFxyXG4gICAgICApO1xyXG4gICAgICBmaXJlRXZlbnQucHJlc3Moc2NyZWVuLmdldEJ5VGVzdElkKCdhbnN3ZXJCdXR0b24nKSk7XHJcbiAgICAgIGV4cGVjdChuYXZpZ2F0aW9uLm5hdmlnYXRlKS50b0JlQ2FsbGVkV2l0aCgnUXVlc3Rpb24gNCcpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgaXQoJ29uIHByZXNzaW5nIHRoZSBOZXh0IFF1ZXN0aW9uIEJ1dHRvbiwgaXQgc2hvdWxkIG5hdmlnYXRlIHRvIHRoZSBuZXh0IHF1ZXN0aW9uIHNjcmVlbicsIGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xyXG4gICAgICBjb25zdCBzY3JlZW4gPSByZW5kZXIoXHJcbiAgICAgICAgPFF1aXpDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXttb2NrUXVpekNvbnRleHR9PlxyXG4gICAgICAgICAgPFF1ZXN0aW9uMyAvPlxyXG4gICAgICAgIDwvUXVpekNvbnRleHQuUHJvdmlkZXI+LFxyXG4gICAgICApO1xyXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdxdWVzdGlvbicpLnByb3BzLmNoaWxkcmVuKS50b0JlKFxyXG4gICAgICAgICdXaGF0IGRvZXMgbXlSZWFjdEFwcCByZWZlciB0byBpbiB0aGUgZm9sbG93aW5nIGNvbW1hbmQ/IG5wbSBjcmVhdGUtcmVhY3QtYXBwIG15UmVhY3RBcHAnLFxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3Mi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
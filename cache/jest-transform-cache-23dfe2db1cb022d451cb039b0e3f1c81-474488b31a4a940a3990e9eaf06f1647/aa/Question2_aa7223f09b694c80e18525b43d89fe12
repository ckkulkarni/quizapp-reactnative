7ea6168c6c0fb2ed3f7d90c4ccc12c43
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Question2;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _QuizContext = require("./QuizContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Question2() {
  var navigation = (0, _native.useNavigation)();
  var _useContext = (0, _react.useContext)(_QuizContext.QuizContext),
    score = _useContext.score,
    setScore = _useContext.setScore,
    selectedValue = _useContext.selectedValue,
    trackScore = _useContext.trackScore;
  var _useState = (0, _react.useState)(),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    answerIndex = _useState2[0],
    setIndex = _useState2[1];
  var currentScore = score;
  var maxScore = 9;
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    submitted = _useState4[0],
    setSubmit = _useState4[1];
  var question = '';
  var answers = [];
  if (selectedValue == 'ReactJS') {
    question = 'ReactJS a framework of JavaScript. True or false';
    answers = ['True', 'False'];
  } else if (selectedValue == 'React Native') {
    question = 'React Native can only be used to create apps for Android and IOS. True or false?';
    answers = ['True', 'False'];
  } else if (selectedValue == 'JavaScript') {
    question = 'JavaScript must always be used for a web page. True or false?';
    answers = ['True', 'False'];
  } else if (selectedValue == 'Java') {
    question = 'JSP stands for Jakarta Server Pages. True or false?';
    answers = ['True', 'False'];
  }
  var handleAnswerCheck = function handleAnswerCheck() {
    setSubmit(true);
    if (selectedValue == 'ReactJS') {
      if (answerIndex === 1 && score < maxScore) {
        setScore(score + 1);
      } else {
        setScore(currentScore);
      }
    } else if (selectedValue == 'React Native') {
      if (answerIndex === 0 && score < maxScore) {
        setScore(score + 1);
      } else {
        setScore(currentScore);
      }
    } else if (selectedValue == 'JavaScript') {
      if (answerIndex === 1 && score < maxScore) {
        setScore(score + 1);
      } else {
        setScore(currentScore);
      }
    } else if (selectedValue == 'Java') {
      if (answerIndex === 0 && score < maxScore) {
        setScore(score + 1);
      } else {
        setScore(currentScore);
      }
    }
  };
  var handleOptionPress = function handleOptionPress(index) {
    setIndex(index);
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    testID: "questionContainer",
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.questionNavigation,
      children: ['Question 1', 'Question 2', 'Question 3', 'Question 4', 'Question 5'].map(function (question, index) {
        return (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          testID: "goto-" + index,
          onPress: function onPress() {
            return navigation.navigate(question);
          },
          style: styles.navigationTouchable,
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.navigationText,
            children: index + 1
          })
        }, index);
      })
    }), trackScore && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
      testID: "score",
      children: ["Score: ", score]
    }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: {
        fontSize: 20,
        color: 'black'
      },
      testID: "question",
      children: question
    }), answers.map(function (answer, index) {
      return (0, _jsxRuntime.jsx)(_reactNative.Pressable, {
        style: [styles.optionStyling, answerIndex === index && styles.selectedOption],
        onPress: function onPress() {
          return handleOptionPress(index);
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
          testID: "answer-" + index,
          children: answer
        })
      }, index);
    }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
      title: "Answer",
      onPress: handleAnswerCheck,
      disabled: submitted,
      testID: "answerButton"
    }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
      title: "Next Question",
      onPress: function onPress() {
        return navigation.navigate('Question 3');
      },
      testID: "nextQuestion"
    }), (0, _jsxRuntime.jsx)(_reactNative.Button, {
      title: "Go Back",
      onPress: function onPress() {
        return navigation.goBack();
      },
      testID: "previousQuestion"
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  optionStyling: {
    backgroundColor: '#00A1E4',
    padding: 10,
    borderRadius: 20,
    marginTop: 6,
    marginBottom: 10,
    width: '70%'
  },
  selectedOption: {
    backgroundColor: '#CC3F0C'
  },
  questionNavigation: {
    display: 'flex',
    flexDirection: 'row',
    flexWrap: 'wrap',
    position: 'absolute',
    top: 0
  },
  navigationTouchable: {
    backgroundColor: '#FEB95F',
    padding: 3,
    marginHorizontal: 7,
    borderWidth: 1,
    borderColor: 'black',
    borderRadius: 100,
    height: 30,
    width: 30,
    marginVertical: 20
  },
  navigationText: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 3
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
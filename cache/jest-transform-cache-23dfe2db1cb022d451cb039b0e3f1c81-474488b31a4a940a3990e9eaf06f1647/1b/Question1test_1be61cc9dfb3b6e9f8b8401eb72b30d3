adbe3584e1bfd85d7d0da727e923727f
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _Question = _interopRequireDefault(require("../Question1"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('Question 1 component', function () {
  var mockQuizContext = {
    trackScore: true,
    score: 0,
    setScore: jest.fn(),
    selectedValue: 'ReactJS'
  };
  var wrapper;
  beforeEach(function () {
    wrapper = enzyme.mount((0, _jsxRuntime.jsx)(_Question.default, {}), {
      context: {
        QuizContext: mockQuizContext
      }
    });
    jest.spyOn(_react.default, 'useContext').mockImplementation(function () {
      return mockQuizContext;
    });
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  var questionText = mockQuizContext.selectedValue === 'ReactJS' ? 'What is the extension used for TypeScript in ReactJS?' : '';
  expect(questionText).toEqual('What is the extension used for TypeScript in ReactJS?');
  it('the component renders properly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should render one question, and 5 answers for that quesiton', function () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Question.default, {})),
      getByText = _render.getByText;
    var questionText = getByText('What is the extension used for TypeScript in ReactJS?');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9RdWVzdGlvbiIsIl9lbnp5bWVBZGFwdGVyUmVhY3QiLCJlbnp5bWUiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl9uYXRpdmUiLCJfcmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJfanN4UnVudGltZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfcmVxdWlyZSIsImNvbmZpZ3VyZSIsImFkYXB0ZXIiLCJBZGFwdGVyIiwibmF2aWdhdGlvbiIsImRlc2NyaWJlIiwibW9ja1F1aXpDb250ZXh0IiwidHJhY2tTY29yZSIsInNjb3JlIiwic2V0U2NvcmUiLCJzZWxlY3RlZFZhbHVlIiwid3JhcHBlciIsImJlZm9yZUVhY2giLCJtb3VudCIsImpzeCIsImNvbnRleHQiLCJRdWl6Q29udGV4dCIsInNweU9uIiwiUmVhY3QiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJhZnRlckVhY2giLCJyZXN0b3JlQWxsTW9ja3MiLCJxdWVzdGlvblRleHQiLCJleHBlY3QiLCJ0b0VxdWFsIiwiaXQiLCJ0b01hdGNoU25hcHNob3QiLCJfcmVuZGVyIiwicmVuZGVyIiwiZ2V0QnlUZXh0Il0sInNvdXJjZXMiOlsiUXVlc3Rpb24xLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBRdWVzdGlvbjEgZnJvbSAnLi4vUXVlc3Rpb24xJztcclxuaW1wb3J0IEFkYXB0ZXIgZnJvbSAnZW56eW1lLWFkYXB0ZXItcmVhY3QtMTYnO1xyXG5pbXBvcnQge3NoYWxsb3d9IGZyb20gJ2VuenltZSc7XHJcbmltcG9ydCAqIGFzIGVuenltZSBmcm9tICdlbnp5bWUnO1xyXG5pbXBvcnQge3VzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrL2xpYi90eXBlc2NyaXB0L3NyYy90eXBlcyc7XHJcbmltcG9ydCBSZWFjdCwge3VzZUNvbnRleHR9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHtUZXh0LCBCdXR0b24sIFByZXNzYWJsZX0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHtRdWl6Q29udGV4dH0gZnJvbSAnLi8uLi9RdWl6Q29udGV4dCc7XHJcbmVuenltZS5jb25maWd1cmUoe2FkYXB0ZXI6IG5ldyBBZGFwdGVyKCl9KTtcclxuY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb248TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcDxhbnk+PigpO1xyXG5cclxuamVzdC5tb2NrKCdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnLCAoKSA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHVzZU5hdmlnYXRpb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUoe1xyXG4gICAgICBuYXZpZ2F0ZTogamVzdC5mbigpLFxyXG4gICAgfSksXHJcbiAgfTtcclxufSk7XHJcblxyXG5kZXNjcmliZSgnUXVlc3Rpb24gMSBjb21wb25lbnQnLCAoKSA9PiB7XHJcbiAgY29uc3QgbW9ja1F1aXpDb250ZXh0ID0ge1xyXG4gICAgdHJhY2tTY29yZTogdHJ1ZSxcclxuICAgIHNjb3JlOiAwLFxyXG4gICAgc2V0U2NvcmU6IGplc3QuZm4oKSxcclxuICAgIHNlbGVjdGVkVmFsdWU6ICdSZWFjdEpTJyxcclxuICB9O1xyXG4gIGxldCB3cmFwcGVyOiBhbnk7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICB3cmFwcGVyID0gZW56eW1lLm1vdW50KDxRdWVzdGlvbjEgLz4sIHtcclxuICAgICAgY29udGV4dDoge1F1aXpDb250ZXh0OiBtb2NrUXVpekNvbnRleHR9LFxyXG4gICAgfSk7XHJcbiAgICBqZXN0LnNweU9uKFJlYWN0LCAndXNlQ29udGV4dCcpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBtb2NrUXVpekNvbnRleHQpO1xyXG4gIH0pO1xyXG4gIGFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LnJlc3RvcmVBbGxNb2NrcygpO1xyXG4gIH0pO1xyXG4gIGNvbnN0IHF1ZXN0aW9uVGV4dCA9XHJcbiAgICBtb2NrUXVpekNvbnRleHQuc2VsZWN0ZWRWYWx1ZSA9PT0gJ1JlYWN0SlMnXHJcbiAgICAgID8gJ1doYXQgaXMgdGhlIGV4dGVuc2lvbiB1c2VkIGZvciBUeXBlU2NyaXB0IGluIFJlYWN0SlM/J1xyXG4gICAgICA6ICcnO1xyXG4gIGV4cGVjdChxdWVzdGlvblRleHQpLnRvRXF1YWwoXHJcbiAgICAnV2hhdCBpcyB0aGUgZXh0ZW5zaW9uIHVzZWQgZm9yIFR5cGVTY3JpcHQgaW4gUmVhY3RKUz8nLFxyXG4gICk7XHJcbiAgaXQoJ3RoZSBjb21wb25lbnQgcmVuZGVycyBwcm9wZXJseScsICgpID0+IHtcclxuICAgIGV4cGVjdCh3cmFwcGVyKS50b01hdGNoU25hcHNob3QoKTtcclxuICB9KTtcclxuICBpdCgnc2hvdWxkIHJlbmRlciBvbmUgcXVlc3Rpb24sIGFuZCA1IGFuc3dlcnMgZm9yIHRoYXQgcXVlc2l0b24nLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7Z2V0QnlUZXh0fSA9IHJlbmRlcig8UXVlc3Rpb24xIC8+KTtcclxuICAgIGNvbnN0IHF1ZXN0aW9uVGV4dCA9IGdldEJ5VGV4dChcclxuICAgICAgJ1doYXQgaXMgdGhlIGV4dGVuc2lvbiB1c2VkIGZvciBUeXBlU2NyaXB0IGluIFJlYWN0SlM/JyxcclxuICAgICk7XHJcbiAgfSk7XHJcbiAgLy8gICBpdCgnc2hvdWxkIHVwZGF0ZSBzZWxlY3RlZEluZGV4IG9uIG9wdGlvbiBwcmVzcycsICgpID0+IHtcclxuICAvLyAgICAgY29uc3Qgb3B0aW9uSW5kZXggPSAxO1xyXG4gIC8vICAgICBjb25zb2xlLmxvZyh3cmFwcGVyLmRlYnVnKCkpO1xyXG4gIC8vICAgICBjb25zdCBvcHRpb24gPSB3cmFwcGVyLmZpbmQoJ1ByZXNzYWJsZScpLmF0KG9wdGlvbkluZGV4KTtcclxuICAvLyAgICAgY29uc29sZS5sb2cob3B0aW9uLmRlYnVnKCkpO1xyXG4gIC8vICAgfSk7XHJcbn0pO1xyXG4iXSwibWFwcGluZ3MiOiJBQWFBQSxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQzFDLE9BQU87SUFDTEMsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsRUFBRSxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFO0lBQ25CLENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUMsSUFBQUcsc0JBQUEsR0FBQUMsT0FBQTtBQW5CSCxJQUFBQyxTQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBRSxtQkFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUcsTUFBQSxHQUFBQyx1QkFBQSxDQUFBSixPQUFBO0FBQ0EsSUFBQUssT0FBQSxHQUFBTCxPQUFBO0FBRUEsSUFBQU0sTUFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQU8sWUFBQSxHQUFBUCxPQUFBO0FBQXFELElBQUFRLFdB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
2466a7f67c81a561e163bf483179ea40
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _Question = _interopRequireDefault(require("../Question1"));
var _enzymeAdapterReact = _interopRequireDefault(require("enzyme-adapter-react-16"));
var enzyme = _interopRequireWildcard(require("enzyme"));
var _native = require("@react-navigation/native");
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("@testing-library/react-native");
var _QuizContext = require("./../QuizContext");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
enzyme.configure({
  adapter: new _enzymeAdapterReact.default()
});
var navigation = (0, _native.useNavigation)();
describe('Question 1 component', function () {
  var mockQuizContext = {
    score: 0,
    setScore: jest.fn(),
    name: 'chandu',
    setName: jest.fn(),
    email: 'chandra@123.com',
    setMail: jest.fn(),
    phone: '123',
    setPhone: jest.fn(),
    selectedValue: 'ReactJS',
    setSelected: jest.fn(),
    trackScore: true,
    setTracker: jest.fn()
  };
  var wrapper;
  beforeEach(function () {
    var wrapper = (0, enzyme.shallow)((0, _jsxRuntime.jsx)(_QuizContext.QuizContext.Provider, {
      value: mockQuizContext,
      children: (0, _jsxRuntime.jsx)(_Question.default, {})
    }));
  });
  afterEach(function () {
    jest.restoreAllMocks();
  });
  var questionText = 'What is the extension used for TypeScript in ReactJS?';
  expect(questionText).toEqual('What is the extension used for TypeScript in ReactJS?');
  it('the component renders properly', function () {
    expect(wrapper).toMatchSnapshot();
  });
  it('should render one question, and 5 answers for that quesiton', (0, _asyncToGenerator2.default)(function* () {
    var _render = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Question.default, {})),
      getByTestId = _render.getByTestId;
    var questionText = yield (0, _reactNative.waitFor)(function () {
      return getByTestId('questionID');
    });
    console.log(questionText.props);
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,